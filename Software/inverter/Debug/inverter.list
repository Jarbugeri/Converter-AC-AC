
inverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069bc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08006ad0  08006ad0  00016ad0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d88  08006d88  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006d88  08006d88  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d88  08006d88  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d88  08006d88  00016d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d8c  08006d8c  00016d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006d90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000070  08006e00  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08006e00  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f042  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000256c  00000000  00000000  0002f0db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00031648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  000322c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b12  00000000  00000000  00032e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de95  00000000  00000000  0004b922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ca58  00000000  00000000  000597b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e620f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bec  00000000  00000000  000e6264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08006ab4 	.word	0x08006ab4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08006ab4 	.word	0x08006ab4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_frsub>:
 8000afc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b00:	e002      	b.n	8000b08 <__addsf3>
 8000b02:	bf00      	nop

08000b04 <__aeabi_fsub>:
 8000b04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b08 <__addsf3>:
 8000b08:	0042      	lsls	r2, r0, #1
 8000b0a:	bf1f      	itttt	ne
 8000b0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b10:	ea92 0f03 	teqne	r2, r3
 8000b14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1c:	d06a      	beq.n	8000bf4 <__addsf3+0xec>
 8000b1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b26:	bfc1      	itttt	gt
 8000b28:	18d2      	addgt	r2, r2, r3
 8000b2a:	4041      	eorgt	r1, r0
 8000b2c:	4048      	eorgt	r0, r1
 8000b2e:	4041      	eorgt	r1, r0
 8000b30:	bfb8      	it	lt
 8000b32:	425b      	neglt	r3, r3
 8000b34:	2b19      	cmp	r3, #25
 8000b36:	bf88      	it	hi
 8000b38:	4770      	bxhi	lr
 8000b3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b56:	bf18      	it	ne
 8000b58:	4249      	negne	r1, r1
 8000b5a:	ea92 0f03 	teq	r2, r3
 8000b5e:	d03f      	beq.n	8000be0 <__addsf3+0xd8>
 8000b60:	f1a2 0201 	sub.w	r2, r2, #1
 8000b64:	fa41 fc03 	asr.w	ip, r1, r3
 8000b68:	eb10 000c 	adds.w	r0, r0, ip
 8000b6c:	f1c3 0320 	rsb	r3, r3, #32
 8000b70:	fa01 f103 	lsl.w	r1, r1, r3
 8000b74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__addsf3+0x78>
 8000b7a:	4249      	negs	r1, r1
 8000b7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b84:	d313      	bcc.n	8000bae <__addsf3+0xa6>
 8000b86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b8a:	d306      	bcc.n	8000b9a <__addsf3+0x92>
 8000b8c:	0840      	lsrs	r0, r0, #1
 8000b8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b92:	f102 0201 	add.w	r2, r2, #1
 8000b96:	2afe      	cmp	r2, #254	; 0xfe
 8000b98:	d251      	bcs.n	8000c3e <__addsf3+0x136>
 8000b9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba2:	bf08      	it	eq
 8000ba4:	f020 0001 	biceq.w	r0, r0, #1
 8000ba8:	ea40 0003 	orr.w	r0, r0, r3
 8000bac:	4770      	bx	lr
 8000bae:	0049      	lsls	r1, r1, #1
 8000bb0:	eb40 0000 	adc.w	r0, r0, r0
 8000bb4:	3a01      	subs	r2, #1
 8000bb6:	bf28      	it	cs
 8000bb8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bbc:	d2ed      	bcs.n	8000b9a <__addsf3+0x92>
 8000bbe:	fab0 fc80 	clz	ip, r0
 8000bc2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bc6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bca:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bce:	bfaa      	itet	ge
 8000bd0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bd4:	4252      	neglt	r2, r2
 8000bd6:	4318      	orrge	r0, r3
 8000bd8:	bfbc      	itt	lt
 8000bda:	40d0      	lsrlt	r0, r2
 8000bdc:	4318      	orrlt	r0, r3
 8000bde:	4770      	bx	lr
 8000be0:	f092 0f00 	teq	r2, #0
 8000be4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000be8:	bf06      	itte	eq
 8000bea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bee:	3201      	addeq	r2, #1
 8000bf0:	3b01      	subne	r3, #1
 8000bf2:	e7b5      	b.n	8000b60 <__addsf3+0x58>
 8000bf4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bfc:	bf18      	it	ne
 8000bfe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c02:	d021      	beq.n	8000c48 <__addsf3+0x140>
 8000c04:	ea92 0f03 	teq	r2, r3
 8000c08:	d004      	beq.n	8000c14 <__addsf3+0x10c>
 8000c0a:	f092 0f00 	teq	r2, #0
 8000c0e:	bf08      	it	eq
 8000c10:	4608      	moveq	r0, r1
 8000c12:	4770      	bx	lr
 8000c14:	ea90 0f01 	teq	r0, r1
 8000c18:	bf1c      	itt	ne
 8000c1a:	2000      	movne	r0, #0
 8000c1c:	4770      	bxne	lr
 8000c1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c22:	d104      	bne.n	8000c2e <__addsf3+0x126>
 8000c24:	0040      	lsls	r0, r0, #1
 8000c26:	bf28      	it	cs
 8000c28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c2c:	4770      	bx	lr
 8000c2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c32:	bf3c      	itt	cc
 8000c34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c38:	4770      	bxcc	lr
 8000c3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	4770      	bx	lr
 8000c48:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c4c:	bf16      	itet	ne
 8000c4e:	4608      	movne	r0, r1
 8000c50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c54:	4601      	movne	r1, r0
 8000c56:	0242      	lsls	r2, r0, #9
 8000c58:	bf06      	itte	eq
 8000c5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c5e:	ea90 0f01 	teqeq	r0, r1
 8000c62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_ui2f>:
 8000c68:	f04f 0300 	mov.w	r3, #0
 8000c6c:	e004      	b.n	8000c78 <__aeabi_i2f+0x8>
 8000c6e:	bf00      	nop

08000c70 <__aeabi_i2f>:
 8000c70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c74:	bf48      	it	mi
 8000c76:	4240      	negmi	r0, r0
 8000c78:	ea5f 0c00 	movs.w	ip, r0
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c84:	4601      	mov	r1, r0
 8000c86:	f04f 0000 	mov.w	r0, #0
 8000c8a:	e01c      	b.n	8000cc6 <__aeabi_l2f+0x2a>

08000c8c <__aeabi_ul2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e00a      	b.n	8000cb0 <__aeabi_l2f+0x14>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_l2f>:
 8000c9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca0:	bf08      	it	eq
 8000ca2:	4770      	bxeq	lr
 8000ca4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ca8:	d502      	bpl.n	8000cb0 <__aeabi_l2f+0x14>
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	ea5f 0c01 	movs.w	ip, r1
 8000cb4:	bf02      	ittt	eq
 8000cb6:	4684      	moveq	ip, r0
 8000cb8:	4601      	moveq	r1, r0
 8000cba:	2000      	moveq	r0, #0
 8000cbc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cc0:	bf08      	it	eq
 8000cc2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cca:	fabc f28c 	clz	r2, ip
 8000cce:	3a08      	subs	r2, #8
 8000cd0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cd4:	db10      	blt.n	8000cf8 <__aeabi_l2f+0x5c>
 8000cd6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cda:	4463      	add	r3, ip
 8000cdc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce0:	f1c2 0220 	rsb	r2, r2, #32
 8000ce4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ce8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cec:	eb43 0002 	adc.w	r0, r3, r2
 8000cf0:	bf08      	it	eq
 8000cf2:	f020 0001 	biceq.w	r0, r0, #1
 8000cf6:	4770      	bx	lr
 8000cf8:	f102 0220 	add.w	r2, r2, #32
 8000cfc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d00:	f1c2 0220 	rsb	r2, r2, #32
 8000d04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d08:	fa21 f202 	lsr.w	r2, r1, r2
 8000d0c:	eb43 0002 	adc.w	r0, r3, r2
 8000d10:	bf08      	it	eq
 8000d12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_fmul>:
 8000d18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d20:	bf1e      	ittt	ne
 8000d22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d26:	ea92 0f0c 	teqne	r2, ip
 8000d2a:	ea93 0f0c 	teqne	r3, ip
 8000d2e:	d06f      	beq.n	8000e10 <__aeabi_fmul+0xf8>
 8000d30:	441a      	add	r2, r3
 8000d32:	ea80 0c01 	eor.w	ip, r0, r1
 8000d36:	0240      	lsls	r0, r0, #9
 8000d38:	bf18      	it	ne
 8000d3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d3e:	d01e      	beq.n	8000d7e <__aeabi_fmul+0x66>
 8000d40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d58:	bf3e      	ittt	cc
 8000d5a:	0049      	lslcc	r1, r1, #1
 8000d5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d60:	005b      	lslcc	r3, r3, #1
 8000d62:	ea40 0001 	orr.w	r0, r0, r1
 8000d66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d6a:	2afd      	cmp	r2, #253	; 0xfd
 8000d6c:	d81d      	bhi.n	8000daa <__aeabi_fmul+0x92>
 8000d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	4770      	bx	lr
 8000d7e:	f090 0f00 	teq	r0, #0
 8000d82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d86:	bf08      	it	eq
 8000d88:	0249      	lsleq	r1, r1, #9
 8000d8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d92:	3a7f      	subs	r2, #127	; 0x7f
 8000d94:	bfc2      	ittt	gt
 8000d96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d9e:	4770      	bxgt	lr
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	3a01      	subs	r2, #1
 8000daa:	dc5d      	bgt.n	8000e68 <__aeabi_fmul+0x150>
 8000dac:	f112 0f19 	cmn.w	r2, #25
 8000db0:	bfdc      	itt	le
 8000db2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000db6:	4770      	bxle	lr
 8000db8:	f1c2 0200 	rsb	r2, r2, #0
 8000dbc:	0041      	lsls	r1, r0, #1
 8000dbe:	fa21 f102 	lsr.w	r1, r1, r2
 8000dc2:	f1c2 0220 	rsb	r2, r2, #32
 8000dc6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dce:	f140 0000 	adc.w	r0, r0, #0
 8000dd2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dd6:	bf08      	it	eq
 8000dd8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ddc:	4770      	bx	lr
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0040      	lsleq	r0, r0, #1
 8000dea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dee:	3a01      	subeq	r2, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fmul+0xce>
 8000df2:	ea40 000c 	orr.w	r0, r0, ip
 8000df6:	f093 0f00 	teq	r3, #0
 8000dfa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfe:	bf02      	ittt	eq
 8000e00:	0049      	lsleq	r1, r1, #1
 8000e02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e06:	3b01      	subeq	r3, #1
 8000e08:	d0f9      	beq.n	8000dfe <__aeabi_fmul+0xe6>
 8000e0a:	ea41 010c 	orr.w	r1, r1, ip
 8000e0e:	e78f      	b.n	8000d30 <__aeabi_fmul+0x18>
 8000e10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e14:	ea92 0f0c 	teq	r2, ip
 8000e18:	bf18      	it	ne
 8000e1a:	ea93 0f0c 	teqne	r3, ip
 8000e1e:	d00a      	beq.n	8000e36 <__aeabi_fmul+0x11e>
 8000e20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e24:	bf18      	it	ne
 8000e26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	d1d8      	bne.n	8000dde <__aeabi_fmul+0xc6>
 8000e2c:	ea80 0001 	eor.w	r0, r0, r1
 8000e30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e34:	4770      	bx	lr
 8000e36:	f090 0f00 	teq	r0, #0
 8000e3a:	bf17      	itett	ne
 8000e3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e40:	4608      	moveq	r0, r1
 8000e42:	f091 0f00 	teqne	r1, #0
 8000e46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e4a:	d014      	beq.n	8000e76 <__aeabi_fmul+0x15e>
 8000e4c:	ea92 0f0c 	teq	r2, ip
 8000e50:	d101      	bne.n	8000e56 <__aeabi_fmul+0x13e>
 8000e52:	0242      	lsls	r2, r0, #9
 8000e54:	d10f      	bne.n	8000e76 <__aeabi_fmul+0x15e>
 8000e56:	ea93 0f0c 	teq	r3, ip
 8000e5a:	d103      	bne.n	8000e64 <__aeabi_fmul+0x14c>
 8000e5c:	024b      	lsls	r3, r1, #9
 8000e5e:	bf18      	it	ne
 8000e60:	4608      	movne	r0, r1
 8000e62:	d108      	bne.n	8000e76 <__aeabi_fmul+0x15e>
 8000e64:	ea80 0001 	eor.w	r0, r0, r1
 8000e68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e74:	4770      	bx	lr
 8000e76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e7e:	4770      	bx	lr

08000e80 <__aeabi_fdiv>:
 8000e80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e88:	bf1e      	ittt	ne
 8000e8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e8e:	ea92 0f0c 	teqne	r2, ip
 8000e92:	ea93 0f0c 	teqne	r3, ip
 8000e96:	d069      	beq.n	8000f6c <__aeabi_fdiv+0xec>
 8000e98:	eba2 0203 	sub.w	r2, r2, r3
 8000e9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000ea0:	0249      	lsls	r1, r1, #9
 8000ea2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ea6:	d037      	beq.n	8000f18 <__aeabi_fdiv+0x98>
 8000ea8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000eb0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000eb4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	bf38      	it	cc
 8000ebc:	005b      	lslcc	r3, r3, #1
 8000ebe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ec2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	bf24      	itt	cs
 8000eca:	1a5b      	subcs	r3, r3, r1
 8000ecc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ed0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ed4:	bf24      	itt	cs
 8000ed6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ede:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ee2:	bf24      	itt	cs
 8000ee4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ee8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ef6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	bf18      	it	ne
 8000efe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f02:	d1e0      	bne.n	8000ec6 <__aeabi_fdiv+0x46>
 8000f04:	2afd      	cmp	r2, #253	; 0xfd
 8000f06:	f63f af50 	bhi.w	8000daa <__aeabi_fmul+0x92>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f10:	bf08      	it	eq
 8000f12:	f020 0001 	biceq.w	r0, r0, #1
 8000f16:	4770      	bx	lr
 8000f18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f20:	327f      	adds	r2, #127	; 0x7f
 8000f22:	bfc2      	ittt	gt
 8000f24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f2c:	4770      	bxgt	lr
 8000f2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	3a01      	subs	r2, #1
 8000f38:	e737      	b.n	8000daa <__aeabi_fmul+0x92>
 8000f3a:	f092 0f00 	teq	r2, #0
 8000f3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0040      	lsleq	r0, r0, #1
 8000f46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f4a:	3a01      	subeq	r2, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fdiv+0xc2>
 8000f4e:	ea40 000c 	orr.w	r0, r0, ip
 8000f52:	f093 0f00 	teq	r3, #0
 8000f56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f5a:	bf02      	ittt	eq
 8000f5c:	0049      	lsleq	r1, r1, #1
 8000f5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f62:	3b01      	subeq	r3, #1
 8000f64:	d0f9      	beq.n	8000f5a <__aeabi_fdiv+0xda>
 8000f66:	ea41 010c 	orr.w	r1, r1, ip
 8000f6a:	e795      	b.n	8000e98 <__aeabi_fdiv+0x18>
 8000f6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f70:	ea92 0f0c 	teq	r2, ip
 8000f74:	d108      	bne.n	8000f88 <__aeabi_fdiv+0x108>
 8000f76:	0242      	lsls	r2, r0, #9
 8000f78:	f47f af7d 	bne.w	8000e76 <__aeabi_fmul+0x15e>
 8000f7c:	ea93 0f0c 	teq	r3, ip
 8000f80:	f47f af70 	bne.w	8000e64 <__aeabi_fmul+0x14c>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e776      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	d104      	bne.n	8000f98 <__aeabi_fdiv+0x118>
 8000f8e:	024b      	lsls	r3, r1, #9
 8000f90:	f43f af4c 	beq.w	8000e2c <__aeabi_fmul+0x114>
 8000f94:	4608      	mov	r0, r1
 8000f96:	e76e      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000f98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f9c:	bf18      	it	ne
 8000f9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fa2:	d1ca      	bne.n	8000f3a <__aeabi_fdiv+0xba>
 8000fa4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fa8:	f47f af5c 	bne.w	8000e64 <__aeabi_fmul+0x14c>
 8000fac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fb0:	f47f af3c 	bne.w	8000e2c <__aeabi_fmul+0x114>
 8000fb4:	e75f      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000fb6:	bf00      	nop

08000fb8 <__gesf2>:
 8000fb8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fbc:	e006      	b.n	8000fcc <__cmpsf2+0x4>
 8000fbe:	bf00      	nop

08000fc0 <__lesf2>:
 8000fc0:	f04f 0c01 	mov.w	ip, #1
 8000fc4:	e002      	b.n	8000fcc <__cmpsf2+0x4>
 8000fc6:	bf00      	nop

08000fc8 <__cmpsf2>:
 8000fc8:	f04f 0c01 	mov.w	ip, #1
 8000fcc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fd0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fdc:	bf18      	it	ne
 8000fde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fe2:	d011      	beq.n	8001008 <__cmpsf2+0x40>
 8000fe4:	b001      	add	sp, #4
 8000fe6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fea:	bf18      	it	ne
 8000fec:	ea90 0f01 	teqne	r0, r1
 8000ff0:	bf58      	it	pl
 8000ff2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ff6:	bf88      	it	hi
 8000ff8:	17c8      	asrhi	r0, r1, #31
 8000ffa:	bf38      	it	cc
 8000ffc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001000:	bf18      	it	ne
 8001002:	f040 0001 	orrne.w	r0, r0, #1
 8001006:	4770      	bx	lr
 8001008:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800100c:	d102      	bne.n	8001014 <__cmpsf2+0x4c>
 800100e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001012:	d105      	bne.n	8001020 <__cmpsf2+0x58>
 8001014:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001018:	d1e4      	bne.n	8000fe4 <__cmpsf2+0x1c>
 800101a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800101e:	d0e1      	beq.n	8000fe4 <__cmpsf2+0x1c>
 8001020:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <__aeabi_cfrcmple>:
 8001028:	4684      	mov	ip, r0
 800102a:	4608      	mov	r0, r1
 800102c:	4661      	mov	r1, ip
 800102e:	e7ff      	b.n	8001030 <__aeabi_cfcmpeq>

08001030 <__aeabi_cfcmpeq>:
 8001030:	b50f      	push	{r0, r1, r2, r3, lr}
 8001032:	f7ff ffc9 	bl	8000fc8 <__cmpsf2>
 8001036:	2800      	cmp	r0, #0
 8001038:	bf48      	it	mi
 800103a:	f110 0f00 	cmnmi.w	r0, #0
 800103e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001040 <__aeabi_fcmpeq>:
 8001040:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001044:	f7ff fff4 	bl	8001030 <__aeabi_cfcmpeq>
 8001048:	bf0c      	ite	eq
 800104a:	2001      	moveq	r0, #1
 800104c:	2000      	movne	r0, #0
 800104e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001052:	bf00      	nop

08001054 <__aeabi_fcmplt>:
 8001054:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001058:	f7ff ffea 	bl	8001030 <__aeabi_cfcmpeq>
 800105c:	bf34      	ite	cc
 800105e:	2001      	movcc	r0, #1
 8001060:	2000      	movcs	r0, #0
 8001062:	f85d fb08 	ldr.w	pc, [sp], #8
 8001066:	bf00      	nop

08001068 <__aeabi_fcmple>:
 8001068:	f84d ed08 	str.w	lr, [sp, #-8]!
 800106c:	f7ff ffe0 	bl	8001030 <__aeabi_cfcmpeq>
 8001070:	bf94      	ite	ls
 8001072:	2001      	movls	r0, #1
 8001074:	2000      	movhi	r0, #0
 8001076:	f85d fb08 	ldr.w	pc, [sp], #8
 800107a:	bf00      	nop

0800107c <__aeabi_fcmpge>:
 800107c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001080:	f7ff ffd2 	bl	8001028 <__aeabi_cfrcmple>
 8001084:	bf94      	ite	ls
 8001086:	2001      	movls	r0, #1
 8001088:	2000      	movhi	r0, #0
 800108a:	f85d fb08 	ldr.w	pc, [sp], #8
 800108e:	bf00      	nop

08001090 <__aeabi_fcmpgt>:
 8001090:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001094:	f7ff ffc8 	bl	8001028 <__aeabi_cfrcmple>
 8001098:	bf34      	ite	cc
 800109a:	2001      	movcc	r0, #1
 800109c:	2000      	movcs	r0, #0
 800109e:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a2:	bf00      	nop

080010a4 <__aeabi_f2iz>:
 80010a4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010a8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010ac:	d30f      	bcc.n	80010ce <__aeabi_f2iz+0x2a>
 80010ae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010b2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010b6:	d90d      	bls.n	80010d4 <__aeabi_f2iz+0x30>
 80010b8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010c0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010c4:	fa23 f002 	lsr.w	r0, r3, r2
 80010c8:	bf18      	it	ne
 80010ca:	4240      	negne	r0, r0
 80010cc:	4770      	bx	lr
 80010ce:	f04f 0000 	mov.w	r0, #0
 80010d2:	4770      	bx	lr
 80010d4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010d8:	d101      	bne.n	80010de <__aeabi_f2iz+0x3a>
 80010da:	0242      	lsls	r2, r0, #9
 80010dc:	d105      	bne.n	80010ea <__aeabi_f2iz+0x46>
 80010de:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010e2:	bf08      	it	eq
 80010e4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr

080010f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f6:	f000 fb9d 	bl	8001834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010fa:	f000 f825 	bl	8001148 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010fe:	f000 f975 	bl	80013ec <MX_GPIO_Init>
  MX_ADC1_Init();
 8001102:	f000 f87d 	bl	8001200 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001106:	f000 f8b9 	bl	800127c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  lcd16x2_init_4bits(RS_GPIO_Port, RS_Pin, EN_Pin,
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	9303      	str	r3, [sp, #12]
 800110e:	2340      	movs	r3, #64	; 0x40
 8001110:	9302      	str	r3, [sp, #8]
 8001112:	2320      	movs	r3, #32
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	2310      	movs	r3, #16
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <main+0x4c>)
 800111c:	2208      	movs	r2, #8
 800111e:	2102      	movs	r1, #2
 8001120:	4806      	ldr	r0, [pc, #24]	; (800113c <main+0x4c>)
 8001122:	f003 f9d1 	bl	80044c8 <lcd16x2_init_4bits>
		  DATA0_GPIO_Port, DATA0_Pin, DATA1_Pin, DATA2_Pin, DATA3_Pin);

  app_init(&app);
 8001126:	4806      	ldr	r0, [pc, #24]	; (8001140 <main+0x50>)
 8001128:	f002 fe00 	bl	8003d2c <app_init>


  HAL_TIM_Base_Start_IT(&htim1);
 800112c:	4805      	ldr	r0, [pc, #20]	; (8001144 <main+0x54>)
 800112e:	f001 fdc9 	bl	8002cc4 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	app_loop(&app);
 8001132:	4803      	ldr	r0, [pc, #12]	; (8001140 <main+0x50>)
 8001134:	f002 ff0e 	bl	8003f54 <app_loop>
 8001138:	e7fb      	b.n	8001132 <main+0x42>
 800113a:	bf00      	nop
 800113c:	40010800 	.word	0x40010800
 8001140:	20000130 	.word	0x20000130
 8001144:	200000e8 	.word	0x200000e8

08001148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b094      	sub	sp, #80	; 0x50
 800114c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001152:	2228      	movs	r2, #40	; 0x28
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f003 fe50 	bl	8004dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001178:	2301      	movs	r3, #1
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800117c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001186:	2301      	movs	r3, #1
 8001188:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118a:	2302      	movs	r3, #2
 800118c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800118e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001192:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001194:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001198:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800119e:	4618      	mov	r0, r3
 80011a0:	f001 f898 	bl	80022d4 <HAL_RCC_OscConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011aa:	f000 f9ad 	bl	8001508 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ae:	230f      	movs	r3, #15
 80011b0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b2:	2302      	movs	r3, #2
 80011b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2102      	movs	r1, #2
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 fb02 	bl	80027d4 <HAL_RCC_ClockConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0x92>
  {
    Error_Handler();
 80011d6:	f000 f997 	bl	8001508 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011da:	2302      	movs	r3, #2
 80011dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80011de:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80011e2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 fc66 	bl	8002ab8 <HAL_RCCEx_PeriphCLKConfig>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011f2:	f000 f989 	bl	8001508 <Error_Handler>
  }
}
 80011f6:	bf00      	nop
 80011f8:	3750      	adds	r7, #80	; 0x50
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <MX_ADC1_Init+0x74>)
 8001212:	4a19      	ldr	r2, [pc, #100]	; (8001278 <MX_ADC1_Init+0x78>)
 8001214:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_ADC1_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <MX_ADC1_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_ADC1_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_ADC1_Init+0x74>)
 800122a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800122e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001230:	4b10      	ldr	r3, [pc, #64]	; (8001274 <MX_ADC1_Init+0x74>)
 8001232:	2200      	movs	r2, #0
 8001234:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_ADC1_Init+0x74>)
 8001238:	2201      	movs	r2, #1
 800123a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800123c:	480d      	ldr	r0, [pc, #52]	; (8001274 <MX_ADC1_Init+0x74>)
 800123e:	f000 fb7f 	bl	8001940 <HAL_ADC_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001248:	f000 f95e 	bl	8001508 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800124c:	2309      	movs	r3, #9
 800124e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001250:	2301      	movs	r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	4619      	mov	r1, r3
 800125c:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_ADC1_Init+0x74>)
 800125e:	f000 fc47 	bl	8001af0 <HAL_ADC_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001268:	f000 f94e 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200000b8 	.word	0x200000b8
 8001278:	40012400 	.word	0x40012400

0800127c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b096      	sub	sp, #88	; 0x58
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001282:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001290:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800129a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]
 80012aa:	615a      	str	r2, [r3, #20]
 80012ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2220      	movs	r2, #32
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f003 fda1 	bl	8004dfc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012ba:	4b4a      	ldr	r3, [pc, #296]	; (80013e4 <MX_TIM1_Init+0x168>)
 80012bc:	4a4a      	ldr	r2, [pc, #296]	; (80013e8 <MX_TIM1_Init+0x16c>)
 80012be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012c0:	4b48      	ldr	r3, [pc, #288]	; (80013e4 <MX_TIM1_Init+0x168>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c6:	4b47      	ldr	r3, [pc, #284]	; (80013e4 <MX_TIM1_Init+0x168>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 12000;
 80012cc:	4b45      	ldr	r3, [pc, #276]	; (80013e4 <MX_TIM1_Init+0x168>)
 80012ce:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80012d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d4:	4b43      	ldr	r3, [pc, #268]	; (80013e4 <MX_TIM1_Init+0x168>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012da:	4b42      	ldr	r3, [pc, #264]	; (80013e4 <MX_TIM1_Init+0x168>)
 80012dc:	2200      	movs	r2, #0
 80012de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e0:	4b40      	ldr	r3, [pc, #256]	; (80013e4 <MX_TIM1_Init+0x168>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012e6:	483f      	ldr	r0, [pc, #252]	; (80013e4 <MX_TIM1_Init+0x168>)
 80012e8:	f001 fc9c 	bl	8002c24 <HAL_TIM_Base_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012f2:	f000 f909 	bl	8001508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001300:	4619      	mov	r1, r3
 8001302:	4838      	ldr	r0, [pc, #224]	; (80013e4 <MX_TIM1_Init+0x168>)
 8001304:	f001 ff48 	bl	8003198 <HAL_TIM_ConfigClockSource>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800130e:	f000 f8fb 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001312:	4834      	ldr	r0, [pc, #208]	; (80013e4 <MX_TIM1_Init+0x168>)
 8001314:	f001 fd22 	bl	8002d5c <HAL_TIM_PWM_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800131e:	f000 f8f3 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800132a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800132e:	4619      	mov	r1, r3
 8001330:	482c      	ldr	r0, [pc, #176]	; (80013e4 <MX_TIM1_Init+0x168>)
 8001332:	f002 fa8f 	bl	8003854 <HAL_TIMEx_MasterConfigSynchronization>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800133c:	f000 f8e4 	bl	8001508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001340:	2360      	movs	r3, #96	; 0x60
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001348:	2300      	movs	r3, #0
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800134c:	2308      	movs	r3, #8
 800134e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001354:	2300      	movs	r3, #0
 8001356:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001358:	2300      	movs	r3, #0
 800135a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800135c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001360:	2200      	movs	r2, #0
 8001362:	4619      	mov	r1, r3
 8001364:	481f      	ldr	r0, [pc, #124]	; (80013e4 <MX_TIM1_Init+0x168>)
 8001366:	f001 fe59 	bl	800301c <HAL_TIM_PWM_ConfigChannel>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001370:	f000 f8ca 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001378:	2204      	movs	r2, #4
 800137a:	4619      	mov	r1, r3
 800137c:	4819      	ldr	r0, [pc, #100]	; (80013e4 <MX_TIM1_Init+0x168>)
 800137e:	f001 fe4d 	bl	800301c <HAL_TIM_PWM_ConfigChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001388:	f000 f8be 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800138c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001390:	2208      	movs	r2, #8
 8001392:	4619      	mov	r1, r3
 8001394:	4813      	ldr	r0, [pc, #76]	; (80013e4 <MX_TIM1_Init+0x168>)
 8001396:	f001 fe41 	bl	800301c <HAL_TIM_PWM_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80013a0:	f000 f8b2 	bl	8001508 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 144;
 80013b0:	2390      	movs	r3, #144	; 0x90
 80013b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	4619      	mov	r1, r3
 80013c6:	4807      	ldr	r0, [pc, #28]	; (80013e4 <MX_TIM1_Init+0x168>)
 80013c8:	f002 fa9c 	bl	8003904 <HAL_TIMEx_ConfigBreakDeadTime>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80013d2:	f000 f899 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013d6:	4803      	ldr	r0, [pc, #12]	; (80013e4 <MX_TIM1_Init+0x168>)
 80013d8:	f000 f930 	bl	800163c <HAL_TIM_MspPostInit>

}
 80013dc:	bf00      	nop
 80013de:	3758      	adds	r7, #88	; 0x58
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200000e8 	.word	0x200000e8
 80013e8:	40012c00 	.word	0x40012c00

080013ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f2:	f107 0310 	add.w	r3, r7, #16
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001400:	4b33      	ldr	r3, [pc, #204]	; (80014d0 <MX_GPIO_Init+0xe4>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a32      	ldr	r2, [pc, #200]	; (80014d0 <MX_GPIO_Init+0xe4>)
 8001406:	f043 0310 	orr.w	r3, r3, #16
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <MX_GPIO_Init+0xe4>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0310 	and.w	r3, r3, #16
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001418:	4b2d      	ldr	r3, [pc, #180]	; (80014d0 <MX_GPIO_Init+0xe4>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a2c      	ldr	r2, [pc, #176]	; (80014d0 <MX_GPIO_Init+0xe4>)
 800141e:	f043 0320 	orr.w	r3, r3, #32
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <MX_GPIO_Init+0xe4>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f003 0320 	and.w	r3, r3, #32
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	4b27      	ldr	r3, [pc, #156]	; (80014d0 <MX_GPIO_Init+0xe4>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a26      	ldr	r2, [pc, #152]	; (80014d0 <MX_GPIO_Init+0xe4>)
 8001436:	f043 0304 	orr.w	r3, r3, #4
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <MX_GPIO_Init+0xe4>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001448:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <MX_GPIO_Init+0xe4>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a20      	ldr	r2, [pc, #128]	; (80014d0 <MX_GPIO_Init+0xe4>)
 800144e:	f043 0308 	orr.w	r3, r3, #8
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <MX_GPIO_Init+0xe4>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001466:	481b      	ldr	r0, [pc, #108]	; (80014d4 <MX_GPIO_Init+0xe8>)
 8001468:	f000 ff1b 	bl	80022a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|EN_Pin|DATA0_Pin
 800146c:	2200      	movs	r2, #0
 800146e:	21fe      	movs	r1, #254	; 0xfe
 8001470:	4819      	ldr	r0, [pc, #100]	; (80014d8 <MX_GPIO_Init+0xec>)
 8001472:	f000 ff16 	bl	80022a2 <HAL_GPIO_WritePin>
                          |DATA1_Pin|DATA2_Pin|DATA3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 8001476:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800147a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147c:	2301      	movs	r3, #1
 800147e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2302      	movs	r3, #2
 8001486:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8001488:	f107 0310 	add.w	r3, r7, #16
 800148c:	4619      	mov	r1, r3
 800148e:	4811      	ldr	r0, [pc, #68]	; (80014d4 <MX_GPIO_Init+0xe8>)
 8001490:	f000 fd76 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin RW_Pin EN_Pin DATA0_Pin
                           DATA1_Pin DATA2_Pin DATA3_Pin */
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|EN_Pin|DATA0_Pin
 8001494:	23fe      	movs	r3, #254	; 0xfe
 8001496:	613b      	str	r3, [r7, #16]
                          |DATA1_Pin|DATA2_Pin|DATA3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001498:	2301      	movs	r3, #1
 800149a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2302      	movs	r3, #2
 80014a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	4619      	mov	r1, r3
 80014aa:	480b      	ldr	r0, [pc, #44]	; (80014d8 <MX_GPIO_Init+0xec>)
 80014ac:	f000 fd68 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT1_Pin BT2_Pin BT3_Pin BT4_Pin */
  GPIO_InitStruct.Pin = BT1_Pin|BT2_Pin|BT3_Pin|BT4_Pin;
 80014b0:	23f0      	movs	r3, #240	; 0xf0
 80014b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014bc:	f107 0310 	add.w	r3, r7, #16
 80014c0:	4619      	mov	r1, r3
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <MX_GPIO_Init+0xf0>)
 80014c4:	f000 fd5c 	bl	8001f80 <HAL_GPIO_Init>

}
 80014c8:	bf00      	nop
 80014ca:	3720      	adds	r7, #32
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40011000 	.word	0x40011000
 80014d8:	40010800 	.word	0x40010800
 80014dc:	40010c00 	.word	0x40010c00

080014e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

//Callback timer
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	if(htim == &htim1){
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a05      	ldr	r2, [pc, #20]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d102      	bne.n	80014f6 <HAL_TIM_PeriodElapsedCallback+0x16>
		app_isr(&app);
 80014f0:	4804      	ldr	r0, [pc, #16]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80014f2:	f002 fd89 	bl	8004008 <app_isr>
	}
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200000e8 	.word	0x200000e8
 8001504:	20000130 	.word	0x20000130

08001508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800150c:	b672      	cpsid	i
}
 800150e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001510:	e7fe      	b.n	8001510 <Error_Handler+0x8>
	...

08001514 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <HAL_MspInit+0x5c>)
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	4a14      	ldr	r2, [pc, #80]	; (8001570 <HAL_MspInit+0x5c>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6193      	str	r3, [r2, #24]
 8001526:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_MspInit+0x5c>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <HAL_MspInit+0x5c>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <HAL_MspInit+0x5c>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153c:	61d3      	str	r3, [r2, #28]
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <HAL_MspInit+0x5c>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <HAL_MspInit+0x60>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	4a04      	ldr	r2, [pc, #16]	; (8001574 <HAL_MspInit+0x60>)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	40021000 	.word	0x40021000
 8001574:	40010000 	.word	0x40010000

08001578 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 0310 	add.w	r3, r7, #16
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a14      	ldr	r2, [pc, #80]	; (80015e4 <HAL_ADC_MspInit+0x6c>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d121      	bne.n	80015dc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <HAL_ADC_MspInit+0x70>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <HAL_ADC_MspInit+0x70>)
 800159e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a2:	6193      	str	r3, [r2, #24]
 80015a4:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <HAL_ADC_MspInit+0x70>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b0:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <HAL_ADC_MspInit+0x70>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	4a0c      	ldr	r2, [pc, #48]	; (80015e8 <HAL_ADC_MspInit+0x70>)
 80015b6:	f043 0308 	orr.w	r3, r3, #8
 80015ba:	6193      	str	r3, [r2, #24]
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <HAL_ADC_MspInit+0x70>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_VOUT_Pin;
 80015c8:	2302      	movs	r3, #2
 80015ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015cc:	2303      	movs	r3, #3
 80015ce:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_VOUT_GPIO_Port, &GPIO_InitStruct);
 80015d0:	f107 0310 	add.w	r3, r7, #16
 80015d4:	4619      	mov	r1, r3
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <HAL_ADC_MspInit+0x74>)
 80015d8:	f000 fcd2 	bl	8001f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015dc:	bf00      	nop
 80015de:	3720      	adds	r7, #32
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40012400 	.word	0x40012400
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40010c00 	.word	0x40010c00

080015f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <HAL_TIM_Base_MspInit+0x44>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d113      	bne.n	800162a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <HAL_TIM_Base_MspInit+0x48>)
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	4a0c      	ldr	r2, [pc, #48]	; (8001638 <HAL_TIM_Base_MspInit+0x48>)
 8001608:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800160c:	6193      	str	r3, [r2, #24]
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_TIM_Base_MspInit+0x48>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	2019      	movs	r0, #25
 8001620:	f000 fc77 	bl	8001f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001624:	2019      	movs	r0, #25
 8001626:	f000 fc90 	bl	8001f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40012c00 	.word	0x40012c00
 8001638:	40021000 	.word	0x40021000

0800163c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a29      	ldr	r2, [pc, #164]	; (80016fc <HAL_TIM_MspPostInit+0xc0>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d14b      	bne.n	80016f4 <HAL_TIM_MspPostInit+0xb8>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165c:	4b28      	ldr	r3, [pc, #160]	; (8001700 <HAL_TIM_MspPostInit+0xc4>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	4a27      	ldr	r2, [pc, #156]	; (8001700 <HAL_TIM_MspPostInit+0xc4>)
 8001662:	f043 0308 	orr.w	r3, r3, #8
 8001666:	6193      	str	r3, [r2, #24]
 8001668:	4b25      	ldr	r3, [pc, #148]	; (8001700 <HAL_TIM_MspPostInit+0xc4>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001674:	4b22      	ldr	r3, [pc, #136]	; (8001700 <HAL_TIM_MspPostInit+0xc4>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	4a21      	ldr	r2, [pc, #132]	; (8001700 <HAL_TIM_MspPostInit+0xc4>)
 800167a:	f043 0304 	orr.w	r3, r3, #4
 800167e:	6193      	str	r3, [r2, #24]
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <HAL_TIM_MspPostInit+0xc4>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = SAN_Pin;
 800168c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001690:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2302      	movs	r3, #2
 8001698:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAN_GPIO_Port, &GPIO_InitStruct);
 800169a:	f107 0310 	add.w	r3, r7, #16
 800169e:	4619      	mov	r1, r3
 80016a0:	4818      	ldr	r0, [pc, #96]	; (8001704 <HAL_TIM_MspPostInit+0xc8>)
 80016a2:	f000 fc6d 	bl	8001f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SBN_Pin|SCN_Pin;
 80016a6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80016aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ac:	2302      	movs	r3, #2
 80016ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b4:	f107 0310 	add.w	r3, r7, #16
 80016b8:	4619      	mov	r1, r3
 80016ba:	4812      	ldr	r0, [pc, #72]	; (8001704 <HAL_TIM_MspPostInit+0xc8>)
 80016bc:	f000 fc60 	bl	8001f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAP_Pin;
 80016c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2302      	movs	r3, #2
 80016cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAP_GPIO_Port, &GPIO_InitStruct);
 80016ce:	f107 0310 	add.w	r3, r7, #16
 80016d2:	4619      	mov	r1, r3
 80016d4:	480c      	ldr	r0, [pc, #48]	; (8001708 <HAL_TIM_MspPostInit+0xcc>)
 80016d6:	f000 fc53 	bl	8001f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SBP_Pin|SCP_Pin;
 80016da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e4:	2303      	movs	r3, #3
 80016e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	4619      	mov	r1, r3
 80016ee:	4806      	ldr	r0, [pc, #24]	; (8001708 <HAL_TIM_MspPostInit+0xcc>)
 80016f0:	f000 fc46 	bl	8001f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016f4:	bf00      	nop
 80016f6:	3720      	adds	r7, #32
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40012c00 	.word	0x40012c00
 8001700:	40021000 	.word	0x40021000
 8001704:	40010c00 	.word	0x40010c00
 8001708:	40010800 	.word	0x40010800

0800170c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <NMI_Handler+0x4>

08001712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <HardFault_Handler+0x4>

08001718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <MemManage_Handler+0x4>

0800171e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <BusFault_Handler+0x4>

08001724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <UsageFault_Handler+0x4>

0800172a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr

08001736 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr

08001742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr

0800174e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001752:	f000 f8b5 	bl	80018c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001760:	4802      	ldr	r0, [pc, #8]	; (800176c <TIM1_UP_IRQHandler+0x10>)
 8001762:	f001 fb53 	bl	8002e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200000e8 	.word	0x200000e8

08001770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001778:	4a14      	ldr	r2, [pc, #80]	; (80017cc <_sbrk+0x5c>)
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <_sbrk+0x60>)
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001784:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <_sbrk+0x64>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <_sbrk+0x64>)
 800178e:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <_sbrk+0x68>)
 8001790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	429a      	cmp	r2, r3
 800179e:	d207      	bcs.n	80017b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a0:	f003 fb02 	bl	8004da8 <__errno>
 80017a4:	4603      	mov	r3, r0
 80017a6:	220c      	movs	r2, #12
 80017a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	e009      	b.n	80017c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <_sbrk+0x64>)
 80017c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20002800 	.word	0x20002800
 80017d0:	00000400 	.word	0x00000400
 80017d4:	2000008c 	.word	0x2000008c
 80017d8:	20000338 	.word	0x20000338

080017dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017e8:	f7ff fff8 	bl	80017dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017ec:	480b      	ldr	r0, [pc, #44]	; (800181c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017ee:	490c      	ldr	r1, [pc, #48]	; (8001820 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017f0:	4a0c      	ldr	r2, [pc, #48]	; (8001824 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001802:	4a09      	ldr	r2, [pc, #36]	; (8001828 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001804:	4c09      	ldr	r4, [pc, #36]	; (800182c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001812:	f003 facf 	bl	8004db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001816:	f7ff fc6b 	bl	80010f0 <main>
  bx lr
 800181a:	4770      	bx	lr
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001820:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001824:	08006d90 	.word	0x08006d90
  ldr r2, =_sbss
 8001828:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800182c:	20000338 	.word	0x20000338

08001830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC1_2_IRQHandler>
	...

08001834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_Init+0x28>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a07      	ldr	r2, [pc, #28]	; (800185c <HAL_Init+0x28>)
 800183e:	f043 0310 	orr.w	r3, r3, #16
 8001842:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001844:	2003      	movs	r0, #3
 8001846:	f000 fb59 	bl	8001efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800184a:	200f      	movs	r0, #15
 800184c:	f000 f808 	bl	8001860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001850:	f7ff fe60 	bl	8001514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40022000 	.word	0x40022000

08001860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_InitTick+0x54>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_InitTick+0x58>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001876:	fbb3 f3f1 	udiv	r3, r3, r1
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f000 fb71 	bl	8001f66 <HAL_SYSTICK_Config>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e00e      	b.n	80018ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b0f      	cmp	r3, #15
 8001892:	d80a      	bhi.n	80018aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001894:	2200      	movs	r2, #0
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f000 fb39 	bl	8001f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a0:	4a06      	ldr	r2, [pc, #24]	; (80018bc <HAL_InitTick+0x5c>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e000      	b.n	80018ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000008 	.word	0x20000008
 80018bc:	20000004 	.word	0x20000004

080018c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_IncTick+0x1c>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <HAL_IncTick+0x20>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	4a03      	ldr	r2, [pc, #12]	; (80018e0 <HAL_IncTick+0x20>)
 80018d2:	6013      	str	r3, [r2, #0]
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	20000008 	.word	0x20000008
 80018e0:	20000324 	.word	0x20000324

080018e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return uwTick;
 80018e8:	4b02      	ldr	r3, [pc, #8]	; (80018f4 <HAL_GetTick+0x10>)
 80018ea:	681b      	ldr	r3, [r3, #0]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	20000324 	.word	0x20000324

080018f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001900:	f7ff fff0 	bl	80018e4 <HAL_GetTick>
 8001904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001910:	d005      	beq.n	800191e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <HAL_Delay+0x44>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800191e:	bf00      	nop
 8001920:	f7ff ffe0 	bl	80018e4 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	429a      	cmp	r2, r3
 800192e:	d8f7      	bhi.n	8001920 <HAL_Delay+0x28>
  {
  }
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000008 	.word	0x20000008

08001940 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e0be      	b.n	8001ae0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196c:	2b00      	cmp	r3, #0
 800196e:	d109      	bne.n	8001984 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff fdfa 	bl	8001578 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f9ab 	bl	8001ce0 <ADC_ConversionStop_Disable>
 800198a:	4603      	mov	r3, r0
 800198c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001992:	f003 0310 	and.w	r3, r3, #16
 8001996:	2b00      	cmp	r3, #0
 8001998:	f040 8099 	bne.w	8001ace <HAL_ADC_Init+0x18e>
 800199c:	7dfb      	ldrb	r3, [r7, #23]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f040 8095 	bne.w	8001ace <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019ac:	f023 0302 	bic.w	r3, r3, #2
 80019b0:	f043 0202 	orr.w	r2, r3, #2
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019c0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	7b1b      	ldrb	r3, [r3, #12]
 80019c6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80019c8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019d8:	d003      	beq.n	80019e2 <HAL_ADC_Init+0xa2>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d102      	bne.n	80019e8 <HAL_ADC_Init+0xa8>
 80019e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019e6:	e000      	b.n	80019ea <HAL_ADC_Init+0xaa>
 80019e8:	2300      	movs	r3, #0
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	7d1b      	ldrb	r3, [r3, #20]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d119      	bne.n	8001a2c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	7b1b      	ldrb	r3, [r3, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d109      	bne.n	8001a14 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	035a      	lsls	r2, r3, #13
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	e00b      	b.n	8001a2c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a18:	f043 0220 	orr.w	r2, r3, #32
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a24:	f043 0201 	orr.w	r2, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	4b28      	ldr	r3, [pc, #160]	; (8001ae8 <HAL_ADC_Init+0x1a8>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6812      	ldr	r2, [r2, #0]
 8001a4e:	68b9      	ldr	r1, [r7, #8]
 8001a50:	430b      	orrs	r3, r1
 8001a52:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a5c:	d003      	beq.n	8001a66 <HAL_ADC_Init+0x126>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d104      	bne.n	8001a70 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	051b      	lsls	r3, r3, #20
 8001a6e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a76:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <HAL_ADC_Init+0x1ac>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d10b      	bne.n	8001aac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	f023 0303 	bic.w	r3, r3, #3
 8001aa2:	f043 0201 	orr.w	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001aaa:	e018      	b.n	8001ade <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab0:	f023 0312 	bic.w	r3, r3, #18
 8001ab4:	f043 0210 	orr.w	r2, r3, #16
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac0:	f043 0201 	orr.w	r2, r3, #1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001acc:	e007      	b.n	8001ade <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad2:	f043 0210 	orr.w	r2, r3, #16
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	ffe1f7fd 	.word	0xffe1f7fd
 8001aec:	ff1f0efe 	.word	0xff1f0efe

08001af0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x20>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	e0dc      	b.n	8001cca <HAL_ADC_ConfigChannel+0x1da>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b06      	cmp	r3, #6
 8001b1e:	d81c      	bhi.n	8001b5a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	3b05      	subs	r3, #5
 8001b32:	221f      	movs	r2, #31
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	4019      	ands	r1, r3
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	6818      	ldr	r0, [r3, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	3b05      	subs	r3, #5
 8001b4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	635a      	str	r2, [r3, #52]	; 0x34
 8001b58:	e03c      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b0c      	cmp	r3, #12
 8001b60:	d81c      	bhi.n	8001b9c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	3b23      	subs	r3, #35	; 0x23
 8001b74:	221f      	movs	r2, #31
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	4019      	ands	r1, r3
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	6818      	ldr	r0, [r3, #0]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3b23      	subs	r3, #35	; 0x23
 8001b8e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	631a      	str	r2, [r3, #48]	; 0x30
 8001b9a:	e01b      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	3b41      	subs	r3, #65	; 0x41
 8001bae:	221f      	movs	r2, #31
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	4019      	ands	r1, r3
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	6818      	ldr	r0, [r3, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3b41      	subs	r3, #65	; 0x41
 8001bc8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b09      	cmp	r3, #9
 8001bda:	d91c      	bls.n	8001c16 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68d9      	ldr	r1, [r3, #12]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	4613      	mov	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	4413      	add	r3, r2
 8001bec:	3b1e      	subs	r3, #30
 8001bee:	2207      	movs	r2, #7
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	4019      	ands	r1, r3
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	6898      	ldr	r0, [r3, #8]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4613      	mov	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	4413      	add	r3, r2
 8001c06:	3b1e      	subs	r3, #30
 8001c08:	fa00 f203 	lsl.w	r2, r0, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	60da      	str	r2, [r3, #12]
 8001c14:	e019      	b.n	8001c4a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6919      	ldr	r1, [r3, #16]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4613      	mov	r3, r2
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	4413      	add	r3, r2
 8001c26:	2207      	movs	r2, #7
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	4019      	ands	r1, r3
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	6898      	ldr	r0, [r3, #8]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2b10      	cmp	r3, #16
 8001c50:	d003      	beq.n	8001c5a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c56:	2b11      	cmp	r3, #17
 8001c58:	d132      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a1d      	ldr	r2, [pc, #116]	; (8001cd4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d125      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d126      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c80:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b10      	cmp	r3, #16
 8001c88:	d11a      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a13      	ldr	r2, [pc, #76]	; (8001cdc <HAL_ADC_ConfigChannel+0x1ec>)
 8001c90:	fba2 2303 	umull	r2, r3, r2, r3
 8001c94:	0c9a      	lsrs	r2, r3, #18
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ca0:	e002      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f9      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x1b2>
 8001cae:	e007      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb4:	f043 0220 	orr.w	r2, r3, #32
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	40012400 	.word	0x40012400
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	431bde83 	.word	0x431bde83

08001ce0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d12e      	bne.n	8001d58 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0201 	bic.w	r2, r2, #1
 8001d08:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d0a:	f7ff fdeb 	bl	80018e4 <HAL_GetTick>
 8001d0e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d10:	e01b      	b.n	8001d4a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d12:	f7ff fde7 	bl	80018e4 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d914      	bls.n	8001d4a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d10d      	bne.n	8001d4a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d32:	f043 0210 	orr.w	r2, r3, #16
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	f043 0201 	orr.w	r2, r3, #1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e007      	b.n	8001d5a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d0dc      	beq.n	8001d12 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d80:	4013      	ands	r3, r2
 8001d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d96:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	60d3      	str	r3, [r2, #12]
}
 8001d9c:	bf00      	nop
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	0a1b      	lsrs	r3, r3, #8
 8001db6:	f003 0307 	and.w	r3, r3, #7
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	db0b      	blt.n	8001df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	4906      	ldr	r1, [pc, #24]	; (8001dfc <__NVIC_EnableIRQ+0x34>)
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	2001      	movs	r0, #1
 8001dea:	fa00 f202 	lsl.w	r2, r0, r2
 8001dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr
 8001dfc:	e000e100 	.word	0xe000e100

08001e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	6039      	str	r1, [r7, #0]
 8001e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	db0a      	blt.n	8001e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	490c      	ldr	r1, [pc, #48]	; (8001e4c <__NVIC_SetPriority+0x4c>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	0112      	lsls	r2, r2, #4
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	440b      	add	r3, r1
 8001e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e28:	e00a      	b.n	8001e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4908      	ldr	r1, [pc, #32]	; (8001e50 <__NVIC_SetPriority+0x50>)
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	3b04      	subs	r3, #4
 8001e38:	0112      	lsls	r2, r2, #4
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	761a      	strb	r2, [r3, #24]
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000e100 	.word	0xe000e100
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b089      	sub	sp, #36	; 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f1c3 0307 	rsb	r3, r3, #7
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	bf28      	it	cs
 8001e72:	2304      	movcs	r3, #4
 8001e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	2b06      	cmp	r3, #6
 8001e7c:	d902      	bls.n	8001e84 <NVIC_EncodePriority+0x30>
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3b03      	subs	r3, #3
 8001e82:	e000      	b.n	8001e86 <NVIC_EncodePriority+0x32>
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e88:	f04f 32ff 	mov.w	r2, #4294967295
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43da      	mvns	r2, r3
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	401a      	ands	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea6:	43d9      	mvns	r1, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	4313      	orrs	r3, r2
         );
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3724      	adds	r7, #36	; 0x24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr

08001eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ec8:	d301      	bcc.n	8001ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e00f      	b.n	8001eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ece:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <SysTick_Config+0x40>)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed6:	210f      	movs	r1, #15
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8001edc:	f7ff ff90 	bl	8001e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <SysTick_Config+0x40>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee6:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <SysTick_Config+0x40>)
 8001ee8:	2207      	movs	r2, #7
 8001eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	e000e010 	.word	0xe000e010

08001efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ff2d 	bl	8001d64 <__NVIC_SetPriorityGrouping>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b086      	sub	sp, #24
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f24:	f7ff ff42 	bl	8001dac <__NVIC_GetPriorityGrouping>
 8001f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	6978      	ldr	r0, [r7, #20]
 8001f30:	f7ff ff90 	bl	8001e54 <NVIC_EncodePriority>
 8001f34:	4602      	mov	r2, r0
 8001f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff ff5f 	bl	8001e00 <__NVIC_SetPriority>
}
 8001f42:	bf00      	nop
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff35 	bl	8001dc8 <__NVIC_EnableIRQ>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff ffa2 	bl	8001eb8 <SysTick_Config>
 8001f74:	4603      	mov	r3, r0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b08b      	sub	sp, #44	; 0x2c
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f92:	e148      	b.n	8002226 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f94:	2201      	movs	r2, #1
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	69fa      	ldr	r2, [r7, #28]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	f040 8137 	bne.w	8002220 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	4aa3      	ldr	r2, [pc, #652]	; (8002244 <HAL_GPIO_Init+0x2c4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d05e      	beq.n	800207a <HAL_GPIO_Init+0xfa>
 8001fbc:	4aa1      	ldr	r2, [pc, #644]	; (8002244 <HAL_GPIO_Init+0x2c4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d875      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001fc2:	4aa1      	ldr	r2, [pc, #644]	; (8002248 <HAL_GPIO_Init+0x2c8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d058      	beq.n	800207a <HAL_GPIO_Init+0xfa>
 8001fc8:	4a9f      	ldr	r2, [pc, #636]	; (8002248 <HAL_GPIO_Init+0x2c8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d86f      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001fce:	4a9f      	ldr	r2, [pc, #636]	; (800224c <HAL_GPIO_Init+0x2cc>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d052      	beq.n	800207a <HAL_GPIO_Init+0xfa>
 8001fd4:	4a9d      	ldr	r2, [pc, #628]	; (800224c <HAL_GPIO_Init+0x2cc>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d869      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001fda:	4a9d      	ldr	r2, [pc, #628]	; (8002250 <HAL_GPIO_Init+0x2d0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d04c      	beq.n	800207a <HAL_GPIO_Init+0xfa>
 8001fe0:	4a9b      	ldr	r2, [pc, #620]	; (8002250 <HAL_GPIO_Init+0x2d0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d863      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001fe6:	4a9b      	ldr	r2, [pc, #620]	; (8002254 <HAL_GPIO_Init+0x2d4>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d046      	beq.n	800207a <HAL_GPIO_Init+0xfa>
 8001fec:	4a99      	ldr	r2, [pc, #612]	; (8002254 <HAL_GPIO_Init+0x2d4>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d85d      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001ff2:	2b12      	cmp	r3, #18
 8001ff4:	d82a      	bhi.n	800204c <HAL_GPIO_Init+0xcc>
 8001ff6:	2b12      	cmp	r3, #18
 8001ff8:	d859      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001ffa:	a201      	add	r2, pc, #4	; (adr r2, 8002000 <HAL_GPIO_Init+0x80>)
 8001ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002000:	0800207b 	.word	0x0800207b
 8002004:	08002055 	.word	0x08002055
 8002008:	08002067 	.word	0x08002067
 800200c:	080020a9 	.word	0x080020a9
 8002010:	080020af 	.word	0x080020af
 8002014:	080020af 	.word	0x080020af
 8002018:	080020af 	.word	0x080020af
 800201c:	080020af 	.word	0x080020af
 8002020:	080020af 	.word	0x080020af
 8002024:	080020af 	.word	0x080020af
 8002028:	080020af 	.word	0x080020af
 800202c:	080020af 	.word	0x080020af
 8002030:	080020af 	.word	0x080020af
 8002034:	080020af 	.word	0x080020af
 8002038:	080020af 	.word	0x080020af
 800203c:	080020af 	.word	0x080020af
 8002040:	080020af 	.word	0x080020af
 8002044:	0800205d 	.word	0x0800205d
 8002048:	08002071 	.word	0x08002071
 800204c:	4a82      	ldr	r2, [pc, #520]	; (8002258 <HAL_GPIO_Init+0x2d8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d013      	beq.n	800207a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002052:	e02c      	b.n	80020ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	623b      	str	r3, [r7, #32]
          break;
 800205a:	e029      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	3304      	adds	r3, #4
 8002062:	623b      	str	r3, [r7, #32]
          break;
 8002064:	e024      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	3308      	adds	r3, #8
 800206c:	623b      	str	r3, [r7, #32]
          break;
 800206e:	e01f      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	330c      	adds	r3, #12
 8002076:	623b      	str	r3, [r7, #32]
          break;
 8002078:	e01a      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d102      	bne.n	8002088 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002082:	2304      	movs	r3, #4
 8002084:	623b      	str	r3, [r7, #32]
          break;
 8002086:	e013      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d105      	bne.n	800209c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002090:	2308      	movs	r3, #8
 8002092:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	611a      	str	r2, [r3, #16]
          break;
 800209a:	e009      	b.n	80020b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800209c:	2308      	movs	r3, #8
 800209e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69fa      	ldr	r2, [r7, #28]
 80020a4:	615a      	str	r2, [r3, #20]
          break;
 80020a6:	e003      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020a8:	2300      	movs	r3, #0
 80020aa:	623b      	str	r3, [r7, #32]
          break;
 80020ac:	e000      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          break;
 80020ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	2bff      	cmp	r3, #255	; 0xff
 80020b4:	d801      	bhi.n	80020ba <HAL_GPIO_Init+0x13a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	e001      	b.n	80020be <HAL_GPIO_Init+0x13e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3304      	adds	r3, #4
 80020be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	2bff      	cmp	r3, #255	; 0xff
 80020c4:	d802      	bhi.n	80020cc <HAL_GPIO_Init+0x14c>
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	e002      	b.n	80020d2 <HAL_GPIO_Init+0x152>
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	3b08      	subs	r3, #8
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	210f      	movs	r1, #15
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	fa01 f303 	lsl.w	r3, r1, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	401a      	ands	r2, r3
 80020e4:	6a39      	ldr	r1, [r7, #32]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ec:	431a      	orrs	r2, r3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 8090 	beq.w	8002220 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002100:	4b56      	ldr	r3, [pc, #344]	; (800225c <HAL_GPIO_Init+0x2dc>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	4a55      	ldr	r2, [pc, #340]	; (800225c <HAL_GPIO_Init+0x2dc>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6193      	str	r3, [r2, #24]
 800210c:	4b53      	ldr	r3, [pc, #332]	; (800225c <HAL_GPIO_Init+0x2dc>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002118:	4a51      	ldr	r2, [pc, #324]	; (8002260 <HAL_GPIO_Init+0x2e0>)
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	089b      	lsrs	r3, r3, #2
 800211e:	3302      	adds	r3, #2
 8002120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002124:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	220f      	movs	r2, #15
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4013      	ands	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a49      	ldr	r2, [pc, #292]	; (8002264 <HAL_GPIO_Init+0x2e4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d00d      	beq.n	8002160 <HAL_GPIO_Init+0x1e0>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a48      	ldr	r2, [pc, #288]	; (8002268 <HAL_GPIO_Init+0x2e8>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d007      	beq.n	800215c <HAL_GPIO_Init+0x1dc>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a47      	ldr	r2, [pc, #284]	; (800226c <HAL_GPIO_Init+0x2ec>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d101      	bne.n	8002158 <HAL_GPIO_Init+0x1d8>
 8002154:	2302      	movs	r3, #2
 8002156:	e004      	b.n	8002162 <HAL_GPIO_Init+0x1e2>
 8002158:	2303      	movs	r3, #3
 800215a:	e002      	b.n	8002162 <HAL_GPIO_Init+0x1e2>
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <HAL_GPIO_Init+0x1e2>
 8002160:	2300      	movs	r3, #0
 8002162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002164:	f002 0203 	and.w	r2, r2, #3
 8002168:	0092      	lsls	r2, r2, #2
 800216a:	4093      	lsls	r3, r2
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4313      	orrs	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002172:	493b      	ldr	r1, [pc, #236]	; (8002260 <HAL_GPIO_Init+0x2e0>)
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	089b      	lsrs	r3, r3, #2
 8002178:	3302      	adds	r3, #2
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d006      	beq.n	800219a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800218c:	4b38      	ldr	r3, [pc, #224]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4937      	ldr	r1, [pc, #220]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	600b      	str	r3, [r1, #0]
 8002198:	e006      	b.n	80021a8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800219a:	4b35      	ldr	r3, [pc, #212]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	4933      	ldr	r1, [pc, #204]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d006      	beq.n	80021c2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021b4:	4b2e      	ldr	r3, [pc, #184]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	492d      	ldr	r1, [pc, #180]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]
 80021c0:	e006      	b.n	80021d0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021c2:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	4929      	ldr	r1, [pc, #164]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d006      	beq.n	80021ea <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021dc:	4b24      	ldr	r3, [pc, #144]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	4923      	ldr	r1, [pc, #140]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	608b      	str	r3, [r1, #8]
 80021e8:	e006      	b.n	80021f8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021ea:	4b21      	ldr	r3, [pc, #132]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	491f      	ldr	r1, [pc, #124]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d006      	beq.n	8002212 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002204:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	4919      	ldr	r1, [pc, #100]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	60cb      	str	r3, [r1, #12]
 8002210:	e006      	b.n	8002220 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002212:	4b17      	ldr	r3, [pc, #92]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	43db      	mvns	r3, r3
 800221a:	4915      	ldr	r1, [pc, #84]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 800221c:	4013      	ands	r3, r2
 800221e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	3301      	adds	r3, #1
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	f47f aeaf 	bne.w	8001f94 <HAL_GPIO_Init+0x14>
  }
}
 8002236:	bf00      	nop
 8002238:	bf00      	nop
 800223a:	372c      	adds	r7, #44	; 0x2c
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	10320000 	.word	0x10320000
 8002248:	10310000 	.word	0x10310000
 800224c:	10220000 	.word	0x10220000
 8002250:	10210000 	.word	0x10210000
 8002254:	10120000 	.word	0x10120000
 8002258:	10110000 	.word	0x10110000
 800225c:	40021000 	.word	0x40021000
 8002260:	40010000 	.word	0x40010000
 8002264:	40010800 	.word	0x40010800
 8002268:	40010c00 	.word	0x40010c00
 800226c:	40011000 	.word	0x40011000
 8002270:	40010400 	.word	0x40010400

08002274 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	887b      	ldrh	r3, [r7, #2]
 8002286:	4013      	ands	r3, r2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d002      	beq.n	8002292 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800228c:	2301      	movs	r3, #1
 800228e:	73fb      	strb	r3, [r7, #15]
 8002290:	e001      	b.n	8002296 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002292:	2300      	movs	r3, #0
 8002294:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002296:	7bfb      	ldrb	r3, [r7, #15]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr

080022a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	460b      	mov	r3, r1
 80022ac:	807b      	strh	r3, [r7, #2]
 80022ae:	4613      	mov	r3, r2
 80022b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022b2:	787b      	ldrb	r3, [r7, #1]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022b8:	887a      	ldrh	r2, [r7, #2]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022be:	e003      	b.n	80022c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022c0:	887b      	ldrh	r3, [r7, #2]
 80022c2:	041a      	lsls	r2, r3, #16
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	611a      	str	r2, [r3, #16]
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr
	...

080022d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e26c      	b.n	80027c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 8087 	beq.w	8002402 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022f4:	4b92      	ldr	r3, [pc, #584]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 030c 	and.w	r3, r3, #12
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d00c      	beq.n	800231a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002300:	4b8f      	ldr	r3, [pc, #572]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 030c 	and.w	r3, r3, #12
 8002308:	2b08      	cmp	r3, #8
 800230a:	d112      	bne.n	8002332 <HAL_RCC_OscConfig+0x5e>
 800230c:	4b8c      	ldr	r3, [pc, #560]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002318:	d10b      	bne.n	8002332 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231a:	4b89      	ldr	r3, [pc, #548]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d06c      	beq.n	8002400 <HAL_RCC_OscConfig+0x12c>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d168      	bne.n	8002400 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e246      	b.n	80027c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233a:	d106      	bne.n	800234a <HAL_RCC_OscConfig+0x76>
 800233c:	4b80      	ldr	r3, [pc, #512]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a7f      	ldr	r2, [pc, #508]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	e02e      	b.n	80023a8 <HAL_RCC_OscConfig+0xd4>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10c      	bne.n	800236c <HAL_RCC_OscConfig+0x98>
 8002352:	4b7b      	ldr	r3, [pc, #492]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a7a      	ldr	r2, [pc, #488]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	4b78      	ldr	r3, [pc, #480]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a77      	ldr	r2, [pc, #476]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002364:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	e01d      	b.n	80023a8 <HAL_RCC_OscConfig+0xd4>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002374:	d10c      	bne.n	8002390 <HAL_RCC_OscConfig+0xbc>
 8002376:	4b72      	ldr	r3, [pc, #456]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a71      	ldr	r2, [pc, #452]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800237c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	4b6f      	ldr	r3, [pc, #444]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a6e      	ldr	r2, [pc, #440]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	e00b      	b.n	80023a8 <HAL_RCC_OscConfig+0xd4>
 8002390:	4b6b      	ldr	r3, [pc, #428]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a6a      	ldr	r2, [pc, #424]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	4b68      	ldr	r3, [pc, #416]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a67      	ldr	r2, [pc, #412]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 80023a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d013      	beq.n	80023d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b0:	f7ff fa98 	bl	80018e4 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b8:	f7ff fa94 	bl	80018e4 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b64      	cmp	r3, #100	; 0x64
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e1fa      	b.n	80027c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ca:	4b5d      	ldr	r3, [pc, #372]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0xe4>
 80023d6:	e014      	b.n	8002402 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7ff fa84 	bl	80018e4 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e0:	f7ff fa80 	bl	80018e4 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b64      	cmp	r3, #100	; 0x64
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e1e6      	b.n	80027c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f2:	4b53      	ldr	r3, [pc, #332]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x10c>
 80023fe:	e000      	b.n	8002402 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d063      	beq.n	80024d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800240e:	4b4c      	ldr	r3, [pc, #304]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00b      	beq.n	8002432 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800241a:	4b49      	ldr	r3, [pc, #292]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	2b08      	cmp	r3, #8
 8002424:	d11c      	bne.n	8002460 <HAL_RCC_OscConfig+0x18c>
 8002426:	4b46      	ldr	r3, [pc, #280]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d116      	bne.n	8002460 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002432:	4b43      	ldr	r3, [pc, #268]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <HAL_RCC_OscConfig+0x176>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d001      	beq.n	800244a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e1ba      	b.n	80027c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244a:	4b3d      	ldr	r3, [pc, #244]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4939      	ldr	r1, [pc, #228]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245e:	e03a      	b.n	80024d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d020      	beq.n	80024aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002468:	4b36      	ldr	r3, [pc, #216]	; (8002544 <HAL_RCC_OscConfig+0x270>)
 800246a:	2201      	movs	r2, #1
 800246c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246e:	f7ff fa39 	bl	80018e4 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002476:	f7ff fa35 	bl	80018e4 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e19b      	b.n	80027c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002488:	4b2d      	ldr	r3, [pc, #180]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002494:	4b2a      	ldr	r3, [pc, #168]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4927      	ldr	r1, [pc, #156]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	600b      	str	r3, [r1, #0]
 80024a8:	e015      	b.n	80024d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024aa:	4b26      	ldr	r3, [pc, #152]	; (8002544 <HAL_RCC_OscConfig+0x270>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7ff fa18 	bl	80018e4 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b8:	f7ff fa14 	bl	80018e4 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e17a      	b.n	80027c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ca:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d03a      	beq.n	8002558 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d019      	beq.n	800251e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ea:	4b17      	ldr	r3, [pc, #92]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f0:	f7ff f9f8 	bl	80018e4 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f8:	f7ff f9f4 	bl	80018e4 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e15a      	b.n	80027c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250a:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002516:	2001      	movs	r0, #1
 8002518:	f000 fab0 	bl	8002a7c <RCC_Delay>
 800251c:	e01c      	b.n	8002558 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800251e:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002524:	f7ff f9de 	bl	80018e4 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800252a:	e00f      	b.n	800254c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800252c:	f7ff f9da 	bl	80018e4 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d908      	bls.n	800254c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e140      	b.n	80027c0 <HAL_RCC_OscConfig+0x4ec>
 800253e:	bf00      	nop
 8002540:	40021000 	.word	0x40021000
 8002544:	42420000 	.word	0x42420000
 8002548:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800254c:	4b9e      	ldr	r3, [pc, #632]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1e9      	bne.n	800252c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 80a6 	beq.w	80026b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002566:	2300      	movs	r3, #0
 8002568:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800256a:	4b97      	ldr	r3, [pc, #604]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10d      	bne.n	8002592 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002576:	4b94      	ldr	r3, [pc, #592]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	4a93      	ldr	r2, [pc, #588]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 800257c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002580:	61d3      	str	r3, [r2, #28]
 8002582:	4b91      	ldr	r3, [pc, #580]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800258e:	2301      	movs	r3, #1
 8002590:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002592:	4b8e      	ldr	r3, [pc, #568]	; (80027cc <HAL_RCC_OscConfig+0x4f8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259a:	2b00      	cmp	r3, #0
 800259c:	d118      	bne.n	80025d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800259e:	4b8b      	ldr	r3, [pc, #556]	; (80027cc <HAL_RCC_OscConfig+0x4f8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a8a      	ldr	r2, [pc, #552]	; (80027cc <HAL_RCC_OscConfig+0x4f8>)
 80025a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025aa:	f7ff f99b 	bl	80018e4 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b2:	f7ff f997 	bl	80018e4 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b64      	cmp	r3, #100	; 0x64
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e0fd      	b.n	80027c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c4:	4b81      	ldr	r3, [pc, #516]	; (80027cc <HAL_RCC_OscConfig+0x4f8>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d106      	bne.n	80025e6 <HAL_RCC_OscConfig+0x312>
 80025d8:	4b7b      	ldr	r3, [pc, #492]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	4a7a      	ldr	r2, [pc, #488]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	6213      	str	r3, [r2, #32]
 80025e4:	e02d      	b.n	8002642 <HAL_RCC_OscConfig+0x36e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10c      	bne.n	8002608 <HAL_RCC_OscConfig+0x334>
 80025ee:	4b76      	ldr	r3, [pc, #472]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	4a75      	ldr	r2, [pc, #468]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 80025f4:	f023 0301 	bic.w	r3, r3, #1
 80025f8:	6213      	str	r3, [r2, #32]
 80025fa:	4b73      	ldr	r3, [pc, #460]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	4a72      	ldr	r2, [pc, #456]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 8002600:	f023 0304 	bic.w	r3, r3, #4
 8002604:	6213      	str	r3, [r2, #32]
 8002606:	e01c      	b.n	8002642 <HAL_RCC_OscConfig+0x36e>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	2b05      	cmp	r3, #5
 800260e:	d10c      	bne.n	800262a <HAL_RCC_OscConfig+0x356>
 8002610:	4b6d      	ldr	r3, [pc, #436]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	4a6c      	ldr	r2, [pc, #432]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 8002616:	f043 0304 	orr.w	r3, r3, #4
 800261a:	6213      	str	r3, [r2, #32]
 800261c:	4b6a      	ldr	r3, [pc, #424]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	4a69      	ldr	r2, [pc, #420]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	6213      	str	r3, [r2, #32]
 8002628:	e00b      	b.n	8002642 <HAL_RCC_OscConfig+0x36e>
 800262a:	4b67      	ldr	r3, [pc, #412]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	4a66      	ldr	r2, [pc, #408]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 8002630:	f023 0301 	bic.w	r3, r3, #1
 8002634:	6213      	str	r3, [r2, #32]
 8002636:	4b64      	ldr	r3, [pc, #400]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	4a63      	ldr	r2, [pc, #396]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 800263c:	f023 0304 	bic.w	r3, r3, #4
 8002640:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d015      	beq.n	8002676 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264a:	f7ff f94b 	bl	80018e4 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002650:	e00a      	b.n	8002668 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002652:	f7ff f947 	bl	80018e4 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002660:	4293      	cmp	r3, r2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e0ab      	b.n	80027c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002668:	4b57      	ldr	r3, [pc, #348]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0ee      	beq.n	8002652 <HAL_RCC_OscConfig+0x37e>
 8002674:	e014      	b.n	80026a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002676:	f7ff f935 	bl	80018e4 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800267c:	e00a      	b.n	8002694 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267e:	f7ff f931 	bl	80018e4 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	f241 3288 	movw	r2, #5000	; 0x1388
 800268c:	4293      	cmp	r3, r2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e095      	b.n	80027c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002694:	4b4c      	ldr	r3, [pc, #304]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1ee      	bne.n	800267e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026a0:	7dfb      	ldrb	r3, [r7, #23]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d105      	bne.n	80026b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a6:	4b48      	ldr	r3, [pc, #288]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	4a47      	ldr	r2, [pc, #284]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 80026ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 8081 	beq.w	80027be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026bc:	4b42      	ldr	r3, [pc, #264]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 030c 	and.w	r3, r3, #12
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d061      	beq.n	800278c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d146      	bne.n	800275e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d0:	4b3f      	ldr	r3, [pc, #252]	; (80027d0 <HAL_RCC_OscConfig+0x4fc>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d6:	f7ff f905 	bl	80018e4 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026de:	f7ff f901 	bl	80018e4 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e067      	b.n	80027c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f0:	4b35      	ldr	r3, [pc, #212]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1f0      	bne.n	80026de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002704:	d108      	bne.n	8002718 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002706:	4b30      	ldr	r3, [pc, #192]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	492d      	ldr	r1, [pc, #180]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 8002714:	4313      	orrs	r3, r2
 8002716:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002718:	4b2b      	ldr	r3, [pc, #172]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a19      	ldr	r1, [r3, #32]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	430b      	orrs	r3, r1
 800272a:	4927      	ldr	r1, [pc, #156]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 800272c:	4313      	orrs	r3, r2
 800272e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002730:	4b27      	ldr	r3, [pc, #156]	; (80027d0 <HAL_RCC_OscConfig+0x4fc>)
 8002732:	2201      	movs	r2, #1
 8002734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002736:	f7ff f8d5 	bl	80018e4 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273e:	f7ff f8d1 	bl	80018e4 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e037      	b.n	80027c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002750:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0f0      	beq.n	800273e <HAL_RCC_OscConfig+0x46a>
 800275c:	e02f      	b.n	80027be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275e:	4b1c      	ldr	r3, [pc, #112]	; (80027d0 <HAL_RCC_OscConfig+0x4fc>)
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7ff f8be 	bl	80018e4 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800276c:	f7ff f8ba 	bl	80018e4 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e020      	b.n	80027c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800277e:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0x498>
 800278a:	e018      	b.n	80027be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e013      	b.n	80027c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <HAL_RCC_OscConfig+0x4f4>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d106      	bne.n	80027ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d001      	beq.n	80027be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40007000 	.word	0x40007000
 80027d0:	42420060 	.word	0x42420060

080027d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0d0      	b.n	800298a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027e8:	4b6a      	ldr	r3, [pc, #424]	; (8002994 <HAL_RCC_ClockConfig+0x1c0>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d910      	bls.n	8002818 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f6:	4b67      	ldr	r3, [pc, #412]	; (8002994 <HAL_RCC_ClockConfig+0x1c0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 0207 	bic.w	r2, r3, #7
 80027fe:	4965      	ldr	r1, [pc, #404]	; (8002994 <HAL_RCC_ClockConfig+0x1c0>)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b63      	ldr	r3, [pc, #396]	; (8002994 <HAL_RCC_ClockConfig+0x1c0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e0b8      	b.n	800298a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d020      	beq.n	8002866 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002830:	4b59      	ldr	r3, [pc, #356]	; (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4a58      	ldr	r2, [pc, #352]	; (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 8002836:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800283a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002848:	4b53      	ldr	r3, [pc, #332]	; (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	4a52      	ldr	r2, [pc, #328]	; (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 800284e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002852:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002854:	4b50      	ldr	r3, [pc, #320]	; (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	494d      	ldr	r1, [pc, #308]	; (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 8002862:	4313      	orrs	r3, r2
 8002864:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d040      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	4b47      	ldr	r3, [pc, #284]	; (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d115      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e07f      	b.n	800298a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d107      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002892:	4b41      	ldr	r3, [pc, #260]	; (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d109      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e073      	b.n	800298a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a2:	4b3d      	ldr	r3, [pc, #244]	; (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e06b      	b.n	800298a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028b2:	4b39      	ldr	r3, [pc, #228]	; (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f023 0203 	bic.w	r2, r3, #3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	4936      	ldr	r1, [pc, #216]	; (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c4:	f7ff f80e 	bl	80018e4 <HAL_GetTick>
 80028c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	e00a      	b.n	80028e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028cc:	f7ff f80a 	bl	80018e4 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028da:	4293      	cmp	r3, r2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e053      	b.n	800298a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e2:	4b2d      	ldr	r3, [pc, #180]	; (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f003 020c 	and.w	r2, r3, #12
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d1eb      	bne.n	80028cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028f4:	4b27      	ldr	r3, [pc, #156]	; (8002994 <HAL_RCC_ClockConfig+0x1c0>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d210      	bcs.n	8002924 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002902:	4b24      	ldr	r3, [pc, #144]	; (8002994 <HAL_RCC_ClockConfig+0x1c0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f023 0207 	bic.w	r2, r3, #7
 800290a:	4922      	ldr	r1, [pc, #136]	; (8002994 <HAL_RCC_ClockConfig+0x1c0>)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	4313      	orrs	r3, r2
 8002910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002912:	4b20      	ldr	r3, [pc, #128]	; (8002994 <HAL_RCC_ClockConfig+0x1c0>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d001      	beq.n	8002924 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e032      	b.n	800298a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002930:	4b19      	ldr	r3, [pc, #100]	; (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4916      	ldr	r1, [pc, #88]	; (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	4313      	orrs	r3, r2
 8002940:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d009      	beq.n	8002962 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800294e:	4b12      	ldr	r3, [pc, #72]	; (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	490e      	ldr	r1, [pc, #56]	; (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	4313      	orrs	r3, r2
 8002960:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002962:	f000 f821 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8002966:	4602      	mov	r2, r0
 8002968:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	091b      	lsrs	r3, r3, #4
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	490a      	ldr	r1, [pc, #40]	; (800299c <HAL_RCC_ClockConfig+0x1c8>)
 8002974:	5ccb      	ldrb	r3, [r1, r3]
 8002976:	fa22 f303 	lsr.w	r3, r2, r3
 800297a:	4a09      	ldr	r2, [pc, #36]	; (80029a0 <HAL_RCC_ClockConfig+0x1cc>)
 800297c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800297e:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe ff6c 	bl	8001860 <HAL_InitTick>

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40022000 	.word	0x40022000
 8002998:	40021000 	.word	0x40021000
 800299c:	08006b68 	.word	0x08006b68
 80029a0:	20000000 	.word	0x20000000
 80029a4:	20000004 	.word	0x20000004

080029a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a8:	b490      	push	{r4, r7}
 80029aa:	b08a      	sub	sp, #40	; 0x28
 80029ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029ae:	4b2a      	ldr	r3, [pc, #168]	; (8002a58 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029b0:	1d3c      	adds	r4, r7, #4
 80029b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029b8:	f240 2301 	movw	r3, #513	; 0x201
 80029bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
 80029c2:	2300      	movs	r3, #0
 80029c4:	61bb      	str	r3, [r7, #24]
 80029c6:	2300      	movs	r3, #0
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029d2:	4b22      	ldr	r3, [pc, #136]	; (8002a5c <HAL_RCC_GetSysClockFreq+0xb4>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f003 030c 	and.w	r3, r3, #12
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d002      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0x40>
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d003      	beq.n	80029ee <HAL_RCC_GetSysClockFreq+0x46>
 80029e6:	e02d      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029e8:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029ea:	623b      	str	r3, [r7, #32]
      break;
 80029ec:	e02d      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	0c9b      	lsrs	r3, r3, #18
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029fa:	4413      	add	r3, r2
 80029fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a00:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d013      	beq.n	8002a34 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a0c:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	0c5b      	lsrs	r3, r3, #17
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a20:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	4a0e      	ldr	r2, [pc, #56]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a26:	fb02 f203 	mul.w	r2, r2, r3
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
 8002a32:	e004      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	4a0b      	ldr	r2, [pc, #44]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a38:	fb02 f303 	mul.w	r3, r2, r3
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	623b      	str	r3, [r7, #32]
      break;
 8002a42:	e002      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a44:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a46:	623b      	str	r3, [r7, #32]
      break;
 8002a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3728      	adds	r7, #40	; 0x28
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc90      	pop	{r4, r7}
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	08006ad0 	.word	0x08006ad0
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	007a1200 	.word	0x007a1200
 8002a64:	003d0900 	.word	0x003d0900

08002a68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a6c:	4b02      	ldr	r3, [pc, #8]	; (8002a78 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	20000000 	.word	0x20000000

08002a7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a84:	4b0a      	ldr	r3, [pc, #40]	; (8002ab0 <RCC_Delay+0x34>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a0a      	ldr	r2, [pc, #40]	; (8002ab4 <RCC_Delay+0x38>)
 8002a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8e:	0a5b      	lsrs	r3, r3, #9
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	fb02 f303 	mul.w	r3, r2, r3
 8002a96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a98:	bf00      	nop
  }
  while (Delay --);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	1e5a      	subs	r2, r3, #1
 8002a9e:	60fa      	str	r2, [r7, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1f9      	bne.n	8002a98 <RCC_Delay+0x1c>
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr
 8002ab0:	20000000 	.word	0x20000000
 8002ab4:	10624dd3 	.word	0x10624dd3

08002ab8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	613b      	str	r3, [r7, #16]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d07d      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad8:	4b4f      	ldr	r3, [pc, #316]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10d      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae4:	4b4c      	ldr	r3, [pc, #304]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	4a4b      	ldr	r2, [pc, #300]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aee:	61d3      	str	r3, [r2, #28]
 8002af0:	4b49      	ldr	r3, [pc, #292]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002afc:	2301      	movs	r3, #1
 8002afe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b00:	4b46      	ldr	r3, [pc, #280]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d118      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b0c:	4b43      	ldr	r3, [pc, #268]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a42      	ldr	r2, [pc, #264]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b18:	f7fe fee4 	bl	80018e4 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1e:	e008      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b20:	f7fe fee0 	bl	80018e4 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	; 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e06d      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b32:	4b3a      	ldr	r3, [pc, #232]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b3e:	4b36      	ldr	r3, [pc, #216]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b46:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d02e      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d027      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b5c:	4b2e      	ldr	r3, [pc, #184]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b64:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b66:	4b2e      	ldr	r3, [pc, #184]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b6c:	4b2c      	ldr	r3, [pc, #176]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b72:	4a29      	ldr	r2, [pc, #164]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d014      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b82:	f7fe feaf 	bl	80018e4 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b88:	e00a      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8a:	f7fe feab 	bl	80018e4 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e036      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba0:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0ee      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bac:	4b1a      	ldr	r3, [pc, #104]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	4917      	ldr	r1, [pc, #92]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bbe:	7dfb      	ldrb	r3, [r7, #23]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d105      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc4:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	4a13      	ldr	r2, [pc, #76]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	490b      	ldr	r1, [pc, #44]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d008      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bfa:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	4904      	ldr	r1, [pc, #16]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40007000 	.word	0x40007000
 8002c20:	42420440 	.word	0x42420440

08002c24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e041      	b.n	8002cba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d106      	bne.n	8002c50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7fe fcd0 	bl	80015f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2202      	movs	r2, #2
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3304      	adds	r3, #4
 8002c60:	4619      	mov	r1, r3
 8002c62:	4610      	mov	r0, r2
 8002c64:	f000 fb80 	bl	8003368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d001      	beq.n	8002cdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e035      	b.n	8002d48 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0201 	orr.w	r2, r2, #1
 8002cf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a16      	ldr	r2, [pc, #88]	; (8002d54 <HAL_TIM_Base_Start_IT+0x90>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d009      	beq.n	8002d12 <HAL_TIM_Base_Start_IT+0x4e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d06:	d004      	beq.n	8002d12 <HAL_TIM_Base_Start_IT+0x4e>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a12      	ldr	r2, [pc, #72]	; (8002d58 <HAL_TIM_Base_Start_IT+0x94>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d111      	bne.n	8002d36 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b06      	cmp	r3, #6
 8002d22:	d010      	beq.n	8002d46 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0201 	orr.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d34:	e007      	b.n	8002d46 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f042 0201 	orr.w	r2, r2, #1
 8002d44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40012c00 	.word	0x40012c00
 8002d58:	40000400 	.word	0x40000400

08002d5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e041      	b.n	8002df2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f839 	bl	8002dfa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3304      	adds	r3, #4
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	f000 fae4 	bl	8003368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d122      	bne.n	8002e68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d11b      	bne.n	8002e68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f06f 0202 	mvn.w	r2, #2
 8002e38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 fa6f 	bl	8003332 <HAL_TIM_IC_CaptureCallback>
 8002e54:	e005      	b.n	8002e62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 fa62 	bl	8003320 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 fa71 	bl	8003344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f003 0304 	and.w	r3, r3, #4
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d122      	bne.n	8002ebc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d11b      	bne.n	8002ebc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f06f 0204 	mvn.w	r2, #4
 8002e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2202      	movs	r2, #2
 8002e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 fa45 	bl	8003332 <HAL_TIM_IC_CaptureCallback>
 8002ea8:	e005      	b.n	8002eb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fa38 	bl	8003320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fa47 	bl	8003344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d122      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d11b      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0208 	mvn.w	r2, #8
 8002ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2204      	movs	r2, #4
 8002ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 fa1b 	bl	8003332 <HAL_TIM_IC_CaptureCallback>
 8002efc:	e005      	b.n	8002f0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fa0e 	bl	8003320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 fa1d 	bl	8003344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	2b10      	cmp	r3, #16
 8002f1c:	d122      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	2b10      	cmp	r3, #16
 8002f2a:	d11b      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0210 	mvn.w	r2, #16
 8002f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2208      	movs	r2, #8
 8002f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f9f1 	bl	8003332 <HAL_TIM_IC_CaptureCallback>
 8002f50:	e005      	b.n	8002f5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f9e4 	bl	8003320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f9f3 	bl	8003344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d10e      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d107      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f06f 0201 	mvn.w	r2, #1
 8002f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7fe faa8 	bl	80014e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9a:	2b80      	cmp	r3, #128	; 0x80
 8002f9c:	d10e      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa8:	2b80      	cmp	r3, #128	; 0x80
 8002faa:	d107      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fcfe 	bl	80039b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc6:	2b40      	cmp	r3, #64	; 0x40
 8002fc8:	d10e      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd4:	2b40      	cmp	r3, #64	; 0x40
 8002fd6:	d107      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f9b7 	bl	8003356 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d10e      	bne.n	8003014 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0320 	and.w	r3, r3, #32
 8003000:	2b20      	cmp	r3, #32
 8003002:	d107      	bne.n	8003014 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0220 	mvn.w	r2, #32
 800300c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 fcc9 	bl	80039a6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003014:	bf00      	nop
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003032:	2302      	movs	r3, #2
 8003034:	e0ac      	b.n	8003190 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b0c      	cmp	r3, #12
 8003042:	f200 809f 	bhi.w	8003184 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003046:	a201      	add	r2, pc, #4	; (adr r2, 800304c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304c:	08003081 	.word	0x08003081
 8003050:	08003185 	.word	0x08003185
 8003054:	08003185 	.word	0x08003185
 8003058:	08003185 	.word	0x08003185
 800305c:	080030c1 	.word	0x080030c1
 8003060:	08003185 	.word	0x08003185
 8003064:	08003185 	.word	0x08003185
 8003068:	08003185 	.word	0x08003185
 800306c:	08003103 	.word	0x08003103
 8003070:	08003185 	.word	0x08003185
 8003074:	08003185 	.word	0x08003185
 8003078:	08003185 	.word	0x08003185
 800307c:	08003143 	.word	0x08003143
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68b9      	ldr	r1, [r7, #8]
 8003086:	4618      	mov	r0, r3
 8003088:	f000 f9c6 	bl	8003418 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0208 	orr.w	r2, r2, #8
 800309a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699a      	ldr	r2, [r3, #24]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0204 	bic.w	r2, r2, #4
 80030aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6999      	ldr	r1, [r3, #24]
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	619a      	str	r2, [r3, #24]
      break;
 80030be:	e062      	b.n	8003186 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fa0c 	bl	80034e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699a      	ldr	r2, [r3, #24]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699a      	ldr	r2, [r3, #24]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6999      	ldr	r1, [r3, #24]
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	021a      	lsls	r2, r3, #8
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	619a      	str	r2, [r3, #24]
      break;
 8003100:	e041      	b.n	8003186 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68b9      	ldr	r1, [r7, #8]
 8003108:	4618      	mov	r0, r3
 800310a:	f000 fa55 	bl	80035b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69da      	ldr	r2, [r3, #28]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0208 	orr.w	r2, r2, #8
 800311c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69da      	ldr	r2, [r3, #28]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0204 	bic.w	r2, r2, #4
 800312c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	69d9      	ldr	r1, [r3, #28]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	61da      	str	r2, [r3, #28]
      break;
 8003140:	e021      	b.n	8003186 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68b9      	ldr	r1, [r7, #8]
 8003148:	4618      	mov	r0, r3
 800314a:	f000 fa9f 	bl	800368c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	69da      	ldr	r2, [r3, #28]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800315c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69da      	ldr	r2, [r3, #28]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800316c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	69d9      	ldr	r1, [r3, #28]
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	021a      	lsls	r2, r3, #8
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	61da      	str	r2, [r3, #28]
      break;
 8003182:	e000      	b.n	8003186 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003184:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_TIM_ConfigClockSource+0x18>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e0b3      	b.n	8003318 <HAL_TIM_ConfigClockSource+0x180>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031e8:	d03e      	beq.n	8003268 <HAL_TIM_ConfigClockSource+0xd0>
 80031ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ee:	f200 8087 	bhi.w	8003300 <HAL_TIM_ConfigClockSource+0x168>
 80031f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f6:	f000 8085 	beq.w	8003304 <HAL_TIM_ConfigClockSource+0x16c>
 80031fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031fe:	d87f      	bhi.n	8003300 <HAL_TIM_ConfigClockSource+0x168>
 8003200:	2b70      	cmp	r3, #112	; 0x70
 8003202:	d01a      	beq.n	800323a <HAL_TIM_ConfigClockSource+0xa2>
 8003204:	2b70      	cmp	r3, #112	; 0x70
 8003206:	d87b      	bhi.n	8003300 <HAL_TIM_ConfigClockSource+0x168>
 8003208:	2b60      	cmp	r3, #96	; 0x60
 800320a:	d050      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0x116>
 800320c:	2b60      	cmp	r3, #96	; 0x60
 800320e:	d877      	bhi.n	8003300 <HAL_TIM_ConfigClockSource+0x168>
 8003210:	2b50      	cmp	r3, #80	; 0x50
 8003212:	d03c      	beq.n	800328e <HAL_TIM_ConfigClockSource+0xf6>
 8003214:	2b50      	cmp	r3, #80	; 0x50
 8003216:	d873      	bhi.n	8003300 <HAL_TIM_ConfigClockSource+0x168>
 8003218:	2b40      	cmp	r3, #64	; 0x40
 800321a:	d058      	beq.n	80032ce <HAL_TIM_ConfigClockSource+0x136>
 800321c:	2b40      	cmp	r3, #64	; 0x40
 800321e:	d86f      	bhi.n	8003300 <HAL_TIM_ConfigClockSource+0x168>
 8003220:	2b30      	cmp	r3, #48	; 0x30
 8003222:	d064      	beq.n	80032ee <HAL_TIM_ConfigClockSource+0x156>
 8003224:	2b30      	cmp	r3, #48	; 0x30
 8003226:	d86b      	bhi.n	8003300 <HAL_TIM_ConfigClockSource+0x168>
 8003228:	2b20      	cmp	r3, #32
 800322a:	d060      	beq.n	80032ee <HAL_TIM_ConfigClockSource+0x156>
 800322c:	2b20      	cmp	r3, #32
 800322e:	d867      	bhi.n	8003300 <HAL_TIM_ConfigClockSource+0x168>
 8003230:	2b00      	cmp	r3, #0
 8003232:	d05c      	beq.n	80032ee <HAL_TIM_ConfigClockSource+0x156>
 8003234:	2b10      	cmp	r3, #16
 8003236:	d05a      	beq.n	80032ee <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003238:	e062      	b.n	8003300 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	6899      	ldr	r1, [r3, #8]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f000 fae4 	bl	8003816 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800325c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	609a      	str	r2, [r3, #8]
      break;
 8003266:	e04e      	b.n	8003306 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6818      	ldr	r0, [r3, #0]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	6899      	ldr	r1, [r3, #8]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f000 facd 	bl	8003816 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800328a:	609a      	str	r2, [r3, #8]
      break;
 800328c:	e03b      	b.n	8003306 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6818      	ldr	r0, [r3, #0]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	6859      	ldr	r1, [r3, #4]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	461a      	mov	r2, r3
 800329c:	f000 fa44 	bl	8003728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2150      	movs	r1, #80	; 0x50
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 fa9b 	bl	80037e2 <TIM_ITRx_SetConfig>
      break;
 80032ac:	e02b      	b.n	8003306 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	6859      	ldr	r1, [r3, #4]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	461a      	mov	r2, r3
 80032bc:	f000 fa62 	bl	8003784 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2160      	movs	r1, #96	; 0x60
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fa8b 	bl	80037e2 <TIM_ITRx_SetConfig>
      break;
 80032cc:	e01b      	b.n	8003306 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	6859      	ldr	r1, [r3, #4]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	461a      	mov	r2, r3
 80032dc:	f000 fa24 	bl	8003728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2140      	movs	r1, #64	; 0x40
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fa7b 	bl	80037e2 <TIM_ITRx_SetConfig>
      break;
 80032ec:	e00b      	b.n	8003306 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4619      	mov	r1, r3
 80032f8:	4610      	mov	r0, r2
 80032fa:	f000 fa72 	bl	80037e2 <TIM_ITRx_SetConfig>
        break;
 80032fe:	e002      	b.n	8003306 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003300:	bf00      	nop
 8003302:	e000      	b.n	8003306 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003304:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	bc80      	pop	{r7}
 8003330:	4770      	bx	lr

08003332 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr

08003344 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr

08003356 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr

08003368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a25      	ldr	r2, [pc, #148]	; (8003410 <TIM_Base_SetConfig+0xa8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d007      	beq.n	8003390 <TIM_Base_SetConfig+0x28>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003386:	d003      	beq.n	8003390 <TIM_Base_SetConfig+0x28>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a22      	ldr	r2, [pc, #136]	; (8003414 <TIM_Base_SetConfig+0xac>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d108      	bne.n	80033a2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003396:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	4313      	orrs	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a1a      	ldr	r2, [pc, #104]	; (8003410 <TIM_Base_SetConfig+0xa8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d007      	beq.n	80033ba <TIM_Base_SetConfig+0x52>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b0:	d003      	beq.n	80033ba <TIM_Base_SetConfig+0x52>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a17      	ldr	r2, [pc, #92]	; (8003414 <TIM_Base_SetConfig+0xac>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d108      	bne.n	80033cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a07      	ldr	r2, [pc, #28]	; (8003410 <TIM_Base_SetConfig+0xa8>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d103      	bne.n	8003400 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	615a      	str	r2, [r3, #20]
}
 8003406:	bf00      	nop
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr
 8003410:	40012c00 	.word	0x40012c00
 8003414:	40000400 	.word	0x40000400

08003418 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	f023 0201 	bic.w	r2, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 0303 	bic.w	r3, r3, #3
 800344e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f023 0302 	bic.w	r3, r3, #2
 8003460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a1c      	ldr	r2, [pc, #112]	; (80034e0 <TIM_OC1_SetConfig+0xc8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d10c      	bne.n	800348e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f023 0308 	bic.w	r3, r3, #8
 800347a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4313      	orrs	r3, r2
 8003484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f023 0304 	bic.w	r3, r3, #4
 800348c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a13      	ldr	r2, [pc, #76]	; (80034e0 <TIM_OC1_SetConfig+0xc8>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d111      	bne.n	80034ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800349c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	621a      	str	r2, [r3, #32]
}
 80034d4:	bf00      	nop
 80034d6:	371c      	adds	r7, #28
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40012c00 	.word	0x40012c00

080034e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	f023 0210 	bic.w	r2, r3, #16
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800351a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	021b      	lsls	r3, r3, #8
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4313      	orrs	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f023 0320 	bic.w	r3, r3, #32
 800352e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a1d      	ldr	r2, [pc, #116]	; (80035b4 <TIM_OC2_SetConfig+0xd0>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d10d      	bne.n	8003560 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800354a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4313      	orrs	r3, r2
 8003556:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800355e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a14      	ldr	r2, [pc, #80]	; (80035b4 <TIM_OC2_SetConfig+0xd0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d113      	bne.n	8003590 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800356e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003576:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	621a      	str	r2, [r3, #32]
}
 80035aa:	bf00      	nop
 80035ac:	371c      	adds	r7, #28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr
 80035b4:	40012c00 	.word	0x40012c00

080035b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 0303 	bic.w	r3, r3, #3
 80035ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	021b      	lsls	r3, r3, #8
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	4313      	orrs	r3, r2
 800360c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a1d      	ldr	r2, [pc, #116]	; (8003688 <TIM_OC3_SetConfig+0xd0>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d10d      	bne.n	8003632 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800361c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	021b      	lsls	r3, r3, #8
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	4313      	orrs	r3, r2
 8003628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a14      	ldr	r2, [pc, #80]	; (8003688 <TIM_OC3_SetConfig+0xd0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d113      	bne.n	8003662 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	4313      	orrs	r3, r2
 8003660:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	621a      	str	r2, [r3, #32]
}
 800367c:	bf00      	nop
 800367e:	371c      	adds	r7, #28
 8003680:	46bd      	mov	sp, r7
 8003682:	bc80      	pop	{r7}
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40012c00 	.word	0x40012c00

0800368c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	021b      	lsls	r3, r3, #8
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	031b      	lsls	r3, r3, #12
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a0f      	ldr	r2, [pc, #60]	; (8003724 <TIM_OC4_SetConfig+0x98>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d109      	bne.n	8003700 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	019b      	lsls	r3, r3, #6
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	621a      	str	r2, [r3, #32]
}
 800371a:	bf00      	nop
 800371c:	371c      	adds	r7, #28
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr
 8003724:	40012c00 	.word	0x40012c00

08003728 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	f023 0201 	bic.w	r2, r3, #1
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	4313      	orrs	r3, r2
 800375c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f023 030a 	bic.w	r3, r3, #10
 8003764:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4313      	orrs	r3, r2
 800376c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	621a      	str	r2, [r3, #32]
}
 800377a:	bf00      	nop
 800377c:	371c      	adds	r7, #28
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr

08003784 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	f023 0210 	bic.w	r2, r3, #16
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	031b      	lsls	r3, r3, #12
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	621a      	str	r2, [r3, #32]
}
 80037d8:	bf00      	nop
 80037da:	371c      	adds	r7, #28
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr

080037e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b085      	sub	sp, #20
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	f043 0307 	orr.w	r3, r3, #7
 8003804:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	609a      	str	r2, [r3, #8]
}
 800380c:	bf00      	nop
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr

08003816 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003816:	b480      	push	{r7}
 8003818:	b087      	sub	sp, #28
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	607a      	str	r2, [r7, #4]
 8003822:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003830:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	021a      	lsls	r2, r3, #8
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	431a      	orrs	r2, r3
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	4313      	orrs	r3, r2
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	609a      	str	r2, [r3, #8]
}
 800384a:	bf00      	nop
 800384c:	371c      	adds	r7, #28
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr

08003854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003868:	2302      	movs	r3, #2
 800386a:	e041      	b.n	80038f0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003892:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a14      	ldr	r2, [pc, #80]	; (80038fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d009      	beq.n	80038c4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b8:	d004      	beq.n	80038c4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a10      	ldr	r2, [pc, #64]	; (8003900 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d10c      	bne.n	80038de <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40012c00 	.word	0x40012c00
 8003900:	40000400 	.word	0x40000400

08003904 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800391c:	2302      	movs	r3, #2
 800391e:	e03d      	b.n	800399c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	4313      	orrs	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4313      	orrs	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	4313      	orrs	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr

080039a6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr

080039b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr
	...

080039cc <app_menu_main>:
 *
 * Descrição mais detalhada da função exemploFuncao.
 *
 * @param parametro Descrição do parâmetro.
 */
void app_menu_main(app_t * app){
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]

	lcd16x2_setCursor(0,0);
 80039d4:	2100      	movs	r1, #0
 80039d6:	2000      	movs	r0, #0
 80039d8:	f000 fdde 	bl	8004598 <lcd16x2_setCursor>
	lcd16x2_printf(app->menu_name[0]);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fe06 	bl	80045f4 <lcd16x2_printf>
	lcd16x2_setCursor(1,0);
 80039e8:	2100      	movs	r1, #0
 80039ea:	2001      	movs	r0, #1
 80039ec:	f000 fdd4 	bl	8004598 <lcd16x2_setCursor>
	lcd16x2_printf("%d-> ", app->menu_selection);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80039f6:	4619      	mov	r1, r3
 80039f8:	4839      	ldr	r0, [pc, #228]	; (8003ae0 <app_menu_main+0x114>)
 80039fa:	f000 fdfb 	bl	80045f4 <lcd16x2_printf>
	lcd16x2_printf(app->menu_name[app->menu_selection]);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3304      	adds	r3, #4
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 fdef 	bl	80045f4 <lcd16x2_printf>

	if(BT_PRESS(BT_UP)){
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00f      	beq.n	8003a40 <app_menu_main+0x74>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <app_menu_main+0x74>
		BT_RESET(BT_UP);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
		app->menu_selection ++;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	}
	if(BT_PRESS(BT_DOWN)){
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00f      	beq.n	8003a6a <app_menu_main+0x9e>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00a      	beq.n	8003a6a <app_menu_main+0x9e>
		BT_RESET(BT_DOWN);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
		app->menu_selection --;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003a62:	1e5a      	subs	r2, r3, #1
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	}
	limiter_saturation(app->menu_selection, 1, MENU_NUMBERS-1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	dd03      	ble.n	8003a7c <app_menu_main+0xb0>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	dc03      	bgt.n	8003a8e <app_menu_main+0xc2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

	if(BT_PRESS(BT_MENU)){
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d010      	beq.n	8003aba <app_menu_main+0xee>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00b      	beq.n	8003aba <app_menu_main+0xee>
		BT_RESET(BT_MENU);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
		app->menu_function = app->menu_selection;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
		lcd16x2_clear();
 8003ab6:	f000 fd93 	bl	80045e0 <lcd16x2_clear>
	}

	if(BT_PRESS(BT_ENTER)){
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <app_menu_main+0x10a>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <app_menu_main+0x10a>
		BT_RESET(BT_ENTER);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
	}
}
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	08006ae0 	.word	0x08006ae0

08003ae4 <app_menu_monitor>:
 *
 * Descrição mais detalhada da função exemploFuncao.
 *
 * @param parametro Descrição do parâmetro.
 */
void app_menu_monitor(app_t * app){
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]

	lcd16x2_setCursor(0,0);
 8003aec:	2100      	movs	r1, #0
 8003aee:	2000      	movs	r0, #0
 8003af0:	f000 fd52 	bl	8004598 <lcd16x2_setCursor>
	lcd16x2_printf("Act Freq = %d", (int) app->modulation_freq);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fd fad2 	bl	80010a4 <__aeabi_f2iz>
 8003b00:	4603      	mov	r3, r0
 8003b02:	4619      	mov	r1, r3
 8003b04:	483f      	ldr	r0, [pc, #252]	; (8003c04 <app_menu_monitor+0x120>)
 8003b06:	f000 fd75 	bl	80045f4 <lcd16x2_printf>
	lcd16x2_setCursor(1,0);
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	f000 fd43 	bl	8004598 <lcd16x2_setCursor>
	lcd16x2_printf("Ref Freq = %d", (int) app->ref_freq);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fd fac3 	bl	80010a4 <__aeabi_f2iz>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	4619      	mov	r1, r3
 8003b22:	4839      	ldr	r0, [pc, #228]	; (8003c08 <app_menu_monitor+0x124>)
 8003b24:	f000 fd66 	bl	80045f4 <lcd16x2_printf>

	if(BT_PRESS(BT_MENU)){
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00e      	beq.n	8003b50 <app_menu_monitor+0x6c>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d009      	beq.n	8003b50 <app_menu_monitor+0x6c>
		BT_RESET(BT_MENU);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
		app->menu_function = 0;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
		lcd16x2_clear();
 8003b4c:	f000 fd48 	bl	80045e0 <lcd16x2_clear>
	}

	if(BT_PRESS(BT_UP)){
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d015      	beq.n	8003b86 <app_menu_monitor+0xa2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d010      	beq.n	8003b86 <app_menu_monitor+0xa2>
		BT_RESET(BT_UP);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
		app->ref_freq = app->ref_freq + 1.0;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b72:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fc ffc6 	bl	8000b08 <__addsf3>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	461a      	mov	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	}
	if(BT_PRESS(BT_DOWN)){
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d015      	beq.n	8003bbc <app_menu_monitor+0xd8>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d010      	beq.n	8003bbc <app_menu_monitor+0xd8>
		BT_RESET(BT_DOWN);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
		app->ref_freq = app->ref_freq - 1.0;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ba8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fc ffa9 	bl	8000b04 <__aeabi_fsub>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	}
	limiter_saturation(app->ref_freq, 0, 60.0)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003bc2:	4912      	ldr	r1, [pc, #72]	; (8003c0c <app_menu_monitor+0x128>)
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fd fa59 	bl	800107c <__aeabi_fcmpge>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <app_menu_monitor+0xf4>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a0e      	ldr	r2, [pc, #56]	; (8003c0c <app_menu_monitor+0x128>)
 8003bd4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003bde:	f04f 0100 	mov.w	r1, #0
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fd fa40 	bl	8001068 <__aeabi_fcmple>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d100      	bne.n	8003bf0 <app_menu_monitor+0x10c>
}
 8003bee:	e004      	b.n	8003bfa <app_menu_monitor+0x116>
	limiter_saturation(app->ref_freq, 0, 60.0)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
}
 8003bfa:	bf00      	nop
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	08006ae8 	.word	0x08006ae8
 8003c08:	08006af8 	.word	0x08006af8
 8003c0c:	42700000 	.word	0x42700000

08003c10 <app_menu_parameters>:
 * Os botões UP e DOWN são usados para navegar entre os parâmetros.
 * O botão MENU é usado para sair do modo de ajuste de parâmetros.
 *
 * @param app Ponteiro para a estrutura do aplicativo.
 */
void app_menu_parameters(app_t * app){
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]

	lcd16x2_setCursor(0,0);
 8003c18:	2100      	movs	r1, #0
 8003c1a:	2000      	movs	r0, #0
 8003c1c:	f000 fcbc 	bl	8004598 <lcd16x2_setCursor>
	lcd16x2_printf(app->menu_name[app->menu_selection]);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	4413      	add	r3, r2
 8003c30:	3304      	adds	r3, #4
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 fcde 	bl	80045f4 <lcd16x2_printf>

	lcd16x2_setCursor(1,0);
 8003c38:	2100      	movs	r1, #0
 8003c3a:	2001      	movs	r0, #1
 8003c3c:	f000 fcac 	bl	8004598 <lcd16x2_setCursor>
	lcd16x2_printf(app->param_name[app->param_index]);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8003c46:	3317      	adds	r3, #23
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	3304      	adds	r3, #4
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 fccf 	bl	80045f4 <lcd16x2_printf>

	lcd16x2_setCursor(1,8);
 8003c56:	2108      	movs	r1, #8
 8003c58:	2001      	movs	r0, #1
 8003c5a:	f000 fc9d 	bl	8004598 <lcd16x2_setCursor>
	lcd16x2_printf("%d", (int) * app->param_ptr[app->param_index]);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	3356      	adds	r3, #86	; 0x56
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fd fa17 	bl	80010a4 <__aeabi_f2iz>
 8003c76:	4603      	mov	r3, r0
 8003c78:	4619      	mov	r1, r3
 8003c7a:	482b      	ldr	r0, [pc, #172]	; (8003d28 <app_menu_parameters+0x118>)
 8003c7c:	f000 fcba 	bl	80045f4 <lcd16x2_printf>

	if(BT_PRESS(BT_UP)){
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00f      	beq.n	8003caa <app_menu_parameters+0x9a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <app_menu_parameters+0x9a>
		BT_RESET(BT_UP);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
		app->param_index ++;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}
	if(BT_PRESS(BT_DOWN)){
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00f      	beq.n	8003cd4 <app_menu_parameters+0xc4>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <app_menu_parameters+0xc4>
		BT_RESET(BT_DOWN);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
		app->param_index --;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8003ccc:	1e5a      	subs	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}

	limiter_saturation(app->param_index, 0, PARAMETERS_SIZE-1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	dd03      	ble.n	8003ce6 <app_menu_parameters+0xd6>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2205      	movs	r2, #5
 8003ce2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	dc03      	bgt.n	8003cf8 <app_menu_parameters+0xe8>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

	if(BT_PRESS(BT_MENU)){
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00e      	beq.n	8003d20 <app_menu_parameters+0x110>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d009      	beq.n	8003d20 <app_menu_parameters+0x110>
		BT_RESET(BT_MENU);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
		app->menu_function = 0;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
		lcd16x2_clear();
 8003d1c:	f000 fc60 	bl	80045e0 <lcd16x2_clear>
	}
}
 8003d20:	bf00      	nop
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	08006b08 	.word	0x08006b08

08003d2c <app_init>:
 * Descrição mais detalhada da função exemploFuncao.
 *
 * @param parametro Descrição do parâmetro.
 * @return void
 */
void app_init(app_t * app) {
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	6078      	str	r0, [r7, #4]

    /** Configs **/

	app->fs = 72000000 / 6000 ;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a76      	ldr	r2, [pc, #472]	; (8003f10 <app_init+0x1e4>)
 8003d38:	601a      	str	r2, [r3, #0]
	app->ts = 1.0 / app->fs;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4619      	mov	r1, r3
 8003d40:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003d44:	f7fd f89c 	bl	8000e80 <__aeabi_fdiv>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	605a      	str	r2, [r3, #4]

    /** Bus voltage **/

	so_filter_initialize(&app->lpo  , app->fs, LPO_FC  , LPO_Q  , LPO_TYPE  , LPO_WARP  );
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f103 0018 	add.w	r0, r3, #24
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6819      	ldr	r1, [r3, #0]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	9301      	str	r3, [sp, #4]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003d66:	4a6b      	ldr	r2, [pc, #428]	; (8003f14 <app_init+0x1e8>)
 8003d68:	f000 feea 	bl	8004b40 <so_filter_initialize>
	so_filter_update_coeff_lowpass(&app->lpo);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3318      	adds	r3, #24
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 fd21 	bl	80047b8 <so_filter_update_coeff_lowpass>
	so_filter_initialize(&app->notch, app->fs, NOTCH_FC, NOTCH_Q, NOTCH_TYPE, NOTCH_WARP);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6819      	ldr	r1, [r3, #0]
 8003d80:	2301      	movs	r3, #1
 8003d82:	9301      	str	r3, [sp, #4]
 8003d84:	2302      	movs	r3, #2
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	4b63      	ldr	r3, [pc, #396]	; (8003f18 <app_init+0x1ec>)
 8003d8a:	4a64      	ldr	r2, [pc, #400]	; (8003f1c <app_init+0x1f0>)
 8003d8c:	f000 fed8 	bl	8004b40 <so_filter_initialize>
	so_filter_update_coeff_notch(&app->notch);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3360      	adds	r3, #96	; 0x60
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fdc3 	bl	8004920 <so_filter_update_coeff_notch>

    /** Controle V/F **/

	app->ref_freq = 1.0;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003da0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	app->modulation_amp = 0.0;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	app->modulation_freq = 0.0;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

	limiter_initialize(&app->limiter, app->fs, 20.0);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a57      	ldr	r2, [pc, #348]	; (8003f20 <app_init+0x1f4>)
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	f000 fc45 	bl	8004654 <limiter_initialize>


	WaveGenerator_update(&app->gerador, app->fs, app->modulation_freq, app->modulation_amp);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6819      	ldr	r1, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003de0:	f000 feee 	bl	8004bc0 <WaveGenerator_update>

    /** Menus **/

	app->menu_selection = 0;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	app->menu_vector[0] = &app_menu_main;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a4d      	ldr	r2, [pc, #308]	; (8003f24 <app_init+0x1f8>)
 8003df0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	app->menu_vector[1] = &app_menu_monitor;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a4c      	ldr	r2, [pc, #304]	; (8003f28 <app_init+0x1fc>)
 8003df8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	app->menu_vector[2] = &app_menu_parameters;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a4b      	ldr	r2, [pc, #300]	; (8003f2c <app_init+0x200>)
 8003e00:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	strcpy(app->menu_name[0], "Main menu");
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8003e0a:	4949      	ldr	r1, [pc, #292]	; (8003f30 <app_init+0x204>)
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	460b      	mov	r3, r1
 8003e10:	cb03      	ldmia	r3!, {r0, r1}
 8003e12:	6010      	str	r0, [r2, #0]
 8003e14:	6051      	str	r1, [r2, #4]
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	8113      	strh	r3, [r2, #8]
	strcpy(app->menu_name[1], "Monitor");
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8003e20:	4944      	ldr	r1, [pc, #272]	; (8003f34 <app_init+0x208>)
 8003e22:	461a      	mov	r2, r3
 8003e24:	460b      	mov	r3, r1
 8003e26:	cb03      	ldmia	r3!, {r0, r1}
 8003e28:	6010      	str	r0, [r2, #0]
 8003e2a:	6051      	str	r1, [r2, #4]
	strcpy(app->menu_name[2], "Parameters");
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003e32:	4941      	ldr	r1, [pc, #260]	; (8003f38 <app_init+0x20c>)
 8003e34:	461a      	mov	r2, r3
 8003e36:	460b      	mov	r3, r1
 8003e38:	cb03      	ldmia	r3!, {r0, r1}
 8003e3a:	6010      	str	r0, [r2, #0]
 8003e3c:	6051      	str	r1, [r2, #4]
 8003e3e:	8819      	ldrh	r1, [r3, #0]
 8003e40:	789b      	ldrb	r3, [r3, #2]
 8003e42:	8111      	strh	r1, [r2, #8]
 8003e44:	7293      	strb	r3, [r2, #10]

    /** Parameters **/

	app->param_ptr[0] = &app->lpo.fc;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	strcpy(app->param_name[0], "LPO Fc");
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8003e58:	4a38      	ldr	r2, [pc, #224]	; (8003f3c <app_init+0x210>)
 8003e5a:	6810      	ldr	r0, [r2, #0]
 8003e5c:	6018      	str	r0, [r3, #0]
 8003e5e:	8891      	ldrh	r1, [r2, #4]
 8003e60:	7992      	ldrb	r2, [r2, #6]
 8003e62:	8099      	strh	r1, [r3, #4]
 8003e64:	719a      	strb	r2, [r3, #6]

	app->param_ptr[1] = &app->lpo.Q;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f103 0220 	add.w	r2, r3, #32
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	strcpy(app->param_name[1], "LPO Q");
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003e78:	4a31      	ldr	r2, [pc, #196]	; (8003f40 <app_init+0x214>)
 8003e7a:	6810      	ldr	r0, [r2, #0]
 8003e7c:	6018      	str	r0, [r3, #0]
 8003e7e:	8892      	ldrh	r2, [r2, #4]
 8003e80:	809a      	strh	r2, [r3, #4]

	app->param_ptr[2] = &app->lpo.fc;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	strcpy(app->param_name[2], "Notch Fc");
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8003e94:	492b      	ldr	r1, [pc, #172]	; (8003f44 <app_init+0x218>)
 8003e96:	461a      	mov	r2, r3
 8003e98:	460b      	mov	r3, r1
 8003e9a:	cb03      	ldmia	r3!, {r0, r1}
 8003e9c:	6010      	str	r0, [r2, #0]
 8003e9e:	6051      	str	r1, [r2, #4]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	7213      	strb	r3, [r2, #8]

	app->param_ptr[3] = &app->lpo.Q;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f103 0220 	add.w	r2, r3, #32
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	strcpy(app->param_name[3], "Notch Q");
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8003eb6:	4924      	ldr	r1, [pc, #144]	; (8003f48 <app_init+0x21c>)
 8003eb8:	461a      	mov	r2, r3
 8003eba:	460b      	mov	r3, r1
 8003ebc:	cb03      	ldmia	r3!, {r0, r1}
 8003ebe:	6010      	str	r0, [r2, #0]
 8003ec0:	6051      	str	r1, [r2, #4]

	app->param_ptr[4] = &app->limiter.rate;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f103 02dc 	add.w	r2, r3, #220	; 0xdc
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	strcpy(app->param_name[4], "Rate Lim");
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8003ed4:	491d      	ldr	r1, [pc, #116]	; (8003f4c <app_init+0x220>)
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	460b      	mov	r3, r1
 8003eda:	cb03      	ldmia	r3!, {r0, r1}
 8003edc:	6010      	str	r0, [r2, #0]
 8003ede:	6051      	str	r1, [r2, #4]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	7213      	strb	r3, [r2, #8]

	app->param_ptr[5] = &app->ref_freq;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f103 02f4 	add.w	r2, r3, #244	; 0xf4
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	strcpy(app->param_name[5], "Ref Freq");
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8003ef6:	4916      	ldr	r1, [pc, #88]	; (8003f50 <app_init+0x224>)
 8003ef8:	461a      	mov	r2, r3
 8003efa:	460b      	mov	r3, r1
 8003efc:	cb03      	ldmia	r3!, {r0, r1}
 8003efe:	6010      	str	r0, [r2, #0]
 8003f00:	6051      	str	r1, [r2, #4]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	7213      	strb	r3, [r2, #8]


    /** Buttons **/


}
 8003f06:	bf00      	nop
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	463b8000 	.word	0x463b8000
 8003f14:	41f00000 	.word	0x41f00000
 8003f18:	41400000 	.word	0x41400000
 8003f1c:	42f00000 	.word	0x42f00000
 8003f20:	41a00000 	.word	0x41a00000
 8003f24:	080039cd 	.word	0x080039cd
 8003f28:	08003ae5 	.word	0x08003ae5
 8003f2c:	08003c11 	.word	0x08003c11
 8003f30:	08006b0c 	.word	0x08006b0c
 8003f34:	08006b18 	.word	0x08006b18
 8003f38:	08006b20 	.word	0x08006b20
 8003f3c:	08006b2c 	.word	0x08006b2c
 8003f40:	08006b34 	.word	0x08006b34
 8003f44:	08006b3c 	.word	0x08006b3c
 8003f48:	08006b48 	.word	0x08006b48
 8003f4c:	08006b50 	.word	0x08006b50
 8003f50:	08006b5c 	.word	0x08006b5c

08003f54 <app_loop>:

void app_loop(app_t * app){
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]

	while (1){

		app->button[0].state = HAL_GPIO_ReadPin(BT1_GPIO_Port, BT1_Pin);
 8003f5c:	2110      	movs	r1, #16
 8003f5e:	4828      	ldr	r0, [pc, #160]	; (8004000 <app_loop+0xac>)
 8003f60:	f7fe f988 	bl	8002274 <HAL_GPIO_ReadPin>
 8003f64:	4603      	mov	r3, r0
 8003f66:	461a      	mov	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
		app->button[1].state = HAL_GPIO_ReadPin(BT2_GPIO_Port, BT2_Pin);
 8003f6e:	2120      	movs	r1, #32
 8003f70:	4823      	ldr	r0, [pc, #140]	; (8004000 <app_loop+0xac>)
 8003f72:	f7fe f97f 	bl	8002274 <HAL_GPIO_ReadPin>
 8003f76:	4603      	mov	r3, r0
 8003f78:	461a      	mov	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
		app->button[2].state = HAL_GPIO_ReadPin(BT3_GPIO_Port, BT3_Pin);
 8003f80:	2140      	movs	r1, #64	; 0x40
 8003f82:	481f      	ldr	r0, [pc, #124]	; (8004000 <app_loop+0xac>)
 8003f84:	f7fe f976 	bl	8002274 <HAL_GPIO_ReadPin>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
		app->button[3].state = HAL_GPIO_ReadPin(BT4_GPIO_Port, BT4_Pin);
 8003f92:	2180      	movs	r1, #128	; 0x80
 8003f94:	481a      	ldr	r0, [pc, #104]	; (8004000 <app_loop+0xac>)
 8003f96:	f7fe f96d 	bl	8002274 <HAL_GPIO_ReadPin>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

		if(!app->button[0].state) app->button[0].flag = 1;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d103      	bne.n	8003fb6 <app_loop+0x62>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
		if(!app->button[1].state) app->button[1].flag = 1;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d103      	bne.n	8003fc8 <app_loop+0x74>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
		if(!app->button[2].state) app->button[2].flag = 1;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d103      	bne.n	8003fda <app_loop+0x86>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
		if(!app->button[3].state) app->button[3].flag = 1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d103      	bne.n	8003fec <app_loop+0x98>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec

		app->menu_vector[app->menu_function](app);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3244      	adds	r2, #68	; 0x44
 8003ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	4798      	blx	r3
		app->button[0].state = HAL_GPIO_ReadPin(BT1_GPIO_Port, BT1_Pin);
 8003ffe:	e7ad      	b.n	8003f5c <app_loop+0x8>
 8004000:	40010c00 	.word	0x40010c00
 8004004:	00000000 	.word	0x00000000

08004008 <app_isr>:


	}
}

void app_isr(app_t * app){
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]

    /** Bus voltage **/
	app->counter = app->counter + 1.0 / 12000.0;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004016:	4618      	mov	r0, r3
 8004018:	f7fc fa06 	bl	8000428 <__aeabi_f2d>
 800401c:	a33e      	add	r3, pc, #248	; (adr r3, 8004118 <app_isr+0x110>)
 800401e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004022:	f7fc f8a3 	bl	800016c <__adddf3>
 8004026:	4602      	mov	r2, r0
 8004028:	460b      	mov	r3, r1
 800402a:	4610      	mov	r0, r2
 800402c:	4619      	mov	r1, r3
 800402e:	f7fc fd15 	bl	8000a5c <__aeabi_d2f>
 8004032:	4602      	mov	r2, r0
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	app->vbus.max = fmaxf(app->vbus.raw, app->vbus.max);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	4619      	mov	r1, r3
 8004044:	4610      	mov	r0, r2
 8004046:	f001 fb8b 	bl	8005760 <fmaxf>
 800404a:	4602      	mov	r2, r0
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	60da      	str	r2, [r3, #12]
	app->vbus.min = fmaxf(app->vbus.raw, app->vbus.min);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	4619      	mov	r1, r3
 800405a:	4610      	mov	r0, r2
 800405c:	f001 fb80 	bl	8005760 <fmaxf>
 8004060:	4602      	mov	r2, r0
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	611a      	str	r2, [r3, #16]

	so_filter_run(&app->lpo,   app->vbus.raw);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f103 0218 	add.w	r2, r3, #24
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	4619      	mov	r1, r3
 8004072:	4610      	mov	r0, r2
 8004074:	f000 fcfe 	bl	8004a74 <so_filter_run>
	app->vbus.filtered = so_filter_run(&app->notch, app->lpo.states.y0);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004082:	4619      	mov	r1, r3
 8004084:	4610      	mov	r0, r2
 8004086:	f000 fcf5 	bl	8004a74 <so_filter_run>
 800408a:	4602      	mov	r2, r0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	615a      	str	r2, [r3, #20]

    /** Controle V/F **/

	limiter_rate_run(&app->limiter, app->ref_freq);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800409c:	4619      	mov	r1, r3
 800409e:	4610      	mov	r0, r2
 80040a0:	f000 faf9 	bl	8004696 <limiter_rate_run>

	app->modulation_freq = app->limiter.output;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	app->modulation_amp  = app->limiter.output /GENERATOR_NOMINAL_FS;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040b6:	491a      	ldr	r1, [pc, #104]	; (8004120 <app_isr+0x118>)
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fc fee1 	bl	8000e80 <__aeabi_fdiv>
 80040be:	4603      	mov	r3, r0
 80040c0:	461a      	mov	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

	WaveGenerator_update(&app->gerador, app->fs, app->modulation_freq, app->modulation_amp);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6819      	ldr	r1, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80040de:	f000 fd6f 	bl	8004bc0 <WaveGenerator_update>
	WaveGenerator_sine_run(&app->gerador);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	33a8      	adds	r3, #168	; 0xa8
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fdae 	bl	8004c48 <WaveGenerator_sine_run>

	app->sa = app->gerador.a;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	app->sb = app->gerador.b;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	app->sc = app->gerador.c;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

    /** PWM **/
}
 8004110:	bf00      	nop
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	c3ece2a5 	.word	0xc3ece2a5
 800411c:	3f15d867 	.word	0x3f15d867
 8004120:	42700000 	.word	0x42700000

08004124 <DWT_Delay_Init>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8004128:	4b14      	ldr	r3, [pc, #80]	; (800417c <DWT_Delay_Init+0x58>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	4a13      	ldr	r2, [pc, #76]	; (800417c <DWT_Delay_Init+0x58>)
 800412e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004132:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004134:	4b11      	ldr	r3, [pc, #68]	; (800417c <DWT_Delay_Init+0x58>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	4a10      	ldr	r2, [pc, #64]	; (800417c <DWT_Delay_Init+0x58>)
 800413a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800413e:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8004140:	4b0f      	ldr	r3, [pc, #60]	; (8004180 <DWT_Delay_Init+0x5c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a0e      	ldr	r2, [pc, #56]	; (8004180 <DWT_Delay_Init+0x5c>)
 8004146:	f023 0301 	bic.w	r3, r3, #1
 800414a:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800414c:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <DWT_Delay_Init+0x5c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a0b      	ldr	r2, [pc, #44]	; (8004180 <DWT_Delay_Init+0x5c>)
 8004152:	f043 0301 	orr.w	r3, r3, #1
 8004156:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8004158:	4b09      	ldr	r3, [pc, #36]	; (8004180 <DWT_Delay_Init+0x5c>)
 800415a:	2200      	movs	r2, #0
 800415c:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 800415e:	bf00      	nop
  __NOP();
 8004160:	bf00      	nop
  __NOP();
 8004162:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 8004164:	4b06      	ldr	r3, [pc, #24]	; (8004180 <DWT_Delay_Init+0x5c>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <DWT_Delay_Init+0x4c>
  {
    return 0;
 800416c:	2300      	movs	r3, #0
 800416e:	e000      	b.n	8004172 <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1;
 8004170:	2301      	movs	r3, #1
  }
}
 8004172:	4618      	mov	r0, r3
 8004174:	46bd      	mov	sp, r7
 8004176:	bc80      	pop	{r7}
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	e000edf0 	.word	0xe000edf0
 8004180:	e0001000 	.word	0xe0001000

08004184 <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 800418c:	4b0d      	ldr	r3, [pc, #52]	; (80041c4 <DWT_Delay_us+0x40>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8004192:	f7fe fc69 	bl	8002a68 <HAL_RCC_GetHCLKFreq>
 8004196:	4603      	mov	r3, r0
 8004198:	4a0b      	ldr	r2, [pc, #44]	; (80041c8 <DWT_Delay_us+0x44>)
 800419a:	fba2 2303 	umull	r2, r3, r2, r3
 800419e:	0c9b      	lsrs	r3, r3, #18
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	fb02 f303 	mul.w	r3, r2, r3
 80041a6:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 80041a8:	bf00      	nop
 80041aa:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <DWT_Delay_us+0x40>)
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	1ad2      	subs	r2, r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d3f8      	bcc.n	80041aa <DWT_Delay_us+0x26>
}
 80041b8:	bf00      	nop
 80041ba:	bf00      	nop
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	e0001000 	.word	0xe0001000
 80041c8:	431bde83 	.word	0x431bde83

080041cc <lcd16x2_enablePulse>:

/**
 * @brief Enable Pulse function
 */
static void lcd16x2_enablePulse(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 80041d0:	4b0b      	ldr	r3, [pc, #44]	; (8004200 <lcd16x2_enablePulse+0x34>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a0b      	ldr	r2, [pc, #44]	; (8004204 <lcd16x2_enablePulse+0x38>)
 80041d6:	8811      	ldrh	r1, [r2, #0]
 80041d8:	2201      	movs	r2, #1
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fe f861 	bl	80022a2 <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 80041e0:	2014      	movs	r0, #20
 80041e2:	f7ff ffcf 	bl	8004184 <DWT_Delay_us>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 80041e6:	4b06      	ldr	r3, [pc, #24]	; (8004200 <lcd16x2_enablePulse+0x34>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a06      	ldr	r2, [pc, #24]	; (8004204 <lcd16x2_enablePulse+0x38>)
 80041ec:	8811      	ldrh	r1, [r2, #0]
 80041ee:	2200      	movs	r2, #0
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fe f856 	bl	80022a2 <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 80041f6:	203c      	movs	r0, #60	; 0x3c
 80041f8:	f7ff ffc4 	bl	8004184 <DWT_Delay_us>
}
 80041fc:	bf00      	nop
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20000090 	.word	0x20000090
 8004204:	20000096 	.word	0x20000096

08004208 <lcd16x2_rs>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8004212:	4b06      	ldr	r3, [pc, #24]	; (800422c <lcd16x2_rs+0x24>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a06      	ldr	r2, [pc, #24]	; (8004230 <lcd16x2_rs+0x28>)
 8004218:	8811      	ldrh	r1, [r2, #0]
 800421a:	79fa      	ldrb	r2, [r7, #7]
 800421c:	4618      	mov	r0, r3
 800421e:	f7fe f840 	bl	80022a2 <HAL_GPIO_WritePin>
}
 8004222:	bf00      	nop
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	20000090 	.word	0x20000090
 8004230:	20000094 	.word	0x20000094

08004234 <lcd16x2_write>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	f003 030f 	and.w	r3, r3, #15
 8004244:	73fb      	strb	r3, [r7, #15]
 8004246:	79fb      	ldrb	r3, [r7, #7]
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 800424c:	4b5f      	ldr	r3, [pc, #380]	; (80043cc <lcd16x2_write+0x198>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d05a      	beq.n	800430a <lcd16x2_write+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8004254:	4b5e      	ldr	r3, [pc, #376]	; (80043d0 <lcd16x2_write+0x19c>)
 8004256:	6818      	ldr	r0, [r3, #0]
 8004258:	4b5e      	ldr	r3, [pc, #376]	; (80043d4 <lcd16x2_write+0x1a0>)
 800425a:	8819      	ldrh	r1, [r3, #0]
 800425c:	7bfb      	ldrb	r3, [r7, #15]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	b2db      	uxtb	r3, r3
 8004264:	461a      	mov	r2, r3
 8004266:	f7fe f81c 	bl	80022a2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 800426a:	4b59      	ldr	r3, [pc, #356]	; (80043d0 <lcd16x2_write+0x19c>)
 800426c:	6818      	ldr	r0, [r3, #0]
 800426e:	4b5a      	ldr	r3, [pc, #360]	; (80043d8 <lcd16x2_write+0x1a4>)
 8004270:	8819      	ldrh	r1, [r3, #0]
 8004272:	7bfb      	ldrb	r3, [r7, #15]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	b2db      	uxtb	r3, r3
 800427a:	461a      	mov	r2, r3
 800427c:	f7fe f811 	bl	80022a2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8004280:	4b53      	ldr	r3, [pc, #332]	; (80043d0 <lcd16x2_write+0x19c>)
 8004282:	6818      	ldr	r0, [r3, #0]
 8004284:	4b55      	ldr	r3, [pc, #340]	; (80043dc <lcd16x2_write+0x1a8>)
 8004286:	8819      	ldrh	r1, [r3, #0]
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	b2db      	uxtb	r3, r3
 8004290:	461a      	mov	r2, r3
 8004292:	f7fe f806 	bl	80022a2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8004296:	4b4e      	ldr	r3, [pc, #312]	; (80043d0 <lcd16x2_write+0x19c>)
 8004298:	6818      	ldr	r0, [r3, #0]
 800429a:	4b51      	ldr	r3, [pc, #324]	; (80043e0 <lcd16x2_write+0x1ac>)
 800429c:	8819      	ldrh	r1, [r3, #0]
 800429e:	7bfb      	ldrb	r3, [r7, #15]
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	461a      	mov	r2, r3
 80042a8:	f7fd fffb 	bl	80022a2 <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 80042ac:	4b4d      	ldr	r3, [pc, #308]	; (80043e4 <lcd16x2_write+0x1b0>)
 80042ae:	6818      	ldr	r0, [r3, #0]
 80042b0:	4b4d      	ldr	r3, [pc, #308]	; (80043e8 <lcd16x2_write+0x1b4>)
 80042b2:	8819      	ldrh	r1, [r3, #0]
 80042b4:	7bbb      	ldrb	r3, [r7, #14]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	461a      	mov	r2, r3
 80042be:	f7fd fff0 	bl	80022a2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 80042c2:	4b48      	ldr	r3, [pc, #288]	; (80043e4 <lcd16x2_write+0x1b0>)
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	4b49      	ldr	r3, [pc, #292]	; (80043ec <lcd16x2_write+0x1b8>)
 80042c8:	8819      	ldrh	r1, [r3, #0]
 80042ca:	7bbb      	ldrb	r3, [r7, #14]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	461a      	mov	r2, r3
 80042d4:	f7fd ffe5 	bl	80022a2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 80042d8:	4b42      	ldr	r3, [pc, #264]	; (80043e4 <lcd16x2_write+0x1b0>)
 80042da:	6818      	ldr	r0, [r3, #0]
 80042dc:	4b44      	ldr	r3, [pc, #272]	; (80043f0 <lcd16x2_write+0x1bc>)
 80042de:	8819      	ldrh	r1, [r3, #0]
 80042e0:	7bbb      	ldrb	r3, [r7, #14]
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	461a      	mov	r2, r3
 80042ea:	f7fd ffda 	bl	80022a2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80042ee:	4b3d      	ldr	r3, [pc, #244]	; (80043e4 <lcd16x2_write+0x1b0>)
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	4b40      	ldr	r3, [pc, #256]	; (80043f4 <lcd16x2_write+0x1c0>)
 80042f4:	8819      	ldrh	r1, [r3, #0]
 80042f6:	7bbb      	ldrb	r3, [r7, #14]
 80042f8:	f003 0308 	and.w	r3, r3, #8
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	461a      	mov	r2, r3
 8004300:	f7fd ffcf 	bl	80022a2 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8004304:	f7ff ff62 	bl	80041cc <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 8004308:	e05b      	b.n	80043c2 <lcd16x2_write+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 800430a:	4b36      	ldr	r3, [pc, #216]	; (80043e4 <lcd16x2_write+0x1b0>)
 800430c:	6818      	ldr	r0, [r3, #0]
 800430e:	4b36      	ldr	r3, [pc, #216]	; (80043e8 <lcd16x2_write+0x1b4>)
 8004310:	8819      	ldrh	r1, [r3, #0]
 8004312:	7bbb      	ldrb	r3, [r7, #14]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	b2db      	uxtb	r3, r3
 800431a:	461a      	mov	r2, r3
 800431c:	f7fd ffc1 	bl	80022a2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8004320:	4b30      	ldr	r3, [pc, #192]	; (80043e4 <lcd16x2_write+0x1b0>)
 8004322:	6818      	ldr	r0, [r3, #0]
 8004324:	4b31      	ldr	r3, [pc, #196]	; (80043ec <lcd16x2_write+0x1b8>)
 8004326:	8819      	ldrh	r1, [r3, #0]
 8004328:	7bbb      	ldrb	r3, [r7, #14]
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	b2db      	uxtb	r3, r3
 8004330:	461a      	mov	r2, r3
 8004332:	f7fd ffb6 	bl	80022a2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8004336:	4b2b      	ldr	r3, [pc, #172]	; (80043e4 <lcd16x2_write+0x1b0>)
 8004338:	6818      	ldr	r0, [r3, #0]
 800433a:	4b2d      	ldr	r3, [pc, #180]	; (80043f0 <lcd16x2_write+0x1bc>)
 800433c:	8819      	ldrh	r1, [r3, #0]
 800433e:	7bbb      	ldrb	r3, [r7, #14]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	b2db      	uxtb	r3, r3
 8004346:	461a      	mov	r2, r3
 8004348:	f7fd ffab 	bl	80022a2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 800434c:	4b25      	ldr	r3, [pc, #148]	; (80043e4 <lcd16x2_write+0x1b0>)
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	4b28      	ldr	r3, [pc, #160]	; (80043f4 <lcd16x2_write+0x1c0>)
 8004352:	8819      	ldrh	r1, [r3, #0]
 8004354:	7bbb      	ldrb	r3, [r7, #14]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	b2db      	uxtb	r3, r3
 800435c:	461a      	mov	r2, r3
 800435e:	f7fd ffa0 	bl	80022a2 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8004362:	f7ff ff33 	bl	80041cc <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8004366:	4b1f      	ldr	r3, [pc, #124]	; (80043e4 <lcd16x2_write+0x1b0>)
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	4b1f      	ldr	r3, [pc, #124]	; (80043e8 <lcd16x2_write+0x1b4>)
 800436c:	8819      	ldrh	r1, [r3, #0]
 800436e:	7bfb      	ldrb	r3, [r7, #15]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	b2db      	uxtb	r3, r3
 8004376:	461a      	mov	r2, r3
 8004378:	f7fd ff93 	bl	80022a2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 800437c:	4b19      	ldr	r3, [pc, #100]	; (80043e4 <lcd16x2_write+0x1b0>)
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	4b1a      	ldr	r3, [pc, #104]	; (80043ec <lcd16x2_write+0x1b8>)
 8004382:	8819      	ldrh	r1, [r3, #0]
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	b2db      	uxtb	r3, r3
 800438c:	461a      	mov	r2, r3
 800438e:	f7fd ff88 	bl	80022a2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8004392:	4b14      	ldr	r3, [pc, #80]	; (80043e4 <lcd16x2_write+0x1b0>)
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	4b16      	ldr	r3, [pc, #88]	; (80043f0 <lcd16x2_write+0x1bc>)
 8004398:	8819      	ldrh	r1, [r3, #0]
 800439a:	7bfb      	ldrb	r3, [r7, #15]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	461a      	mov	r2, r3
 80043a4:	f7fd ff7d 	bl	80022a2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 80043a8:	4b0e      	ldr	r3, [pc, #56]	; (80043e4 <lcd16x2_write+0x1b0>)
 80043aa:	6818      	ldr	r0, [r3, #0]
 80043ac:	4b11      	ldr	r3, [pc, #68]	; (80043f4 <lcd16x2_write+0x1c0>)
 80043ae:	8819      	ldrh	r1, [r3, #0]
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	461a      	mov	r2, r3
 80043ba:	f7fd ff72 	bl	80022a2 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 80043be:	f7ff ff05 	bl	80041cc <lcd16x2_enablePulse>
}
 80043c2:	bf00      	nop
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	20000009 	.word	0x20000009
 80043d0:	20000098 	.word	0x20000098
 80043d4:	2000009c 	.word	0x2000009c
 80043d8:	2000009e 	.word	0x2000009e
 80043dc:	200000a0 	.word	0x200000a0
 80043e0:	200000a2 	.word	0x200000a2
 80043e4:	200000a4 	.word	0x200000a4
 80043e8:	200000a8 	.word	0x200000a8
 80043ec:	200000aa 	.word	0x200000aa
 80043f0:	200000ac 	.word	0x200000ac
 80043f4:	200000ae 	.word	0x200000ae

080043f8 <lcd16x2_writeCommand>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	4603      	mov	r3, r0
 8004400:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 8004402:	2000      	movs	r0, #0
 8004404:	f7ff ff00 	bl	8004208 <lcd16x2_rs>
  lcd16x2_write(cmd);
 8004408:	79fb      	ldrb	r3, [r7, #7]
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff ff12 	bl	8004234 <lcd16x2_write>
}
 8004410:	bf00      	nop
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <lcd16x2_writeData>:

/**
 * @brief Write data
 */
static void lcd16x2_writeData(uint8_t data)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	4603      	mov	r3, r0
 8004420:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(true);
 8004422:	2001      	movs	r0, #1
 8004424:	f7ff fef0 	bl	8004208 <lcd16x2_rs>
  lcd16x2_write(data);
 8004428:	79fb      	ldrb	r3, [r7, #7]
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff ff02 	bl	8004234 <lcd16x2_write>
}
 8004430:	bf00      	nop
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <lcd16x2_write4>:

/**
 * @brief 4-bits write
 */
static void lcd16x2_write4(uint8_t nib)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	4603      	mov	r3, r0
 8004440:	71fb      	strb	r3, [r7, #7]
  nib &= 0xF;
 8004442:	79fb      	ldrb	r3, [r7, #7]
 8004444:	f003 030f 	and.w	r3, r3, #15
 8004448:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 800444a:	2000      	movs	r0, #0
 800444c:	f7ff fedc 	bl	8004208 <lcd16x2_rs>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 8004450:	4b18      	ldr	r3, [pc, #96]	; (80044b4 <lcd16x2_write4+0x7c>)
 8004452:	6818      	ldr	r0, [r3, #0]
 8004454:	4b18      	ldr	r3, [pc, #96]	; (80044b8 <lcd16x2_write4+0x80>)
 8004456:	8819      	ldrh	r1, [r3, #0]
 8004458:	79fb      	ldrb	r3, [r7, #7]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	b2db      	uxtb	r3, r3
 8004460:	461a      	mov	r2, r3
 8004462:	f7fd ff1e 	bl	80022a2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 8004466:	4b13      	ldr	r3, [pc, #76]	; (80044b4 <lcd16x2_write4+0x7c>)
 8004468:	6818      	ldr	r0, [r3, #0]
 800446a:	4b14      	ldr	r3, [pc, #80]	; (80044bc <lcd16x2_write4+0x84>)
 800446c:	8819      	ldrh	r1, [r3, #0]
 800446e:	79fb      	ldrb	r3, [r7, #7]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	b2db      	uxtb	r3, r3
 8004476:	461a      	mov	r2, r3
 8004478:	f7fd ff13 	bl	80022a2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 800447c:	4b0d      	ldr	r3, [pc, #52]	; (80044b4 <lcd16x2_write4+0x7c>)
 800447e:	6818      	ldr	r0, [r3, #0]
 8004480:	4b0f      	ldr	r3, [pc, #60]	; (80044c0 <lcd16x2_write4+0x88>)
 8004482:	8819      	ldrh	r1, [r3, #0]
 8004484:	79fb      	ldrb	r3, [r7, #7]
 8004486:	f003 0304 	and.w	r3, r3, #4
 800448a:	b2db      	uxtb	r3, r3
 800448c:	461a      	mov	r2, r3
 800448e:	f7fd ff08 	bl	80022a2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 8004492:	4b08      	ldr	r3, [pc, #32]	; (80044b4 <lcd16x2_write4+0x7c>)
 8004494:	6818      	ldr	r0, [r3, #0]
 8004496:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <lcd16x2_write4+0x8c>)
 8004498:	8819      	ldrh	r1, [r3, #0]
 800449a:	79fb      	ldrb	r3, [r7, #7]
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	461a      	mov	r2, r3
 80044a4:	f7fd fefd 	bl	80022a2 <HAL_GPIO_WritePin>
  lcd16x2_enablePulse();
 80044a8:	f7ff fe90 	bl	80041cc <lcd16x2_enablePulse>
}
 80044ac:	bf00      	nop
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	200000a4 	.word	0x200000a4
 80044b8:	200000a8 	.word	0x200000a8
 80044bc:	200000aa 	.word	0x200000aa
 80044c0:	200000ac 	.word	0x200000ac
 80044c4:	200000ae 	.word	0x200000ae

080044c8 <lcd16x2_init_4bits>:
 * @param[in] x_pin GPIO pin (e.g. GPIO_PIN_1)
 */
void lcd16x2_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	607b      	str	r3, [r7, #4]
 80044d2:	460b      	mov	r3, r1
 80044d4:	817b      	strh	r3, [r7, #10]
 80044d6:	4613      	mov	r3, r2
 80044d8:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 80044da:	f7ff fe23 	bl	8004124 <DWT_Delay_Init>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 80044de:	4a24      	ldr	r2, [pc, #144]	; (8004570 <lcd16x2_init_4bits+0xa8>)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 80044e4:	4a23      	ldr	r2, [pc, #140]	; (8004574 <lcd16x2_init_4bits+0xac>)
 80044e6:	897b      	ldrh	r3, [r7, #10]
 80044e8:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 80044ea:	4a23      	ldr	r2, [pc, #140]	; (8004578 <lcd16x2_init_4bits+0xb0>)
 80044ec:	893b      	ldrh	r3, [r7, #8]
 80044ee:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 80044f0:	4a22      	ldr	r2, [pc, #136]	; (800457c <lcd16x2_init_4bits+0xb4>)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 80044f6:	4a22      	ldr	r2, [pc, #136]	; (8004580 <lcd16x2_init_4bits+0xb8>)
 80044f8:	8b3b      	ldrh	r3, [r7, #24]
 80044fa:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 80044fc:	4a21      	ldr	r2, [pc, #132]	; (8004584 <lcd16x2_init_4bits+0xbc>)
 80044fe:	8bbb      	ldrh	r3, [r7, #28]
 8004500:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 8004502:	4a21      	ldr	r2, [pc, #132]	; (8004588 <lcd16x2_init_4bits+0xc0>)
 8004504:	8c3b      	ldrh	r3, [r7, #32]
 8004506:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 8004508:	4a20      	ldr	r2, [pc, #128]	; (800458c <lcd16x2_init_4bits+0xc4>)
 800450a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800450c:	8013      	strh	r3, [r2, #0]
  is8BitsMode = false;
 800450e:	4b20      	ldr	r3, [pc, #128]	; (8004590 <lcd16x2_init_4bits+0xc8>)
 8004510:	2200      	movs	r2, #0
 8004512:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 8004514:	4b1f      	ldr	r3, [pc, #124]	; (8004594 <lcd16x2_init_4bits+0xcc>)
 8004516:	2228      	movs	r2, #40	; 0x28
 8004518:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 800451a:	2014      	movs	r0, #20
 800451c:	f7fd f9ec 	bl	80018f8 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_write4(0x3);
 8004520:	2003      	movs	r0, #3
 8004522:	f7ff ff89 	bl	8004438 <lcd16x2_write4>
  LCD_MS_DELAY(5);
 8004526:	2005      	movs	r0, #5
 8004528:	f7fd f9e6 	bl	80018f8 <HAL_Delay>
  lcd16x2_write4(0x3);
 800452c:	2003      	movs	r0, #3
 800452e:	f7ff ff83 	bl	8004438 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8004532:	2001      	movs	r0, #1
 8004534:	f7fd f9e0 	bl	80018f8 <HAL_Delay>
  lcd16x2_write4(0x3);
 8004538:	2003      	movs	r0, #3
 800453a:	f7ff ff7d 	bl	8004438 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 800453e:	2001      	movs	r0, #1
 8004540:	f7fd f9da 	bl	80018f8 <HAL_Delay>
  lcd16x2_write4(0x2);  //4 bit mode
 8004544:	2002      	movs	r0, #2
 8004546:	f7ff ff77 	bl	8004438 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 800454a:	2001      	movs	r0, #1
 800454c:	f7fd f9d4 	bl	80018f8 <HAL_Delay>
  //4. Function set; Enable 2 lines, Data length to 4 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8004550:	2028      	movs	r0, #40	; 0x28
 8004552:	f7ff ff51 	bl	80043f8 <lcd16x2_writeCommand>
  //3. Display control (Display ON, Cursor ON, blink cursor)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8004556:	200f      	movs	r0, #15
 8004558:	f7ff ff4e 	bl	80043f8 <lcd16x2_writeCommand>
  //4. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 800455c:	2001      	movs	r0, #1
 800455e:	f7ff ff4b 	bl	80043f8 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 8004562:	2003      	movs	r0, #3
 8004564:	f7fd f9c8 	bl	80018f8 <HAL_Delay>
}
 8004568:	bf00      	nop
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20000090 	.word	0x20000090
 8004574:	20000094 	.word	0x20000094
 8004578:	20000096 	.word	0x20000096
 800457c:	200000a4 	.word	0x200000a4
 8004580:	200000a8 	.word	0x200000a8
 8004584:	200000aa 	.word	0x200000aa
 8004588:	200000ac 	.word	0x200000ac
 800458c:	200000ae 	.word	0x200000ae
 8004590:	20000009 	.word	0x20000009
 8004594:	2000000a 	.word	0x2000000a

08004598 <lcd16x2_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_setCursor(uint8_t row, uint8_t col)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	4603      	mov	r3, r0
 80045a0:	460a      	mov	r2, r1
 80045a2:	71fb      	strb	r3, [r7, #7]
 80045a4:	4613      	mov	r3, r2
 80045a6:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 80045a8:	79bb      	ldrb	r3, [r7, #6]
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 80045b0:	79fb      	ldrb	r3, [r7, #7]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d108      	bne.n	80045c8 <lcd16x2_setCursor+0x30>
  {
    maskData |= (0x80);
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045bc:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 80045be:	7bfb      	ldrb	r3, [r7, #15]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff ff19 	bl	80043f8 <lcd16x2_writeCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_writeCommand(maskData);
  }
}
 80045c6:	e007      	b.n	80045d8 <lcd16x2_setCursor+0x40>
    maskData |= (0xc0);
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
 80045ca:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80045ce:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff ff10 	bl	80043f8 <lcd16x2_writeCommand>
}
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <lcd16x2_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_clear(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 80045e4:	2001      	movs	r0, #1
 80045e6:	f7ff ff07 	bl	80043f8 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 80045ea:	2003      	movs	r0, #3
 80045ec:	f7fd f984 	bl	80018f8 <HAL_Delay>
}
 80045f0:	bf00      	nop
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <lcd16x2_printf>:

/**
 * @brief Print to display any datatype (e.g. lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 80045f4:	b40f      	push	{r0, r1, r2, r3}
 80045f6:	b590      	push	{r4, r7, lr}
 80045f8:	b089      	sub	sp, #36	; 0x24
 80045fa:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 80045fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004600:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8004602:	f107 0308 	add.w	r3, r7, #8
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fc14 	bl	8004e38 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8004610:	2300      	movs	r3, #0
 8004612:	77fb      	strb	r3, [r7, #31]
 8004614:	e00b      	b.n	800462e <lcd16x2_printf+0x3a>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 8004616:	7ffb      	ldrb	r3, [r7, #31]
 8004618:	f107 0220 	add.w	r2, r7, #32
 800461c:	4413      	add	r3, r2
 800461e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004622:	4618      	mov	r0, r3
 8004624:	f7ff fef8 	bl	8004418 <lcd16x2_writeData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8004628:	7ffb      	ldrb	r3, [r7, #31]
 800462a:	3301      	adds	r3, #1
 800462c:	77fb      	strb	r3, [r7, #31]
 800462e:	7ffc      	ldrb	r4, [r7, #31]
 8004630:	f107 0308 	add.w	r3, r7, #8
 8004634:	4618      	mov	r0, r3
 8004636:	f7fb fd8b 	bl	8000150 <strlen>
 800463a:	4603      	mov	r3, r0
 800463c:	429c      	cmp	r4, r3
 800463e:	d202      	bcs.n	8004646 <lcd16x2_printf+0x52>
 8004640:	7ffb      	ldrb	r3, [r7, #31]
 8004642:	2b0f      	cmp	r3, #15
 8004644:	d9e7      	bls.n	8004616 <lcd16x2_printf+0x22>
  }
}
 8004646:	bf00      	nop
 8004648:	3724      	adds	r7, #36	; 0x24
 800464a:	46bd      	mov	sp, r7
 800464c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004650:	b004      	add	sp, #16
 8004652:	4770      	bx	lr

08004654 <limiter_initialize>:
 *
 * @param limiter  Ponteiro para a estrutura do limiter
 * @param fs    Frequencia de atualizacao do limiter
 */
void limiter_initialize(limiter_t *limiter, float fs, float rate)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
    limiter->fs = fs;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	601a      	str	r2, [r3, #0]
    limiter->ts = 1.0 / fs;
 8004666:	68b9      	ldr	r1, [r7, #8]
 8004668:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800466c:	f7fc fc08 	bl	8000e80 <__aeabi_fdiv>
 8004670:	4603      	mov	r3, r0
 8004672:	461a      	mov	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	605a      	str	r2, [r3, #4]
    limiter->input = 0.0;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f04f 0200 	mov.w	r2, #0
 800467e:	615a      	str	r2, [r3, #20]
    limiter->output = 0.0;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f04f 0200 	mov.w	r2, #0
 8004686:	61da      	str	r2, [r3, #28]
    limiter->rate = rate;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	609a      	str	r2, [r3, #8]
}
 800468e:	bf00      	nop
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <limiter_rate_run>:
 * @param[in] limiter Ponteiro para a estrutura do limiter.
 * @param[in] input Entrada para o limitador de taxa.
 * @return Saída limitada pelo limite de taxa.
 */
float limiter_rate_run(limiter_t *limiter, float input)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b084      	sub	sp, #16
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	6039      	str	r1, [r7, #0]
    float delta    = input - limiter->output;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	69db      	ldr	r3, [r3, #28]
 80046a4:	4619      	mov	r1, r3
 80046a6:	6838      	ldr	r0, [r7, #0]
 80046a8:	f7fc fa2c 	bl	8000b04 <__aeabi_fsub>
 80046ac:	4603      	mov	r3, r0
 80046ae:	60fb      	str	r3, [r7, #12]
    float maxDelta = limiter->rate * limiter->ts;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	4619      	mov	r1, r3
 80046ba:	4610      	mov	r0, r2
 80046bc:	f7fc fb2c 	bl	8000d18 <__aeabi_fmul>
 80046c0:	4603      	mov	r3, r0
 80046c2:	60bb      	str	r3, [r7, #8]

    if (delta > maxDelta) {
 80046c4:	68b9      	ldr	r1, [r7, #8]
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f7fc fce2 	bl	8001090 <__aeabi_fcmpgt>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d008      	beq.n	80046e4 <limiter_rate_run+0x4e>
        input = limiter->output + maxDelta;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	4619      	mov	r1, r3
 80046d8:	68b8      	ldr	r0, [r7, #8]
 80046da:	f7fc fa15 	bl	8000b08 <__addsf3>
 80046de:	4603      	mov	r3, r0
 80046e0:	603b      	str	r3, [r7, #0]
 80046e2:	e011      	b.n	8004708 <limiter_rate_run+0x72>
    } else if (delta < -maxDelta) {
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80046ea:	4619      	mov	r1, r3
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f7fc fcb1 	bl	8001054 <__aeabi_fcmplt>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d007      	beq.n	8004708 <limiter_rate_run+0x72>
        input = limiter->output - maxDelta;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fc fa00 	bl	8000b04 <__aeabi_fsub>
 8004704:	4603      	mov	r3, r0
 8004706:	603b      	str	r3, [r7, #0]
    }

    limiter->output = input;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	61da      	str	r2, [r3, #28]
    return limiter->output;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69db      	ldr	r3, [r3, #28]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	0000      	movs	r0, r0
 800471c:	0000      	movs	r0, r0
	...

08004720 <so_filter_prewarp_frequency>:
 *
 * @param   fc              Frequencia de atualizacao do so_filter em Hz
 * @return  wp              Retorna a frequencia de corte pre distorcida em radianos
 */
void so_filter_prewarp_frequency(so_filter_t * so_filter, float fc)
{
 8004720:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004724:	b082      	sub	sp, #8
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	6039      	str	r1, [r7, #0]
    so_filter->fc = fc;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	615a      	str	r2, [r3, #20]
    so_filter->wc = 2.0 * so_filter->fs * tan( 3.1415926535897932384626433832795 * fc * so_filter->ts );
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	4618      	mov	r0, r3
 8004738:	f7fb fe76 	bl	8000428 <__aeabi_f2d>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	f7fb fd14 	bl	800016c <__adddf3>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	4614      	mov	r4, r2
 800474a:	461d      	mov	r5, r3
 800474c:	6838      	ldr	r0, [r7, #0]
 800474e:	f7fb fe6b 	bl	8000428 <__aeabi_f2d>
 8004752:	a317      	add	r3, pc, #92	; (adr r3, 80047b0 <so_filter_prewarp_frequency+0x90>)
 8004754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004758:	f7fb febe 	bl	80004d8 <__aeabi_dmul>
 800475c:	4602      	mov	r2, r0
 800475e:	460b      	mov	r3, r1
 8004760:	4690      	mov	r8, r2
 8004762:	4699      	mov	r9, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	4618      	mov	r0, r3
 800476a:	f7fb fe5d 	bl	8000428 <__aeabi_f2d>
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	4640      	mov	r0, r8
 8004774:	4649      	mov	r1, r9
 8004776:	f7fb feaf 	bl	80004d8 <__aeabi_dmul>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4610      	mov	r0, r2
 8004780:	4619      	mov	r1, r3
 8004782:	f000 ffc3 	bl	800570c <tan>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	4620      	mov	r0, r4
 800478c:	4629      	mov	r1, r5
 800478e:	f7fb fea3 	bl	80004d8 <__aeabi_dmul>
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	4610      	mov	r0, r2
 8004798:	4619      	mov	r1, r3
 800479a:	f7fc f95f 	bl	8000a5c <__aeabi_d2f>
 800479e:	4602      	mov	r2, r0
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	619a      	str	r2, [r3, #24]
}
 80047a4:	bf00      	nop
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80047ae:	bf00      	nop
 80047b0:	54442d18 	.word	0x54442d18
 80047b4:	400921fb 	.word	0x400921fb

080047b8 <so_filter_update_coeff_lowpass>:
 * @param fs            Frequencia de atualizacao do so_filter em Hz
 * @param Q             Fator de qualidade do filtro
 * @param fc            Frequencia de corte em Hertz
 */
void so_filter_update_coeff_lowpass(so_filter_t * so_filter)
{
 80047b8:	b5b0      	push	{r4, r5, r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
    //!< Variaveis auxiliares para minimizar processamento
    float a = so_filter->ts * so_filter->ts * so_filter->wc *  so_filter->wc;   //!< (ts*wc)^2
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	4619      	mov	r1, r3
 80047ca:	4610      	mov	r0, r2
 80047cc:	f7fc faa4 	bl	8000d18 <__aeabi_fmul>
 80047d0:	4603      	mov	r3, r0
 80047d2:	461a      	mov	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	4619      	mov	r1, r3
 80047da:	4610      	mov	r0, r2
 80047dc:	f7fc fa9c 	bl	8000d18 <__aeabi_fmul>
 80047e0:	4603      	mov	r3, r0
 80047e2:	461a      	mov	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	4619      	mov	r1, r3
 80047ea:	4610      	mov	r0, r2
 80047ec:	f7fc fa94 	bl	8000d18 <__aeabi_fmul>
 80047f0:	4603      	mov	r3, r0
 80047f2:	617b      	str	r3, [r7, #20]
    float b = (2.0 * so_filter->ts * so_filter->wc) / so_filter->Q;             //!< 2*ts*wc/Q
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7fb fe15 	bl	8000428 <__aeabi_f2d>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	f7fb fcb3 	bl	800016c <__adddf3>
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
 800480a:	4614      	mov	r4, r2
 800480c:	461d      	mov	r5, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	4618      	mov	r0, r3
 8004814:	f7fb fe08 	bl	8000428 <__aeabi_f2d>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4620      	mov	r0, r4
 800481e:	4629      	mov	r1, r5
 8004820:	f7fb fe5a 	bl	80004d8 <__aeabi_dmul>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4614      	mov	r4, r2
 800482a:	461d      	mov	r5, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	4618      	mov	r0, r3
 8004832:	f7fb fdf9 	bl	8000428 <__aeabi_f2d>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4620      	mov	r0, r4
 800483c:	4629      	mov	r1, r5
 800483e:	f7fb ff75 	bl	800072c <__aeabi_ddiv>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4610      	mov	r0, r2
 8004848:	4619      	mov	r1, r3
 800484a:	f7fc f907 	bl	8000a5c <__aeabi_d2f>
 800484e:	4603      	mov	r3, r0
 8004850:	613b      	str	r3, [r7, #16]
    float aux_div = 1.0 / ( 4 + b + a );                                        //!< 1 / (4 + 2*ts*wc/Q + (ts*wc)^2)
 8004852:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8004856:	6938      	ldr	r0, [r7, #16]
 8004858:	f7fc f956 	bl	8000b08 <__addsf3>
 800485c:	4603      	mov	r3, r0
 800485e:	6979      	ldr	r1, [r7, #20]
 8004860:	4618      	mov	r0, r3
 8004862:	f7fc f951 	bl	8000b08 <__addsf3>
 8004866:	4603      	mov	r3, r0
 8004868:	4619      	mov	r1, r3
 800486a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800486e:	f7fc fb07 	bl	8000e80 <__aeabi_fdiv>
 8004872:	4603      	mov	r3, r0
 8004874:	60fb      	str	r3, [r7, #12]

    //!< Coeficientes do filtro de eixo direto
    so_filter->coeffs.a1 = ( (2.0 * a) - 8) * aux_div;
 8004876:	6978      	ldr	r0, [r7, #20]
 8004878:	f7fb fdd6 	bl	8000428 <__aeabi_f2d>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	f7fb fc74 	bl	800016c <__adddf3>
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	4610      	mov	r0, r2
 800488a:	4619      	mov	r1, r3
 800488c:	f04f 0200 	mov.w	r2, #0
 8004890:	4b22      	ldr	r3, [pc, #136]	; (800491c <so_filter_update_coeff_lowpass+0x164>)
 8004892:	f7fb fc69 	bl	8000168 <__aeabi_dsub>
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	4614      	mov	r4, r2
 800489c:	461d      	mov	r5, r3
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f7fb fdc2 	bl	8000428 <__aeabi_f2d>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4620      	mov	r0, r4
 80048aa:	4629      	mov	r1, r5
 80048ac:	f7fb fe14 	bl	80004d8 <__aeabi_dmul>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4610      	mov	r0, r2
 80048b6:	4619      	mov	r1, r3
 80048b8:	f7fc f8d0 	bl	8000a5c <__aeabi_d2f>
 80048bc:	4602      	mov	r2, r0
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	61da      	str	r2, [r3, #28]
    so_filter->coeffs.a2 = (a - b + 4)      * aux_div;
 80048c2:	6939      	ldr	r1, [r7, #16]
 80048c4:	6978      	ldr	r0, [r7, #20]
 80048c6:	f7fc f91d 	bl	8000b04 <__aeabi_fsub>
 80048ca:	4603      	mov	r3, r0
 80048cc:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7fc f919 	bl	8000b08 <__addsf3>
 80048d6:	4603      	mov	r3, r0
 80048d8:	68f9      	ldr	r1, [r7, #12]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fc fa1c 	bl	8000d18 <__aeabi_fmul>
 80048e0:	4603      	mov	r3, r0
 80048e2:	461a      	mov	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	621a      	str	r2, [r3, #32]
    so_filter->coeffs.b0 = a                * aux_div;
 80048e8:	68f9      	ldr	r1, [r7, #12]
 80048ea:	6978      	ldr	r0, [r7, #20]
 80048ec:	f7fc fa14 	bl	8000d18 <__aeabi_fmul>
 80048f0:	4603      	mov	r3, r0
 80048f2:	461a      	mov	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	625a      	str	r2, [r3, #36]	; 0x24
    so_filter->coeffs.b1 = 2.0 * so_filter->coeffs.b0;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	4619      	mov	r1, r3
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fc f902 	bl	8000b08 <__addsf3>
 8004904:	4603      	mov	r3, r0
 8004906:	461a      	mov	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	629a      	str	r2, [r3, #40]	; 0x28
    so_filter->coeffs.b2 = so_filter->coeffs.b0;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004914:	bf00      	nop
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bdb0      	pop	{r4, r5, r7, pc}
 800491c:	40200000 	.word	0x40200000

08004920 <so_filter_update_coeff_notch>:
 * @param fs            Frequencia de atualizacao do so_filter em Hz
 * @param Q             Fator de qualidade do filtro
 * @param fc            Frequencia de corte em Hertz
 */
void so_filter_update_coeff_notch(so_filter_t * so_filter)
{
 8004920:	b5b0      	push	{r4, r5, r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
    //!< Variaveis auxiliares para minimizar processamento
    float a = so_filter->ts * so_filter->ts * so_filter->wc *  so_filter->wc;   //!< (ts*wc)^2
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691a      	ldr	r2, [r3, #16]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	4619      	mov	r1, r3
 8004932:	4610      	mov	r0, r2
 8004934:	f7fc f9f0 	bl	8000d18 <__aeabi_fmul>
 8004938:	4603      	mov	r3, r0
 800493a:	461a      	mov	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	4619      	mov	r1, r3
 8004942:	4610      	mov	r0, r2
 8004944:	f7fc f9e8 	bl	8000d18 <__aeabi_fmul>
 8004948:	4603      	mov	r3, r0
 800494a:	461a      	mov	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	4619      	mov	r1, r3
 8004952:	4610      	mov	r0, r2
 8004954:	f7fc f9e0 	bl	8000d18 <__aeabi_fmul>
 8004958:	4603      	mov	r3, r0
 800495a:	617b      	str	r3, [r7, #20]
    float b = 2.0 * so_filter->ts * so_filter->wc / so_filter->Q;               //!< 2*ts*wc/Q
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	4618      	mov	r0, r3
 8004962:	f7fb fd61 	bl	8000428 <__aeabi_f2d>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	f7fb fbff 	bl	800016c <__adddf3>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	4614      	mov	r4, r2
 8004974:	461d      	mov	r5, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	4618      	mov	r0, r3
 800497c:	f7fb fd54 	bl	8000428 <__aeabi_f2d>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	4620      	mov	r0, r4
 8004986:	4629      	mov	r1, r5
 8004988:	f7fb fda6 	bl	80004d8 <__aeabi_dmul>
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	4614      	mov	r4, r2
 8004992:	461d      	mov	r5, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	4618      	mov	r0, r3
 800499a:	f7fb fd45 	bl	8000428 <__aeabi_f2d>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	4620      	mov	r0, r4
 80049a4:	4629      	mov	r1, r5
 80049a6:	f7fb fec1 	bl	800072c <__aeabi_ddiv>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4610      	mov	r0, r2
 80049b0:	4619      	mov	r1, r3
 80049b2:	f7fc f853 	bl	8000a5c <__aeabi_d2f>
 80049b6:	4603      	mov	r3, r0
 80049b8:	613b      	str	r3, [r7, #16]
    float c = a + 4;                                                            //!< (ts*wc)^2 + 4
 80049ba:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80049be:	6978      	ldr	r0, [r7, #20]
 80049c0:	f7fc f8a2 	bl	8000b08 <__addsf3>
 80049c4:	4603      	mov	r3, r0
 80049c6:	60fb      	str	r3, [r7, #12]
    float aux_div = 1.0 / ( b + c );                                            //!< 1 / (4 + 2*ts*wc/Q + (ts*wc)^2)
 80049c8:	68f9      	ldr	r1, [r7, #12]
 80049ca:	6938      	ldr	r0, [r7, #16]
 80049cc:	f7fc f89c 	bl	8000b08 <__addsf3>
 80049d0:	4603      	mov	r3, r0
 80049d2:	4619      	mov	r1, r3
 80049d4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80049d8:	f7fc fa52 	bl	8000e80 <__aeabi_fdiv>
 80049dc:	4603      	mov	r3, r0
 80049de:	60bb      	str	r3, [r7, #8]

    //!< Coeficientes do filtro de eixo direto
    so_filter->coeffs.a1 = (2.0 * a - 8)    * aux_div;
 80049e0:	6978      	ldr	r0, [r7, #20]
 80049e2:	f7fb fd21 	bl	8000428 <__aeabi_f2d>
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	f7fb fbbf 	bl	800016c <__adddf3>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	4610      	mov	r0, r2
 80049f4:	4619      	mov	r1, r3
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	4b1d      	ldr	r3, [pc, #116]	; (8004a70 <so_filter_update_coeff_notch+0x150>)
 80049fc:	f7fb fbb4 	bl	8000168 <__aeabi_dsub>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	4614      	mov	r4, r2
 8004a06:	461d      	mov	r5, r3
 8004a08:	68b8      	ldr	r0, [r7, #8]
 8004a0a:	f7fb fd0d 	bl	8000428 <__aeabi_f2d>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	460b      	mov	r3, r1
 8004a12:	4620      	mov	r0, r4
 8004a14:	4629      	mov	r1, r5
 8004a16:	f7fb fd5f 	bl	80004d8 <__aeabi_dmul>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	4610      	mov	r0, r2
 8004a20:	4619      	mov	r1, r3
 8004a22:	f7fc f81b 	bl	8000a5c <__aeabi_d2f>
 8004a26:	4602      	mov	r2, r0
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	61da      	str	r2, [r3, #28]
    so_filter->coeffs.a2 = (c - b)          * aux_div;
 8004a2c:	6939      	ldr	r1, [r7, #16]
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f7fc f868 	bl	8000b04 <__aeabi_fsub>
 8004a34:	4603      	mov	r3, r0
 8004a36:	68b9      	ldr	r1, [r7, #8]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fc f96d 	bl	8000d18 <__aeabi_fmul>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	461a      	mov	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	621a      	str	r2, [r3, #32]
    so_filter->coeffs.b0 = c                * aux_div;
 8004a46:	68b9      	ldr	r1, [r7, #8]
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f7fc f965 	bl	8000d18 <__aeabi_fmul>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	461a      	mov	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	625a      	str	r2, [r3, #36]	; 0x24
    so_filter->coeffs.b1 = so_filter->coeffs.a1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	69da      	ldr	r2, [r3, #28]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	629a      	str	r2, [r3, #40]	; 0x28
    so_filter->coeffs.b2 = so_filter->coeffs.b0;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004a66:	bf00      	nop
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	40200000 	.word	0x40200000

08004a74 <so_filter_run>:
 * @brief Roda a estrutura do filtro SO
 *
 * @param so_filter Ponteiro para a estrutura do filtro
 * @param input     Entrada do filtro
 */
float so_filter_run(so_filter_t * so_filter, float input){
 8004a74:	b590      	push	{r4, r7, lr}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
    so_filter->states.u2 = so_filter->states.u1;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	639a      	str	r2, [r3, #56]	; 0x38
    so_filter->states.u1 = so_filter->states.u0;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	635a      	str	r2, [r3, #52]	; 0x34
    so_filter->states.u0 = input;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	631a      	str	r2, [r3, #48]	; 0x30
    so_filter->states.y2 = so_filter->states.y1;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	645a      	str	r2, [r3, #68]	; 0x44
    so_filter->states.y1 = so_filter->states.y0;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	641a      	str	r2, [r3, #64]	; 0x40
    so_filter->states.y0 =  so_filter->states.u0 * so_filter->coeffs.b0 +
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	4619      	mov	r1, r3
 8004aae:	4610      	mov	r0, r2
 8004ab0:	f7fc f932 	bl	8000d18 <__aeabi_fmul>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	461c      	mov	r4, r3
                            so_filter->states.u1 * so_filter->coeffs.b1 +
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	f7fc f928 	bl	8000d18 <__aeabi_fmul>
 8004ac8:	4603      	mov	r3, r0
    so_filter->states.y0 =  so_filter->states.u0 * so_filter->coeffs.b0 +
 8004aca:	4619      	mov	r1, r3
 8004acc:	4620      	mov	r0, r4
 8004ace:	f7fc f81b 	bl	8000b08 <__addsf3>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	461c      	mov	r4, r3
                            so_filter->states.u2 * so_filter->coeffs.b2 -
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	f7fc f919 	bl	8000d18 <__aeabi_fmul>
 8004ae6:	4603      	mov	r3, r0
                            so_filter->states.u1 * so_filter->coeffs.b1 +
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4620      	mov	r0, r4
 8004aec:	f7fc f80c 	bl	8000b08 <__addsf3>
 8004af0:	4603      	mov	r3, r0
 8004af2:	461c      	mov	r4, r3
                            so_filter->states.y2 * so_filter->coeffs.a2 -
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	4619      	mov	r1, r3
 8004afe:	4610      	mov	r0, r2
 8004b00:	f7fc f90a 	bl	8000d18 <__aeabi_fmul>
 8004b04:	4603      	mov	r3, r0
                            so_filter->states.u2 * so_filter->coeffs.b2 -
 8004b06:	4619      	mov	r1, r3
 8004b08:	4620      	mov	r0, r4
 8004b0a:	f7fb fffb 	bl	8000b04 <__aeabi_fsub>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	461c      	mov	r4, r3
                            so_filter->states.y1 * so_filter->coeffs.a1;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	f7fc f8fb 	bl	8000d18 <__aeabi_fmul>
 8004b22:	4603      	mov	r3, r0
                            so_filter->states.y2 * so_filter->coeffs.a2 -
 8004b24:	4619      	mov	r1, r3
 8004b26:	4620      	mov	r0, r4
 8004b28:	f7fb ffec 	bl	8000b04 <__aeabi_fsub>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	461a      	mov	r2, r3
    so_filter->states.y0 =  so_filter->states.u0 * so_filter->coeffs.b0 +
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	63da      	str	r2, [r3, #60]	; 0x3c
    return so_filter->states.y0;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd90      	pop	{r4, r7, pc}

08004b40 <so_filter_initialize>:
 * @param Q             Fator de qualidade do filtro
 * @param fc            Frequencia de corte em Hertz
 * @param Type          Tipo do filtro: 0 lowpass, 1 bandpass, 2 notch e 3 highpass
 */
void so_filter_initialize(so_filter_t * so_filter, float fs, float fc, float Q, int type, int is_prewarped)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
    //!< Atualiza os parametros usado no filtro
    so_filter->type = type;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	601a      	str	r2, [r3, #0]
    so_filter->Q  = Q;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	609a      	str	r2, [r3, #8]
    so_filter->fs = fs;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	60da      	str	r2, [r3, #12]
    so_filter->ts = 1.0 / fs;
 8004b60:	68b9      	ldr	r1, [r7, #8]
 8004b62:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004b66:	f7fc f98b 	bl	8000e80 <__aeabi_fdiv>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	611a      	str	r2, [r3, #16]
    so_filter->fc = fc;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	615a      	str	r2, [r3, #20]
    so_filter->is_prewarped = is_prewarped;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	69fa      	ldr	r2, [r7, #28]
 8004b7c:	605a      	str	r2, [r3, #4]

    if (is_prewarped){
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d004      	beq.n	8004b8e <so_filter_initialize+0x4e>
        so_filter_prewarp_frequency(so_filter, fc);
 8004b84:	6879      	ldr	r1, [r7, #4]
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f7ff fdca 	bl	8004720 <so_filter_prewarp_frequency>
    }else{
        so_filter->wc = 6.28318530717958647692528676655900 * fc;
    }
}
 8004b8c:	e010      	b.n	8004bb0 <so_filter_initialize+0x70>
        so_filter->wc = 6.28318530717958647692528676655900 * fc;
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7fb fc4a 	bl	8000428 <__aeabi_f2d>
 8004b94:	a308      	add	r3, pc, #32	; (adr r3, 8004bb8 <so_filter_initialize+0x78>)
 8004b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9a:	f7fb fc9d 	bl	80004d8 <__aeabi_dmul>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	4610      	mov	r0, r2
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	f7fb ff59 	bl	8000a5c <__aeabi_d2f>
 8004baa:	4602      	mov	r2, r0
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	619a      	str	r2, [r3, #24]
}
 8004bb0:	bf00      	nop
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	54442d18 	.word	0x54442d18
 8004bbc:	401921fb 	.word	0x401921fb

08004bc0 <WaveGenerator_update>:
 * @param SineWave Ponteiro para estrutura WaveGenerator
 *
 * @warning
 */
void WaveGenerator_update(WaveGenerator_t * SineWave, float Fs, float Fg, float A)
{
 8004bc0:	b5b0      	push	{r4, r5, r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
 8004bcc:	603b      	str	r3, [r7, #0]
    //!< Atualiza frequencia da integra��o do gerador
    SineWave->Fs = Fs;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	601a      	str	r2, [r3, #0]
    //!< Atualiza periodo da integra��o do gerador
    SineWave->Ts = 1.0 / Fs;
 8004bd4:	68b9      	ldr	r1, [r7, #8]
 8004bd6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004bda:	f7fc f951 	bl	8000e80 <__aeabi_fdiv>
 8004bde:	4603      	mov	r3, r0
 8004be0:	461a      	mov	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	605a      	str	r2, [r3, #4]
    //!< Atualiza Passo de integra��o
    SineWave->Delta = TWOPI * Fg * SineWave->Ts;
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7fb fc1e 	bl	8000428 <__aeabi_f2d>
 8004bec:	a314      	add	r3, pc, #80	; (adr r3, 8004c40 <WaveGenerator_update+0x80>)
 8004bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf2:	f7fb fc71 	bl	80004d8 <__aeabi_dmul>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4614      	mov	r4, r2
 8004bfc:	461d      	mov	r5, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fb fc10 	bl	8000428 <__aeabi_f2d>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	4629      	mov	r1, r5
 8004c10:	f7fb fc62 	bl	80004d8 <__aeabi_dmul>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4610      	mov	r0, r2
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	f7fb ff1e 	bl	8000a5c <__aeabi_d2f>
 8004c20:	4602      	mov	r2, r0
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	609a      	str	r2, [r3, #8]
    //!< Atualiza frequencia fundamental da gera��o
    SineWave->Fg = Fg;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	611a      	str	r2, [r3, #16]
    //!< Atualiza amplitude do sinal de gera��o
    SineWave->A = A;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	615a      	str	r2, [r3, #20]

}
 8004c32:	bf00      	nop
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bdb0      	pop	{r4, r5, r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	f3af 8000 	nop.w
 8004c40:	54442d18 	.word	0x54442d18
 8004c44:	401921fb 	.word	0x401921fb

08004c48 <WaveGenerator_sine_run>:
 * @param SineWave Ponteiro para estrutura WaveGenerator
 *
 * @warning
 */
void WaveGenerator_sine_run(WaveGenerator_t * SineWave)
{
 8004c48:	b5b0      	push	{r4, r5, r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
    //!< Atualiza tempo
    SineWave->t = SineWave->t + SineWave->Delta;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4610      	mov	r0, r2
 8004c5c:	f7fb ff54 	bl	8000b08 <__addsf3>
 8004c60:	4603      	mov	r3, r0
 8004c62:	461a      	mov	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	60da      	str	r2, [r3, #12]

    //!< Reseta quando complar um ciclo
    if (SineWave->t >= TWOPI){
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fb fbdb 	bl	8000428 <__aeabi_f2d>
 8004c72:	a347      	add	r3, pc, #284	; (adr r3, 8004d90 <WaveGenerator_sine_run+0x148>)
 8004c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c78:	f7fb feb4 	bl	80009e4 <__aeabi_dcmpge>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d012      	beq.n	8004ca8 <WaveGenerator_sine_run+0x60>
        SineWave->t -= TWOPI;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fb fbce 	bl	8000428 <__aeabi_f2d>
 8004c8c:	a340      	add	r3, pc, #256	; (adr r3, 8004d90 <WaveGenerator_sine_run+0x148>)
 8004c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c92:	f7fb fa69 	bl	8000168 <__aeabi_dsub>
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	f7fb fedd 	bl	8000a5c <__aeabi_d2f>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	60da      	str	r2, [r3, #12]
    }

    //!< Atualiza as saidas

    SineWave->a = SineWave->A * sin(SineWave->t + THETA_A);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fb fbbb 	bl	8000428 <__aeabi_f2d>
 8004cb2:	4604      	mov	r4, r0
 8004cb4:	460d      	mov	r5, r1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fb fbb4 	bl	8000428 <__aeabi_f2d>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	f000 fcda 	bl	8005680 <sin>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	f7fb fc00 	bl	80004d8 <__aeabi_dmul>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4610      	mov	r0, r2
 8004cde:	4619      	mov	r1, r3
 8004ce0:	f7fb febc 	bl	8000a5c <__aeabi_d2f>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	621a      	str	r2, [r3, #32]
    SineWave->b = SineWave->A * sin(SineWave->t + THETA_B);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fb fb9a 	bl	8000428 <__aeabi_f2d>
 8004cf4:	4604      	mov	r4, r0
 8004cf6:	460d      	mov	r5, r1
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7fb fb93 	bl	8000428 <__aeabi_f2d>
 8004d02:	a325      	add	r3, pc, #148	; (adr r3, 8004d98 <WaveGenerator_sine_run+0x150>)
 8004d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d08:	f7fb fa2e 	bl	8000168 <__aeabi_dsub>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4610      	mov	r0, r2
 8004d12:	4619      	mov	r1, r3
 8004d14:	f000 fcb4 	bl	8005680 <sin>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	4629      	mov	r1, r5
 8004d20:	f7fb fbda 	bl	80004d8 <__aeabi_dmul>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4610      	mov	r0, r2
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	f7fb fe96 	bl	8000a5c <__aeabi_d2f>
 8004d30:	4602      	mov	r2, r0
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	625a      	str	r2, [r3, #36]	; 0x24
    SineWave->c = SineWave->A * sin(SineWave->t + THETA_C);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7fb fb74 	bl	8000428 <__aeabi_f2d>
 8004d40:	4604      	mov	r4, r0
 8004d42:	460d      	mov	r5, r1
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fb fb6d 	bl	8000428 <__aeabi_f2d>
 8004d4e:	a314      	add	r3, pc, #80	; (adr r3, 8004da0 <WaveGenerator_sine_run+0x158>)
 8004d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d54:	f7fb fa08 	bl	8000168 <__aeabi_dsub>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	4619      	mov	r1, r3
 8004d60:	f000 fc8e 	bl	8005680 <sin>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	4620      	mov	r0, r4
 8004d6a:	4629      	mov	r1, r5
 8004d6c:	f7fb fbb4 	bl	80004d8 <__aeabi_dmul>
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	4610      	mov	r0, r2
 8004d76:	4619      	mov	r1, r3
 8004d78:	f7fb fe70 	bl	8000a5c <__aeabi_d2f>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	629a      	str	r2, [r3, #40]	; 0x28

}
 8004d82:	bf00      	nop
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bdb0      	pop	{r4, r5, r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	f3af 8000 	nop.w
 8004d90:	54442d18 	.word	0x54442d18
 8004d94:	401921fb 	.word	0x401921fb
 8004d98:	382d7365 	.word	0x382d7365
 8004d9c:	4010c152 	.word	0x4010c152
 8004da0:	382d7365 	.word	0x382d7365
 8004da4:	4020c152 	.word	0x4020c152

08004da8 <__errno>:
 8004da8:	4b01      	ldr	r3, [pc, #4]	; (8004db0 <__errno+0x8>)
 8004daa:	6818      	ldr	r0, [r3, #0]
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	2000000c 	.word	0x2000000c

08004db4 <__libc_init_array>:
 8004db4:	b570      	push	{r4, r5, r6, lr}
 8004db6:	2600      	movs	r6, #0
 8004db8:	4d0c      	ldr	r5, [pc, #48]	; (8004dec <__libc_init_array+0x38>)
 8004dba:	4c0d      	ldr	r4, [pc, #52]	; (8004df0 <__libc_init_array+0x3c>)
 8004dbc:	1b64      	subs	r4, r4, r5
 8004dbe:	10a4      	asrs	r4, r4, #2
 8004dc0:	42a6      	cmp	r6, r4
 8004dc2:	d109      	bne.n	8004dd8 <__libc_init_array+0x24>
 8004dc4:	f001 fe76 	bl	8006ab4 <_init>
 8004dc8:	2600      	movs	r6, #0
 8004dca:	4d0a      	ldr	r5, [pc, #40]	; (8004df4 <__libc_init_array+0x40>)
 8004dcc:	4c0a      	ldr	r4, [pc, #40]	; (8004df8 <__libc_init_array+0x44>)
 8004dce:	1b64      	subs	r4, r4, r5
 8004dd0:	10a4      	asrs	r4, r4, #2
 8004dd2:	42a6      	cmp	r6, r4
 8004dd4:	d105      	bne.n	8004de2 <__libc_init_array+0x2e>
 8004dd6:	bd70      	pop	{r4, r5, r6, pc}
 8004dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ddc:	4798      	blx	r3
 8004dde:	3601      	adds	r6, #1
 8004de0:	e7ee      	b.n	8004dc0 <__libc_init_array+0xc>
 8004de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de6:	4798      	blx	r3
 8004de8:	3601      	adds	r6, #1
 8004dea:	e7f2      	b.n	8004dd2 <__libc_init_array+0x1e>
 8004dec:	08006d88 	.word	0x08006d88
 8004df0:	08006d88 	.word	0x08006d88
 8004df4:	08006d88 	.word	0x08006d88
 8004df8:	08006d8c 	.word	0x08006d8c

08004dfc <memset>:
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	4402      	add	r2, r0
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d100      	bne.n	8004e06 <memset+0xa>
 8004e04:	4770      	bx	lr
 8004e06:	f803 1b01 	strb.w	r1, [r3], #1
 8004e0a:	e7f9      	b.n	8004e00 <memset+0x4>

08004e0c <_vsiprintf_r>:
 8004e0c:	b500      	push	{lr}
 8004e0e:	b09b      	sub	sp, #108	; 0x6c
 8004e10:	9100      	str	r1, [sp, #0]
 8004e12:	9104      	str	r1, [sp, #16]
 8004e14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e18:	9105      	str	r1, [sp, #20]
 8004e1a:	9102      	str	r1, [sp, #8]
 8004e1c:	4905      	ldr	r1, [pc, #20]	; (8004e34 <_vsiprintf_r+0x28>)
 8004e1e:	9103      	str	r1, [sp, #12]
 8004e20:	4669      	mov	r1, sp
 8004e22:	f000 f86f 	bl	8004f04 <_svfiprintf_r>
 8004e26:	2200      	movs	r2, #0
 8004e28:	9b00      	ldr	r3, [sp, #0]
 8004e2a:	701a      	strb	r2, [r3, #0]
 8004e2c:	b01b      	add	sp, #108	; 0x6c
 8004e2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e32:	bf00      	nop
 8004e34:	ffff0208 	.word	0xffff0208

08004e38 <vsiprintf>:
 8004e38:	4613      	mov	r3, r2
 8004e3a:	460a      	mov	r2, r1
 8004e3c:	4601      	mov	r1, r0
 8004e3e:	4802      	ldr	r0, [pc, #8]	; (8004e48 <vsiprintf+0x10>)
 8004e40:	6800      	ldr	r0, [r0, #0]
 8004e42:	f7ff bfe3 	b.w	8004e0c <_vsiprintf_r>
 8004e46:	bf00      	nop
 8004e48:	2000000c 	.word	0x2000000c

08004e4c <__ssputs_r>:
 8004e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e50:	688e      	ldr	r6, [r1, #8]
 8004e52:	4682      	mov	sl, r0
 8004e54:	429e      	cmp	r6, r3
 8004e56:	460c      	mov	r4, r1
 8004e58:	4690      	mov	r8, r2
 8004e5a:	461f      	mov	r7, r3
 8004e5c:	d838      	bhi.n	8004ed0 <__ssputs_r+0x84>
 8004e5e:	898a      	ldrh	r2, [r1, #12]
 8004e60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e64:	d032      	beq.n	8004ecc <__ssputs_r+0x80>
 8004e66:	6825      	ldr	r5, [r4, #0]
 8004e68:	6909      	ldr	r1, [r1, #16]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	eba5 0901 	sub.w	r9, r5, r1
 8004e70:	6965      	ldr	r5, [r4, #20]
 8004e72:	444b      	add	r3, r9
 8004e74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e7c:	106d      	asrs	r5, r5, #1
 8004e7e:	429d      	cmp	r5, r3
 8004e80:	bf38      	it	cc
 8004e82:	461d      	movcc	r5, r3
 8004e84:	0553      	lsls	r3, r2, #21
 8004e86:	d531      	bpl.n	8004eec <__ssputs_r+0xa0>
 8004e88:	4629      	mov	r1, r5
 8004e8a:	f000 fb53 	bl	8005534 <_malloc_r>
 8004e8e:	4606      	mov	r6, r0
 8004e90:	b950      	cbnz	r0, 8004ea8 <__ssputs_r+0x5c>
 8004e92:	230c      	movs	r3, #12
 8004e94:	f04f 30ff 	mov.w	r0, #4294967295
 8004e98:	f8ca 3000 	str.w	r3, [sl]
 8004e9c:	89a3      	ldrh	r3, [r4, #12]
 8004e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ea2:	81a3      	strh	r3, [r4, #12]
 8004ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ea8:	464a      	mov	r2, r9
 8004eaa:	6921      	ldr	r1, [r4, #16]
 8004eac:	f000 face 	bl	800544c <memcpy>
 8004eb0:	89a3      	ldrh	r3, [r4, #12]
 8004eb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eba:	81a3      	strh	r3, [r4, #12]
 8004ebc:	6126      	str	r6, [r4, #16]
 8004ebe:	444e      	add	r6, r9
 8004ec0:	6026      	str	r6, [r4, #0]
 8004ec2:	463e      	mov	r6, r7
 8004ec4:	6165      	str	r5, [r4, #20]
 8004ec6:	eba5 0509 	sub.w	r5, r5, r9
 8004eca:	60a5      	str	r5, [r4, #8]
 8004ecc:	42be      	cmp	r6, r7
 8004ece:	d900      	bls.n	8004ed2 <__ssputs_r+0x86>
 8004ed0:	463e      	mov	r6, r7
 8004ed2:	4632      	mov	r2, r6
 8004ed4:	4641      	mov	r1, r8
 8004ed6:	6820      	ldr	r0, [r4, #0]
 8004ed8:	f000 fac6 	bl	8005468 <memmove>
 8004edc:	68a3      	ldr	r3, [r4, #8]
 8004ede:	6822      	ldr	r2, [r4, #0]
 8004ee0:	1b9b      	subs	r3, r3, r6
 8004ee2:	4432      	add	r2, r6
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	60a3      	str	r3, [r4, #8]
 8004ee8:	6022      	str	r2, [r4, #0]
 8004eea:	e7db      	b.n	8004ea4 <__ssputs_r+0x58>
 8004eec:	462a      	mov	r2, r5
 8004eee:	f000 fb7b 	bl	80055e8 <_realloc_r>
 8004ef2:	4606      	mov	r6, r0
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	d1e1      	bne.n	8004ebc <__ssputs_r+0x70>
 8004ef8:	4650      	mov	r0, sl
 8004efa:	6921      	ldr	r1, [r4, #16]
 8004efc:	f000 face 	bl	800549c <_free_r>
 8004f00:	e7c7      	b.n	8004e92 <__ssputs_r+0x46>
	...

08004f04 <_svfiprintf_r>:
 8004f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f08:	4698      	mov	r8, r3
 8004f0a:	898b      	ldrh	r3, [r1, #12]
 8004f0c:	4607      	mov	r7, r0
 8004f0e:	061b      	lsls	r3, r3, #24
 8004f10:	460d      	mov	r5, r1
 8004f12:	4614      	mov	r4, r2
 8004f14:	b09d      	sub	sp, #116	; 0x74
 8004f16:	d50e      	bpl.n	8004f36 <_svfiprintf_r+0x32>
 8004f18:	690b      	ldr	r3, [r1, #16]
 8004f1a:	b963      	cbnz	r3, 8004f36 <_svfiprintf_r+0x32>
 8004f1c:	2140      	movs	r1, #64	; 0x40
 8004f1e:	f000 fb09 	bl	8005534 <_malloc_r>
 8004f22:	6028      	str	r0, [r5, #0]
 8004f24:	6128      	str	r0, [r5, #16]
 8004f26:	b920      	cbnz	r0, 8004f32 <_svfiprintf_r+0x2e>
 8004f28:	230c      	movs	r3, #12
 8004f2a:	603b      	str	r3, [r7, #0]
 8004f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f30:	e0d1      	b.n	80050d6 <_svfiprintf_r+0x1d2>
 8004f32:	2340      	movs	r3, #64	; 0x40
 8004f34:	616b      	str	r3, [r5, #20]
 8004f36:	2300      	movs	r3, #0
 8004f38:	9309      	str	r3, [sp, #36]	; 0x24
 8004f3a:	2320      	movs	r3, #32
 8004f3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f40:	2330      	movs	r3, #48	; 0x30
 8004f42:	f04f 0901 	mov.w	r9, #1
 8004f46:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80050f0 <_svfiprintf_r+0x1ec>
 8004f4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f52:	4623      	mov	r3, r4
 8004f54:	469a      	mov	sl, r3
 8004f56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f5a:	b10a      	cbz	r2, 8004f60 <_svfiprintf_r+0x5c>
 8004f5c:	2a25      	cmp	r2, #37	; 0x25
 8004f5e:	d1f9      	bne.n	8004f54 <_svfiprintf_r+0x50>
 8004f60:	ebba 0b04 	subs.w	fp, sl, r4
 8004f64:	d00b      	beq.n	8004f7e <_svfiprintf_r+0x7a>
 8004f66:	465b      	mov	r3, fp
 8004f68:	4622      	mov	r2, r4
 8004f6a:	4629      	mov	r1, r5
 8004f6c:	4638      	mov	r0, r7
 8004f6e:	f7ff ff6d 	bl	8004e4c <__ssputs_r>
 8004f72:	3001      	adds	r0, #1
 8004f74:	f000 80aa 	beq.w	80050cc <_svfiprintf_r+0x1c8>
 8004f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f7a:	445a      	add	r2, fp
 8004f7c:	9209      	str	r2, [sp, #36]	; 0x24
 8004f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 80a2 	beq.w	80050cc <_svfiprintf_r+0x1c8>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f92:	f10a 0a01 	add.w	sl, sl, #1
 8004f96:	9304      	str	r3, [sp, #16]
 8004f98:	9307      	str	r3, [sp, #28]
 8004f9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f9e:	931a      	str	r3, [sp, #104]	; 0x68
 8004fa0:	4654      	mov	r4, sl
 8004fa2:	2205      	movs	r2, #5
 8004fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fa8:	4851      	ldr	r0, [pc, #324]	; (80050f0 <_svfiprintf_r+0x1ec>)
 8004faa:	f000 fa41 	bl	8005430 <memchr>
 8004fae:	9a04      	ldr	r2, [sp, #16]
 8004fb0:	b9d8      	cbnz	r0, 8004fea <_svfiprintf_r+0xe6>
 8004fb2:	06d0      	lsls	r0, r2, #27
 8004fb4:	bf44      	itt	mi
 8004fb6:	2320      	movmi	r3, #32
 8004fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fbc:	0711      	lsls	r1, r2, #28
 8004fbe:	bf44      	itt	mi
 8004fc0:	232b      	movmi	r3, #43	; 0x2b
 8004fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8004fca:	2b2a      	cmp	r3, #42	; 0x2a
 8004fcc:	d015      	beq.n	8004ffa <_svfiprintf_r+0xf6>
 8004fce:	4654      	mov	r4, sl
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	f04f 0c0a 	mov.w	ip, #10
 8004fd6:	9a07      	ldr	r2, [sp, #28]
 8004fd8:	4621      	mov	r1, r4
 8004fda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fde:	3b30      	subs	r3, #48	; 0x30
 8004fe0:	2b09      	cmp	r3, #9
 8004fe2:	d94e      	bls.n	8005082 <_svfiprintf_r+0x17e>
 8004fe4:	b1b0      	cbz	r0, 8005014 <_svfiprintf_r+0x110>
 8004fe6:	9207      	str	r2, [sp, #28]
 8004fe8:	e014      	b.n	8005014 <_svfiprintf_r+0x110>
 8004fea:	eba0 0308 	sub.w	r3, r0, r8
 8004fee:	fa09 f303 	lsl.w	r3, r9, r3
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	46a2      	mov	sl, r4
 8004ff6:	9304      	str	r3, [sp, #16]
 8004ff8:	e7d2      	b.n	8004fa0 <_svfiprintf_r+0x9c>
 8004ffa:	9b03      	ldr	r3, [sp, #12]
 8004ffc:	1d19      	adds	r1, r3, #4
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	9103      	str	r1, [sp, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	bfbb      	ittet	lt
 8005006:	425b      	neglt	r3, r3
 8005008:	f042 0202 	orrlt.w	r2, r2, #2
 800500c:	9307      	strge	r3, [sp, #28]
 800500e:	9307      	strlt	r3, [sp, #28]
 8005010:	bfb8      	it	lt
 8005012:	9204      	strlt	r2, [sp, #16]
 8005014:	7823      	ldrb	r3, [r4, #0]
 8005016:	2b2e      	cmp	r3, #46	; 0x2e
 8005018:	d10c      	bne.n	8005034 <_svfiprintf_r+0x130>
 800501a:	7863      	ldrb	r3, [r4, #1]
 800501c:	2b2a      	cmp	r3, #42	; 0x2a
 800501e:	d135      	bne.n	800508c <_svfiprintf_r+0x188>
 8005020:	9b03      	ldr	r3, [sp, #12]
 8005022:	3402      	adds	r4, #2
 8005024:	1d1a      	adds	r2, r3, #4
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	9203      	str	r2, [sp, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	bfb8      	it	lt
 800502e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005032:	9305      	str	r3, [sp, #20]
 8005034:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005100 <_svfiprintf_r+0x1fc>
 8005038:	2203      	movs	r2, #3
 800503a:	4650      	mov	r0, sl
 800503c:	7821      	ldrb	r1, [r4, #0]
 800503e:	f000 f9f7 	bl	8005430 <memchr>
 8005042:	b140      	cbz	r0, 8005056 <_svfiprintf_r+0x152>
 8005044:	2340      	movs	r3, #64	; 0x40
 8005046:	eba0 000a 	sub.w	r0, r0, sl
 800504a:	fa03 f000 	lsl.w	r0, r3, r0
 800504e:	9b04      	ldr	r3, [sp, #16]
 8005050:	3401      	adds	r4, #1
 8005052:	4303      	orrs	r3, r0
 8005054:	9304      	str	r3, [sp, #16]
 8005056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800505a:	2206      	movs	r2, #6
 800505c:	4825      	ldr	r0, [pc, #148]	; (80050f4 <_svfiprintf_r+0x1f0>)
 800505e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005062:	f000 f9e5 	bl	8005430 <memchr>
 8005066:	2800      	cmp	r0, #0
 8005068:	d038      	beq.n	80050dc <_svfiprintf_r+0x1d8>
 800506a:	4b23      	ldr	r3, [pc, #140]	; (80050f8 <_svfiprintf_r+0x1f4>)
 800506c:	bb1b      	cbnz	r3, 80050b6 <_svfiprintf_r+0x1b2>
 800506e:	9b03      	ldr	r3, [sp, #12]
 8005070:	3307      	adds	r3, #7
 8005072:	f023 0307 	bic.w	r3, r3, #7
 8005076:	3308      	adds	r3, #8
 8005078:	9303      	str	r3, [sp, #12]
 800507a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800507c:	4433      	add	r3, r6
 800507e:	9309      	str	r3, [sp, #36]	; 0x24
 8005080:	e767      	b.n	8004f52 <_svfiprintf_r+0x4e>
 8005082:	460c      	mov	r4, r1
 8005084:	2001      	movs	r0, #1
 8005086:	fb0c 3202 	mla	r2, ip, r2, r3
 800508a:	e7a5      	b.n	8004fd8 <_svfiprintf_r+0xd4>
 800508c:	2300      	movs	r3, #0
 800508e:	f04f 0c0a 	mov.w	ip, #10
 8005092:	4619      	mov	r1, r3
 8005094:	3401      	adds	r4, #1
 8005096:	9305      	str	r3, [sp, #20]
 8005098:	4620      	mov	r0, r4
 800509a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800509e:	3a30      	subs	r2, #48	; 0x30
 80050a0:	2a09      	cmp	r2, #9
 80050a2:	d903      	bls.n	80050ac <_svfiprintf_r+0x1a8>
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d0c5      	beq.n	8005034 <_svfiprintf_r+0x130>
 80050a8:	9105      	str	r1, [sp, #20]
 80050aa:	e7c3      	b.n	8005034 <_svfiprintf_r+0x130>
 80050ac:	4604      	mov	r4, r0
 80050ae:	2301      	movs	r3, #1
 80050b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80050b4:	e7f0      	b.n	8005098 <_svfiprintf_r+0x194>
 80050b6:	ab03      	add	r3, sp, #12
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	462a      	mov	r2, r5
 80050bc:	4638      	mov	r0, r7
 80050be:	4b0f      	ldr	r3, [pc, #60]	; (80050fc <_svfiprintf_r+0x1f8>)
 80050c0:	a904      	add	r1, sp, #16
 80050c2:	f3af 8000 	nop.w
 80050c6:	1c42      	adds	r2, r0, #1
 80050c8:	4606      	mov	r6, r0
 80050ca:	d1d6      	bne.n	800507a <_svfiprintf_r+0x176>
 80050cc:	89ab      	ldrh	r3, [r5, #12]
 80050ce:	065b      	lsls	r3, r3, #25
 80050d0:	f53f af2c 	bmi.w	8004f2c <_svfiprintf_r+0x28>
 80050d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050d6:	b01d      	add	sp, #116	; 0x74
 80050d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050dc:	ab03      	add	r3, sp, #12
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	462a      	mov	r2, r5
 80050e2:	4638      	mov	r0, r7
 80050e4:	4b05      	ldr	r3, [pc, #20]	; (80050fc <_svfiprintf_r+0x1f8>)
 80050e6:	a904      	add	r1, sp, #16
 80050e8:	f000 f87c 	bl	80051e4 <_printf_i>
 80050ec:	e7eb      	b.n	80050c6 <_svfiprintf_r+0x1c2>
 80050ee:	bf00      	nop
 80050f0:	08006b78 	.word	0x08006b78
 80050f4:	08006b82 	.word	0x08006b82
 80050f8:	00000000 	.word	0x00000000
 80050fc:	08004e4d 	.word	0x08004e4d
 8005100:	08006b7e 	.word	0x08006b7e

08005104 <_printf_common>:
 8005104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005108:	4616      	mov	r6, r2
 800510a:	4699      	mov	r9, r3
 800510c:	688a      	ldr	r2, [r1, #8]
 800510e:	690b      	ldr	r3, [r1, #16]
 8005110:	4607      	mov	r7, r0
 8005112:	4293      	cmp	r3, r2
 8005114:	bfb8      	it	lt
 8005116:	4613      	movlt	r3, r2
 8005118:	6033      	str	r3, [r6, #0]
 800511a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800511e:	460c      	mov	r4, r1
 8005120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005124:	b10a      	cbz	r2, 800512a <_printf_common+0x26>
 8005126:	3301      	adds	r3, #1
 8005128:	6033      	str	r3, [r6, #0]
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	0699      	lsls	r1, r3, #26
 800512e:	bf42      	ittt	mi
 8005130:	6833      	ldrmi	r3, [r6, #0]
 8005132:	3302      	addmi	r3, #2
 8005134:	6033      	strmi	r3, [r6, #0]
 8005136:	6825      	ldr	r5, [r4, #0]
 8005138:	f015 0506 	ands.w	r5, r5, #6
 800513c:	d106      	bne.n	800514c <_printf_common+0x48>
 800513e:	f104 0a19 	add.w	sl, r4, #25
 8005142:	68e3      	ldr	r3, [r4, #12]
 8005144:	6832      	ldr	r2, [r6, #0]
 8005146:	1a9b      	subs	r3, r3, r2
 8005148:	42ab      	cmp	r3, r5
 800514a:	dc28      	bgt.n	800519e <_printf_common+0x9a>
 800514c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005150:	1e13      	subs	r3, r2, #0
 8005152:	6822      	ldr	r2, [r4, #0]
 8005154:	bf18      	it	ne
 8005156:	2301      	movne	r3, #1
 8005158:	0692      	lsls	r2, r2, #26
 800515a:	d42d      	bmi.n	80051b8 <_printf_common+0xb4>
 800515c:	4649      	mov	r1, r9
 800515e:	4638      	mov	r0, r7
 8005160:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005164:	47c0      	blx	r8
 8005166:	3001      	adds	r0, #1
 8005168:	d020      	beq.n	80051ac <_printf_common+0xa8>
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	68e5      	ldr	r5, [r4, #12]
 800516e:	f003 0306 	and.w	r3, r3, #6
 8005172:	2b04      	cmp	r3, #4
 8005174:	bf18      	it	ne
 8005176:	2500      	movne	r5, #0
 8005178:	6832      	ldr	r2, [r6, #0]
 800517a:	f04f 0600 	mov.w	r6, #0
 800517e:	68a3      	ldr	r3, [r4, #8]
 8005180:	bf08      	it	eq
 8005182:	1aad      	subeq	r5, r5, r2
 8005184:	6922      	ldr	r2, [r4, #16]
 8005186:	bf08      	it	eq
 8005188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800518c:	4293      	cmp	r3, r2
 800518e:	bfc4      	itt	gt
 8005190:	1a9b      	subgt	r3, r3, r2
 8005192:	18ed      	addgt	r5, r5, r3
 8005194:	341a      	adds	r4, #26
 8005196:	42b5      	cmp	r5, r6
 8005198:	d11a      	bne.n	80051d0 <_printf_common+0xcc>
 800519a:	2000      	movs	r0, #0
 800519c:	e008      	b.n	80051b0 <_printf_common+0xac>
 800519e:	2301      	movs	r3, #1
 80051a0:	4652      	mov	r2, sl
 80051a2:	4649      	mov	r1, r9
 80051a4:	4638      	mov	r0, r7
 80051a6:	47c0      	blx	r8
 80051a8:	3001      	adds	r0, #1
 80051aa:	d103      	bne.n	80051b4 <_printf_common+0xb0>
 80051ac:	f04f 30ff 	mov.w	r0, #4294967295
 80051b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b4:	3501      	adds	r5, #1
 80051b6:	e7c4      	b.n	8005142 <_printf_common+0x3e>
 80051b8:	2030      	movs	r0, #48	; 0x30
 80051ba:	18e1      	adds	r1, r4, r3
 80051bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051c6:	4422      	add	r2, r4
 80051c8:	3302      	adds	r3, #2
 80051ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051ce:	e7c5      	b.n	800515c <_printf_common+0x58>
 80051d0:	2301      	movs	r3, #1
 80051d2:	4622      	mov	r2, r4
 80051d4:	4649      	mov	r1, r9
 80051d6:	4638      	mov	r0, r7
 80051d8:	47c0      	blx	r8
 80051da:	3001      	adds	r0, #1
 80051dc:	d0e6      	beq.n	80051ac <_printf_common+0xa8>
 80051de:	3601      	adds	r6, #1
 80051e0:	e7d9      	b.n	8005196 <_printf_common+0x92>
	...

080051e4 <_printf_i>:
 80051e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051e8:	460c      	mov	r4, r1
 80051ea:	7e27      	ldrb	r7, [r4, #24]
 80051ec:	4691      	mov	r9, r2
 80051ee:	2f78      	cmp	r7, #120	; 0x78
 80051f0:	4680      	mov	r8, r0
 80051f2:	469a      	mov	sl, r3
 80051f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80051f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051fa:	d807      	bhi.n	800520c <_printf_i+0x28>
 80051fc:	2f62      	cmp	r7, #98	; 0x62
 80051fe:	d80a      	bhi.n	8005216 <_printf_i+0x32>
 8005200:	2f00      	cmp	r7, #0
 8005202:	f000 80d9 	beq.w	80053b8 <_printf_i+0x1d4>
 8005206:	2f58      	cmp	r7, #88	; 0x58
 8005208:	f000 80a4 	beq.w	8005354 <_printf_i+0x170>
 800520c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005210:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005214:	e03a      	b.n	800528c <_printf_i+0xa8>
 8005216:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800521a:	2b15      	cmp	r3, #21
 800521c:	d8f6      	bhi.n	800520c <_printf_i+0x28>
 800521e:	a001      	add	r0, pc, #4	; (adr r0, 8005224 <_printf_i+0x40>)
 8005220:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005224:	0800527d 	.word	0x0800527d
 8005228:	08005291 	.word	0x08005291
 800522c:	0800520d 	.word	0x0800520d
 8005230:	0800520d 	.word	0x0800520d
 8005234:	0800520d 	.word	0x0800520d
 8005238:	0800520d 	.word	0x0800520d
 800523c:	08005291 	.word	0x08005291
 8005240:	0800520d 	.word	0x0800520d
 8005244:	0800520d 	.word	0x0800520d
 8005248:	0800520d 	.word	0x0800520d
 800524c:	0800520d 	.word	0x0800520d
 8005250:	0800539f 	.word	0x0800539f
 8005254:	080052c1 	.word	0x080052c1
 8005258:	08005381 	.word	0x08005381
 800525c:	0800520d 	.word	0x0800520d
 8005260:	0800520d 	.word	0x0800520d
 8005264:	080053c1 	.word	0x080053c1
 8005268:	0800520d 	.word	0x0800520d
 800526c:	080052c1 	.word	0x080052c1
 8005270:	0800520d 	.word	0x0800520d
 8005274:	0800520d 	.word	0x0800520d
 8005278:	08005389 	.word	0x08005389
 800527c:	680b      	ldr	r3, [r1, #0]
 800527e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005282:	1d1a      	adds	r2, r3, #4
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	600a      	str	r2, [r1, #0]
 8005288:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800528c:	2301      	movs	r3, #1
 800528e:	e0a4      	b.n	80053da <_printf_i+0x1f6>
 8005290:	6825      	ldr	r5, [r4, #0]
 8005292:	6808      	ldr	r0, [r1, #0]
 8005294:	062e      	lsls	r6, r5, #24
 8005296:	f100 0304 	add.w	r3, r0, #4
 800529a:	d50a      	bpl.n	80052b2 <_printf_i+0xce>
 800529c:	6805      	ldr	r5, [r0, #0]
 800529e:	600b      	str	r3, [r1, #0]
 80052a0:	2d00      	cmp	r5, #0
 80052a2:	da03      	bge.n	80052ac <_printf_i+0xc8>
 80052a4:	232d      	movs	r3, #45	; 0x2d
 80052a6:	426d      	negs	r5, r5
 80052a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052ac:	230a      	movs	r3, #10
 80052ae:	485e      	ldr	r0, [pc, #376]	; (8005428 <_printf_i+0x244>)
 80052b0:	e019      	b.n	80052e6 <_printf_i+0x102>
 80052b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80052b6:	6805      	ldr	r5, [r0, #0]
 80052b8:	600b      	str	r3, [r1, #0]
 80052ba:	bf18      	it	ne
 80052bc:	b22d      	sxthne	r5, r5
 80052be:	e7ef      	b.n	80052a0 <_printf_i+0xbc>
 80052c0:	680b      	ldr	r3, [r1, #0]
 80052c2:	6825      	ldr	r5, [r4, #0]
 80052c4:	1d18      	adds	r0, r3, #4
 80052c6:	6008      	str	r0, [r1, #0]
 80052c8:	0628      	lsls	r0, r5, #24
 80052ca:	d501      	bpl.n	80052d0 <_printf_i+0xec>
 80052cc:	681d      	ldr	r5, [r3, #0]
 80052ce:	e002      	b.n	80052d6 <_printf_i+0xf2>
 80052d0:	0669      	lsls	r1, r5, #25
 80052d2:	d5fb      	bpl.n	80052cc <_printf_i+0xe8>
 80052d4:	881d      	ldrh	r5, [r3, #0]
 80052d6:	2f6f      	cmp	r7, #111	; 0x6f
 80052d8:	bf0c      	ite	eq
 80052da:	2308      	moveq	r3, #8
 80052dc:	230a      	movne	r3, #10
 80052de:	4852      	ldr	r0, [pc, #328]	; (8005428 <_printf_i+0x244>)
 80052e0:	2100      	movs	r1, #0
 80052e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052e6:	6866      	ldr	r6, [r4, #4]
 80052e8:	2e00      	cmp	r6, #0
 80052ea:	bfa8      	it	ge
 80052ec:	6821      	ldrge	r1, [r4, #0]
 80052ee:	60a6      	str	r6, [r4, #8]
 80052f0:	bfa4      	itt	ge
 80052f2:	f021 0104 	bicge.w	r1, r1, #4
 80052f6:	6021      	strge	r1, [r4, #0]
 80052f8:	b90d      	cbnz	r5, 80052fe <_printf_i+0x11a>
 80052fa:	2e00      	cmp	r6, #0
 80052fc:	d04d      	beq.n	800539a <_printf_i+0x1b6>
 80052fe:	4616      	mov	r6, r2
 8005300:	fbb5 f1f3 	udiv	r1, r5, r3
 8005304:	fb03 5711 	mls	r7, r3, r1, r5
 8005308:	5dc7      	ldrb	r7, [r0, r7]
 800530a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800530e:	462f      	mov	r7, r5
 8005310:	42bb      	cmp	r3, r7
 8005312:	460d      	mov	r5, r1
 8005314:	d9f4      	bls.n	8005300 <_printf_i+0x11c>
 8005316:	2b08      	cmp	r3, #8
 8005318:	d10b      	bne.n	8005332 <_printf_i+0x14e>
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	07df      	lsls	r7, r3, #31
 800531e:	d508      	bpl.n	8005332 <_printf_i+0x14e>
 8005320:	6923      	ldr	r3, [r4, #16]
 8005322:	6861      	ldr	r1, [r4, #4]
 8005324:	4299      	cmp	r1, r3
 8005326:	bfde      	ittt	le
 8005328:	2330      	movle	r3, #48	; 0x30
 800532a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800532e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005332:	1b92      	subs	r2, r2, r6
 8005334:	6122      	str	r2, [r4, #16]
 8005336:	464b      	mov	r3, r9
 8005338:	4621      	mov	r1, r4
 800533a:	4640      	mov	r0, r8
 800533c:	f8cd a000 	str.w	sl, [sp]
 8005340:	aa03      	add	r2, sp, #12
 8005342:	f7ff fedf 	bl	8005104 <_printf_common>
 8005346:	3001      	adds	r0, #1
 8005348:	d14c      	bne.n	80053e4 <_printf_i+0x200>
 800534a:	f04f 30ff 	mov.w	r0, #4294967295
 800534e:	b004      	add	sp, #16
 8005350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005354:	4834      	ldr	r0, [pc, #208]	; (8005428 <_printf_i+0x244>)
 8005356:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800535a:	680e      	ldr	r6, [r1, #0]
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005362:	061f      	lsls	r7, r3, #24
 8005364:	600e      	str	r6, [r1, #0]
 8005366:	d514      	bpl.n	8005392 <_printf_i+0x1ae>
 8005368:	07d9      	lsls	r1, r3, #31
 800536a:	bf44      	itt	mi
 800536c:	f043 0320 	orrmi.w	r3, r3, #32
 8005370:	6023      	strmi	r3, [r4, #0]
 8005372:	b91d      	cbnz	r5, 800537c <_printf_i+0x198>
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	f023 0320 	bic.w	r3, r3, #32
 800537a:	6023      	str	r3, [r4, #0]
 800537c:	2310      	movs	r3, #16
 800537e:	e7af      	b.n	80052e0 <_printf_i+0xfc>
 8005380:	6823      	ldr	r3, [r4, #0]
 8005382:	f043 0320 	orr.w	r3, r3, #32
 8005386:	6023      	str	r3, [r4, #0]
 8005388:	2378      	movs	r3, #120	; 0x78
 800538a:	4828      	ldr	r0, [pc, #160]	; (800542c <_printf_i+0x248>)
 800538c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005390:	e7e3      	b.n	800535a <_printf_i+0x176>
 8005392:	065e      	lsls	r6, r3, #25
 8005394:	bf48      	it	mi
 8005396:	b2ad      	uxthmi	r5, r5
 8005398:	e7e6      	b.n	8005368 <_printf_i+0x184>
 800539a:	4616      	mov	r6, r2
 800539c:	e7bb      	b.n	8005316 <_printf_i+0x132>
 800539e:	680b      	ldr	r3, [r1, #0]
 80053a0:	6826      	ldr	r6, [r4, #0]
 80053a2:	1d1d      	adds	r5, r3, #4
 80053a4:	6960      	ldr	r0, [r4, #20]
 80053a6:	600d      	str	r5, [r1, #0]
 80053a8:	0635      	lsls	r5, r6, #24
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	d501      	bpl.n	80053b2 <_printf_i+0x1ce>
 80053ae:	6018      	str	r0, [r3, #0]
 80053b0:	e002      	b.n	80053b8 <_printf_i+0x1d4>
 80053b2:	0671      	lsls	r1, r6, #25
 80053b4:	d5fb      	bpl.n	80053ae <_printf_i+0x1ca>
 80053b6:	8018      	strh	r0, [r3, #0]
 80053b8:	2300      	movs	r3, #0
 80053ba:	4616      	mov	r6, r2
 80053bc:	6123      	str	r3, [r4, #16]
 80053be:	e7ba      	b.n	8005336 <_printf_i+0x152>
 80053c0:	680b      	ldr	r3, [r1, #0]
 80053c2:	1d1a      	adds	r2, r3, #4
 80053c4:	600a      	str	r2, [r1, #0]
 80053c6:	681e      	ldr	r6, [r3, #0]
 80053c8:	2100      	movs	r1, #0
 80053ca:	4630      	mov	r0, r6
 80053cc:	6862      	ldr	r2, [r4, #4]
 80053ce:	f000 f82f 	bl	8005430 <memchr>
 80053d2:	b108      	cbz	r0, 80053d8 <_printf_i+0x1f4>
 80053d4:	1b80      	subs	r0, r0, r6
 80053d6:	6060      	str	r0, [r4, #4]
 80053d8:	6863      	ldr	r3, [r4, #4]
 80053da:	6123      	str	r3, [r4, #16]
 80053dc:	2300      	movs	r3, #0
 80053de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053e2:	e7a8      	b.n	8005336 <_printf_i+0x152>
 80053e4:	4632      	mov	r2, r6
 80053e6:	4649      	mov	r1, r9
 80053e8:	4640      	mov	r0, r8
 80053ea:	6923      	ldr	r3, [r4, #16]
 80053ec:	47d0      	blx	sl
 80053ee:	3001      	adds	r0, #1
 80053f0:	d0ab      	beq.n	800534a <_printf_i+0x166>
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	079b      	lsls	r3, r3, #30
 80053f6:	d413      	bmi.n	8005420 <_printf_i+0x23c>
 80053f8:	68e0      	ldr	r0, [r4, #12]
 80053fa:	9b03      	ldr	r3, [sp, #12]
 80053fc:	4298      	cmp	r0, r3
 80053fe:	bfb8      	it	lt
 8005400:	4618      	movlt	r0, r3
 8005402:	e7a4      	b.n	800534e <_printf_i+0x16a>
 8005404:	2301      	movs	r3, #1
 8005406:	4632      	mov	r2, r6
 8005408:	4649      	mov	r1, r9
 800540a:	4640      	mov	r0, r8
 800540c:	47d0      	blx	sl
 800540e:	3001      	adds	r0, #1
 8005410:	d09b      	beq.n	800534a <_printf_i+0x166>
 8005412:	3501      	adds	r5, #1
 8005414:	68e3      	ldr	r3, [r4, #12]
 8005416:	9903      	ldr	r1, [sp, #12]
 8005418:	1a5b      	subs	r3, r3, r1
 800541a:	42ab      	cmp	r3, r5
 800541c:	dcf2      	bgt.n	8005404 <_printf_i+0x220>
 800541e:	e7eb      	b.n	80053f8 <_printf_i+0x214>
 8005420:	2500      	movs	r5, #0
 8005422:	f104 0619 	add.w	r6, r4, #25
 8005426:	e7f5      	b.n	8005414 <_printf_i+0x230>
 8005428:	08006b89 	.word	0x08006b89
 800542c:	08006b9a 	.word	0x08006b9a

08005430 <memchr>:
 8005430:	4603      	mov	r3, r0
 8005432:	b510      	push	{r4, lr}
 8005434:	b2c9      	uxtb	r1, r1
 8005436:	4402      	add	r2, r0
 8005438:	4293      	cmp	r3, r2
 800543a:	4618      	mov	r0, r3
 800543c:	d101      	bne.n	8005442 <memchr+0x12>
 800543e:	2000      	movs	r0, #0
 8005440:	e003      	b.n	800544a <memchr+0x1a>
 8005442:	7804      	ldrb	r4, [r0, #0]
 8005444:	3301      	adds	r3, #1
 8005446:	428c      	cmp	r4, r1
 8005448:	d1f6      	bne.n	8005438 <memchr+0x8>
 800544a:	bd10      	pop	{r4, pc}

0800544c <memcpy>:
 800544c:	440a      	add	r2, r1
 800544e:	4291      	cmp	r1, r2
 8005450:	f100 33ff 	add.w	r3, r0, #4294967295
 8005454:	d100      	bne.n	8005458 <memcpy+0xc>
 8005456:	4770      	bx	lr
 8005458:	b510      	push	{r4, lr}
 800545a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800545e:	4291      	cmp	r1, r2
 8005460:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005464:	d1f9      	bne.n	800545a <memcpy+0xe>
 8005466:	bd10      	pop	{r4, pc}

08005468 <memmove>:
 8005468:	4288      	cmp	r0, r1
 800546a:	b510      	push	{r4, lr}
 800546c:	eb01 0402 	add.w	r4, r1, r2
 8005470:	d902      	bls.n	8005478 <memmove+0x10>
 8005472:	4284      	cmp	r4, r0
 8005474:	4623      	mov	r3, r4
 8005476:	d807      	bhi.n	8005488 <memmove+0x20>
 8005478:	1e43      	subs	r3, r0, #1
 800547a:	42a1      	cmp	r1, r4
 800547c:	d008      	beq.n	8005490 <memmove+0x28>
 800547e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005482:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005486:	e7f8      	b.n	800547a <memmove+0x12>
 8005488:	4601      	mov	r1, r0
 800548a:	4402      	add	r2, r0
 800548c:	428a      	cmp	r2, r1
 800548e:	d100      	bne.n	8005492 <memmove+0x2a>
 8005490:	bd10      	pop	{r4, pc}
 8005492:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005496:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800549a:	e7f7      	b.n	800548c <memmove+0x24>

0800549c <_free_r>:
 800549c:	b538      	push	{r3, r4, r5, lr}
 800549e:	4605      	mov	r5, r0
 80054a0:	2900      	cmp	r1, #0
 80054a2:	d043      	beq.n	800552c <_free_r+0x90>
 80054a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054a8:	1f0c      	subs	r4, r1, #4
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	bfb8      	it	lt
 80054ae:	18e4      	addlt	r4, r4, r3
 80054b0:	f000 f8d0 	bl	8005654 <__malloc_lock>
 80054b4:	4a1e      	ldr	r2, [pc, #120]	; (8005530 <_free_r+0x94>)
 80054b6:	6813      	ldr	r3, [r2, #0]
 80054b8:	4610      	mov	r0, r2
 80054ba:	b933      	cbnz	r3, 80054ca <_free_r+0x2e>
 80054bc:	6063      	str	r3, [r4, #4]
 80054be:	6014      	str	r4, [r2, #0]
 80054c0:	4628      	mov	r0, r5
 80054c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054c6:	f000 b8cb 	b.w	8005660 <__malloc_unlock>
 80054ca:	42a3      	cmp	r3, r4
 80054cc:	d90a      	bls.n	80054e4 <_free_r+0x48>
 80054ce:	6821      	ldr	r1, [r4, #0]
 80054d0:	1862      	adds	r2, r4, r1
 80054d2:	4293      	cmp	r3, r2
 80054d4:	bf01      	itttt	eq
 80054d6:	681a      	ldreq	r2, [r3, #0]
 80054d8:	685b      	ldreq	r3, [r3, #4]
 80054da:	1852      	addeq	r2, r2, r1
 80054dc:	6022      	streq	r2, [r4, #0]
 80054de:	6063      	str	r3, [r4, #4]
 80054e0:	6004      	str	r4, [r0, #0]
 80054e2:	e7ed      	b.n	80054c0 <_free_r+0x24>
 80054e4:	461a      	mov	r2, r3
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	b10b      	cbz	r3, 80054ee <_free_r+0x52>
 80054ea:	42a3      	cmp	r3, r4
 80054ec:	d9fa      	bls.n	80054e4 <_free_r+0x48>
 80054ee:	6811      	ldr	r1, [r2, #0]
 80054f0:	1850      	adds	r0, r2, r1
 80054f2:	42a0      	cmp	r0, r4
 80054f4:	d10b      	bne.n	800550e <_free_r+0x72>
 80054f6:	6820      	ldr	r0, [r4, #0]
 80054f8:	4401      	add	r1, r0
 80054fa:	1850      	adds	r0, r2, r1
 80054fc:	4283      	cmp	r3, r0
 80054fe:	6011      	str	r1, [r2, #0]
 8005500:	d1de      	bne.n	80054c0 <_free_r+0x24>
 8005502:	6818      	ldr	r0, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	4401      	add	r1, r0
 8005508:	6011      	str	r1, [r2, #0]
 800550a:	6053      	str	r3, [r2, #4]
 800550c:	e7d8      	b.n	80054c0 <_free_r+0x24>
 800550e:	d902      	bls.n	8005516 <_free_r+0x7a>
 8005510:	230c      	movs	r3, #12
 8005512:	602b      	str	r3, [r5, #0]
 8005514:	e7d4      	b.n	80054c0 <_free_r+0x24>
 8005516:	6820      	ldr	r0, [r4, #0]
 8005518:	1821      	adds	r1, r4, r0
 800551a:	428b      	cmp	r3, r1
 800551c:	bf01      	itttt	eq
 800551e:	6819      	ldreq	r1, [r3, #0]
 8005520:	685b      	ldreq	r3, [r3, #4]
 8005522:	1809      	addeq	r1, r1, r0
 8005524:	6021      	streq	r1, [r4, #0]
 8005526:	6063      	str	r3, [r4, #4]
 8005528:	6054      	str	r4, [r2, #4]
 800552a:	e7c9      	b.n	80054c0 <_free_r+0x24>
 800552c:	bd38      	pop	{r3, r4, r5, pc}
 800552e:	bf00      	nop
 8005530:	200000b0 	.word	0x200000b0

08005534 <_malloc_r>:
 8005534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005536:	1ccd      	adds	r5, r1, #3
 8005538:	f025 0503 	bic.w	r5, r5, #3
 800553c:	3508      	adds	r5, #8
 800553e:	2d0c      	cmp	r5, #12
 8005540:	bf38      	it	cc
 8005542:	250c      	movcc	r5, #12
 8005544:	2d00      	cmp	r5, #0
 8005546:	4606      	mov	r6, r0
 8005548:	db01      	blt.n	800554e <_malloc_r+0x1a>
 800554a:	42a9      	cmp	r1, r5
 800554c:	d903      	bls.n	8005556 <_malloc_r+0x22>
 800554e:	230c      	movs	r3, #12
 8005550:	6033      	str	r3, [r6, #0]
 8005552:	2000      	movs	r0, #0
 8005554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005556:	f000 f87d 	bl	8005654 <__malloc_lock>
 800555a:	4921      	ldr	r1, [pc, #132]	; (80055e0 <_malloc_r+0xac>)
 800555c:	680a      	ldr	r2, [r1, #0]
 800555e:	4614      	mov	r4, r2
 8005560:	b99c      	cbnz	r4, 800558a <_malloc_r+0x56>
 8005562:	4f20      	ldr	r7, [pc, #128]	; (80055e4 <_malloc_r+0xb0>)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	b923      	cbnz	r3, 8005572 <_malloc_r+0x3e>
 8005568:	4621      	mov	r1, r4
 800556a:	4630      	mov	r0, r6
 800556c:	f000 f862 	bl	8005634 <_sbrk_r>
 8005570:	6038      	str	r0, [r7, #0]
 8005572:	4629      	mov	r1, r5
 8005574:	4630      	mov	r0, r6
 8005576:	f000 f85d 	bl	8005634 <_sbrk_r>
 800557a:	1c43      	adds	r3, r0, #1
 800557c:	d123      	bne.n	80055c6 <_malloc_r+0x92>
 800557e:	230c      	movs	r3, #12
 8005580:	4630      	mov	r0, r6
 8005582:	6033      	str	r3, [r6, #0]
 8005584:	f000 f86c 	bl	8005660 <__malloc_unlock>
 8005588:	e7e3      	b.n	8005552 <_malloc_r+0x1e>
 800558a:	6823      	ldr	r3, [r4, #0]
 800558c:	1b5b      	subs	r3, r3, r5
 800558e:	d417      	bmi.n	80055c0 <_malloc_r+0x8c>
 8005590:	2b0b      	cmp	r3, #11
 8005592:	d903      	bls.n	800559c <_malloc_r+0x68>
 8005594:	6023      	str	r3, [r4, #0]
 8005596:	441c      	add	r4, r3
 8005598:	6025      	str	r5, [r4, #0]
 800559a:	e004      	b.n	80055a6 <_malloc_r+0x72>
 800559c:	6863      	ldr	r3, [r4, #4]
 800559e:	42a2      	cmp	r2, r4
 80055a0:	bf0c      	ite	eq
 80055a2:	600b      	streq	r3, [r1, #0]
 80055a4:	6053      	strne	r3, [r2, #4]
 80055a6:	4630      	mov	r0, r6
 80055a8:	f000 f85a 	bl	8005660 <__malloc_unlock>
 80055ac:	f104 000b 	add.w	r0, r4, #11
 80055b0:	1d23      	adds	r3, r4, #4
 80055b2:	f020 0007 	bic.w	r0, r0, #7
 80055b6:	1ac2      	subs	r2, r0, r3
 80055b8:	d0cc      	beq.n	8005554 <_malloc_r+0x20>
 80055ba:	1a1b      	subs	r3, r3, r0
 80055bc:	50a3      	str	r3, [r4, r2]
 80055be:	e7c9      	b.n	8005554 <_malloc_r+0x20>
 80055c0:	4622      	mov	r2, r4
 80055c2:	6864      	ldr	r4, [r4, #4]
 80055c4:	e7cc      	b.n	8005560 <_malloc_r+0x2c>
 80055c6:	1cc4      	adds	r4, r0, #3
 80055c8:	f024 0403 	bic.w	r4, r4, #3
 80055cc:	42a0      	cmp	r0, r4
 80055ce:	d0e3      	beq.n	8005598 <_malloc_r+0x64>
 80055d0:	1a21      	subs	r1, r4, r0
 80055d2:	4630      	mov	r0, r6
 80055d4:	f000 f82e 	bl	8005634 <_sbrk_r>
 80055d8:	3001      	adds	r0, #1
 80055da:	d1dd      	bne.n	8005598 <_malloc_r+0x64>
 80055dc:	e7cf      	b.n	800557e <_malloc_r+0x4a>
 80055de:	bf00      	nop
 80055e0:	200000b0 	.word	0x200000b0
 80055e4:	200000b4 	.word	0x200000b4

080055e8 <_realloc_r>:
 80055e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ea:	4607      	mov	r7, r0
 80055ec:	4614      	mov	r4, r2
 80055ee:	460e      	mov	r6, r1
 80055f0:	b921      	cbnz	r1, 80055fc <_realloc_r+0x14>
 80055f2:	4611      	mov	r1, r2
 80055f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80055f8:	f7ff bf9c 	b.w	8005534 <_malloc_r>
 80055fc:	b922      	cbnz	r2, 8005608 <_realloc_r+0x20>
 80055fe:	f7ff ff4d 	bl	800549c <_free_r>
 8005602:	4625      	mov	r5, r4
 8005604:	4628      	mov	r0, r5
 8005606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005608:	f000 f830 	bl	800566c <_malloc_usable_size_r>
 800560c:	42a0      	cmp	r0, r4
 800560e:	d20f      	bcs.n	8005630 <_realloc_r+0x48>
 8005610:	4621      	mov	r1, r4
 8005612:	4638      	mov	r0, r7
 8005614:	f7ff ff8e 	bl	8005534 <_malloc_r>
 8005618:	4605      	mov	r5, r0
 800561a:	2800      	cmp	r0, #0
 800561c:	d0f2      	beq.n	8005604 <_realloc_r+0x1c>
 800561e:	4631      	mov	r1, r6
 8005620:	4622      	mov	r2, r4
 8005622:	f7ff ff13 	bl	800544c <memcpy>
 8005626:	4631      	mov	r1, r6
 8005628:	4638      	mov	r0, r7
 800562a:	f7ff ff37 	bl	800549c <_free_r>
 800562e:	e7e9      	b.n	8005604 <_realloc_r+0x1c>
 8005630:	4635      	mov	r5, r6
 8005632:	e7e7      	b.n	8005604 <_realloc_r+0x1c>

08005634 <_sbrk_r>:
 8005634:	b538      	push	{r3, r4, r5, lr}
 8005636:	2300      	movs	r3, #0
 8005638:	4d05      	ldr	r5, [pc, #20]	; (8005650 <_sbrk_r+0x1c>)
 800563a:	4604      	mov	r4, r0
 800563c:	4608      	mov	r0, r1
 800563e:	602b      	str	r3, [r5, #0]
 8005640:	f7fc f896 	bl	8001770 <_sbrk>
 8005644:	1c43      	adds	r3, r0, #1
 8005646:	d102      	bne.n	800564e <_sbrk_r+0x1a>
 8005648:	682b      	ldr	r3, [r5, #0]
 800564a:	b103      	cbz	r3, 800564e <_sbrk_r+0x1a>
 800564c:	6023      	str	r3, [r4, #0]
 800564e:	bd38      	pop	{r3, r4, r5, pc}
 8005650:	20000328 	.word	0x20000328

08005654 <__malloc_lock>:
 8005654:	4801      	ldr	r0, [pc, #4]	; (800565c <__malloc_lock+0x8>)
 8005656:	f000 b811 	b.w	800567c <__retarget_lock_acquire_recursive>
 800565a:	bf00      	nop
 800565c:	20000330 	.word	0x20000330

08005660 <__malloc_unlock>:
 8005660:	4801      	ldr	r0, [pc, #4]	; (8005668 <__malloc_unlock+0x8>)
 8005662:	f000 b80c 	b.w	800567e <__retarget_lock_release_recursive>
 8005666:	bf00      	nop
 8005668:	20000330 	.word	0x20000330

0800566c <_malloc_usable_size_r>:
 800566c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005670:	1f18      	subs	r0, r3, #4
 8005672:	2b00      	cmp	r3, #0
 8005674:	bfbc      	itt	lt
 8005676:	580b      	ldrlt	r3, [r1, r0]
 8005678:	18c0      	addlt	r0, r0, r3
 800567a:	4770      	bx	lr

0800567c <__retarget_lock_acquire_recursive>:
 800567c:	4770      	bx	lr

0800567e <__retarget_lock_release_recursive>:
 800567e:	4770      	bx	lr

08005680 <sin>:
 8005680:	b530      	push	{r4, r5, lr}
 8005682:	4a20      	ldr	r2, [pc, #128]	; (8005704 <sin+0x84>)
 8005684:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005688:	4293      	cmp	r3, r2
 800568a:	b087      	sub	sp, #28
 800568c:	dc06      	bgt.n	800569c <sin+0x1c>
 800568e:	2300      	movs	r3, #0
 8005690:	2200      	movs	r2, #0
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	2300      	movs	r3, #0
 8005696:	f000 fe87 	bl	80063a8 <__kernel_sin>
 800569a:	e006      	b.n	80056aa <sin+0x2a>
 800569c:	4a1a      	ldr	r2, [pc, #104]	; (8005708 <sin+0x88>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	dd05      	ble.n	80056ae <sin+0x2e>
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	f7fa fd5f 	bl	8000168 <__aeabi_dsub>
 80056aa:	b007      	add	sp, #28
 80056ac:	bd30      	pop	{r4, r5, pc}
 80056ae:	aa02      	add	r2, sp, #8
 80056b0:	f000 f882 	bl	80057b8 <__ieee754_rem_pio2>
 80056b4:	f000 0003 	and.w	r0, r0, #3
 80056b8:	2801      	cmp	r0, #1
 80056ba:	d009      	beq.n	80056d0 <sin+0x50>
 80056bc:	2802      	cmp	r0, #2
 80056be:	d00e      	beq.n	80056de <sin+0x5e>
 80056c0:	b9c0      	cbnz	r0, 80056f4 <sin+0x74>
 80056c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056c6:	2301      	movs	r3, #1
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056ce:	e7e2      	b.n	8005696 <sin+0x16>
 80056d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056d8:	f000 fa5e 	bl	8005b98 <__kernel_cos>
 80056dc:	e7e5      	b.n	80056aa <sin+0x2a>
 80056de:	2301      	movs	r3, #1
 80056e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056ea:	f000 fe5d 	bl	80063a8 <__kernel_sin>
 80056ee:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80056f2:	e7da      	b.n	80056aa <sin+0x2a>
 80056f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056fc:	f000 fa4c 	bl	8005b98 <__kernel_cos>
 8005700:	e7f5      	b.n	80056ee <sin+0x6e>
 8005702:	bf00      	nop
 8005704:	3fe921fb 	.word	0x3fe921fb
 8005708:	7fefffff 	.word	0x7fefffff

0800570c <tan>:
 800570c:	b530      	push	{r4, r5, lr}
 800570e:	4a12      	ldr	r2, [pc, #72]	; (8005758 <tan+0x4c>)
 8005710:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005714:	4293      	cmp	r3, r2
 8005716:	b087      	sub	sp, #28
 8005718:	dc06      	bgt.n	8005728 <tan+0x1c>
 800571a:	2301      	movs	r3, #1
 800571c:	2200      	movs	r2, #0
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	2300      	movs	r3, #0
 8005722:	f000 fef9 	bl	8006518 <__kernel_tan>
 8005726:	e006      	b.n	8005736 <tan+0x2a>
 8005728:	4a0c      	ldr	r2, [pc, #48]	; (800575c <tan+0x50>)
 800572a:	4293      	cmp	r3, r2
 800572c:	dd05      	ble.n	800573a <tan+0x2e>
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	f7fa fd19 	bl	8000168 <__aeabi_dsub>
 8005736:	b007      	add	sp, #28
 8005738:	bd30      	pop	{r4, r5, pc}
 800573a:	aa02      	add	r2, sp, #8
 800573c:	f000 f83c 	bl	80057b8 <__ieee754_rem_pio2>
 8005740:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005744:	0040      	lsls	r0, r0, #1
 8005746:	f000 0002 	and.w	r0, r0, #2
 800574a:	f1c0 0001 	rsb	r0, r0, #1
 800574e:	9000      	str	r0, [sp, #0]
 8005750:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005754:	e7e5      	b.n	8005722 <tan+0x16>
 8005756:	bf00      	nop
 8005758:	3fe921fb 	.word	0x3fe921fb
 800575c:	7fefffff 	.word	0x7fefffff

08005760 <fmaxf>:
 8005760:	b538      	push	{r3, r4, r5, lr}
 8005762:	4604      	mov	r4, r0
 8005764:	460d      	mov	r5, r1
 8005766:	f000 f80d 	bl	8005784 <__fpclassifyf>
 800576a:	b140      	cbz	r0, 800577e <fmaxf+0x1e>
 800576c:	4628      	mov	r0, r5
 800576e:	f000 f809 	bl	8005784 <__fpclassifyf>
 8005772:	b128      	cbz	r0, 8005780 <fmaxf+0x20>
 8005774:	4629      	mov	r1, r5
 8005776:	4620      	mov	r0, r4
 8005778:	f7fb fc8a 	bl	8001090 <__aeabi_fcmpgt>
 800577c:	b900      	cbnz	r0, 8005780 <fmaxf+0x20>
 800577e:	462c      	mov	r4, r5
 8005780:	4620      	mov	r0, r4
 8005782:	bd38      	pop	{r3, r4, r5, pc}

08005784 <__fpclassifyf>:
 8005784:	f030 4000 	bics.w	r0, r0, #2147483648	; 0x80000000
 8005788:	d00d      	beq.n	80057a6 <__fpclassifyf+0x22>
 800578a:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800578e:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8005792:	d30a      	bcc.n	80057aa <__fpclassifyf+0x26>
 8005794:	4b07      	ldr	r3, [pc, #28]	; (80057b4 <__fpclassifyf+0x30>)
 8005796:	1e42      	subs	r2, r0, #1
 8005798:	429a      	cmp	r2, r3
 800579a:	d908      	bls.n	80057ae <__fpclassifyf+0x2a>
 800579c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 80057a0:	4258      	negs	r0, r3
 80057a2:	4158      	adcs	r0, r3
 80057a4:	4770      	bx	lr
 80057a6:	2002      	movs	r0, #2
 80057a8:	4770      	bx	lr
 80057aa:	2004      	movs	r0, #4
 80057ac:	4770      	bx	lr
 80057ae:	2003      	movs	r0, #3
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	007ffffe 	.word	0x007ffffe

080057b8 <__ieee754_rem_pio2>:
 80057b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057bc:	4614      	mov	r4, r2
 80057be:	4ac4      	ldr	r2, [pc, #784]	; (8005ad0 <__ieee754_rem_pio2+0x318>)
 80057c0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80057c4:	b08d      	sub	sp, #52	; 0x34
 80057c6:	4592      	cmp	sl, r2
 80057c8:	9104      	str	r1, [sp, #16]
 80057ca:	dc07      	bgt.n	80057dc <__ieee754_rem_pio2+0x24>
 80057cc:	2200      	movs	r2, #0
 80057ce:	2300      	movs	r3, #0
 80057d0:	e9c4 0100 	strd	r0, r1, [r4]
 80057d4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80057d8:	2500      	movs	r5, #0
 80057da:	e024      	b.n	8005826 <__ieee754_rem_pio2+0x6e>
 80057dc:	4abd      	ldr	r2, [pc, #756]	; (8005ad4 <__ieee754_rem_pio2+0x31c>)
 80057de:	4592      	cmp	sl, r2
 80057e0:	dc72      	bgt.n	80058c8 <__ieee754_rem_pio2+0x110>
 80057e2:	9b04      	ldr	r3, [sp, #16]
 80057e4:	4dbc      	ldr	r5, [pc, #752]	; (8005ad8 <__ieee754_rem_pio2+0x320>)
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	a3ab      	add	r3, pc, #684	; (adr r3, 8005a98 <__ieee754_rem_pio2+0x2e0>)
 80057ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ee:	dd36      	ble.n	800585e <__ieee754_rem_pio2+0xa6>
 80057f0:	f7fa fcba 	bl	8000168 <__aeabi_dsub>
 80057f4:	45aa      	cmp	sl, r5
 80057f6:	4606      	mov	r6, r0
 80057f8:	460f      	mov	r7, r1
 80057fa:	d018      	beq.n	800582e <__ieee754_rem_pio2+0x76>
 80057fc:	a3a8      	add	r3, pc, #672	; (adr r3, 8005aa0 <__ieee754_rem_pio2+0x2e8>)
 80057fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005802:	f7fa fcb1 	bl	8000168 <__aeabi_dsub>
 8005806:	4602      	mov	r2, r0
 8005808:	460b      	mov	r3, r1
 800580a:	4630      	mov	r0, r6
 800580c:	e9c4 2300 	strd	r2, r3, [r4]
 8005810:	4639      	mov	r1, r7
 8005812:	f7fa fca9 	bl	8000168 <__aeabi_dsub>
 8005816:	a3a2      	add	r3, pc, #648	; (adr r3, 8005aa0 <__ieee754_rem_pio2+0x2e8>)
 8005818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581c:	f7fa fca4 	bl	8000168 <__aeabi_dsub>
 8005820:	2501      	movs	r5, #1
 8005822:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005826:	4628      	mov	r0, r5
 8005828:	b00d      	add	sp, #52	; 0x34
 800582a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800582e:	a39e      	add	r3, pc, #632	; (adr r3, 8005aa8 <__ieee754_rem_pio2+0x2f0>)
 8005830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005834:	f7fa fc98 	bl	8000168 <__aeabi_dsub>
 8005838:	a39d      	add	r3, pc, #628	; (adr r3, 8005ab0 <__ieee754_rem_pio2+0x2f8>)
 800583a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583e:	4606      	mov	r6, r0
 8005840:	460f      	mov	r7, r1
 8005842:	f7fa fc91 	bl	8000168 <__aeabi_dsub>
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	4630      	mov	r0, r6
 800584c:	e9c4 2300 	strd	r2, r3, [r4]
 8005850:	4639      	mov	r1, r7
 8005852:	f7fa fc89 	bl	8000168 <__aeabi_dsub>
 8005856:	a396      	add	r3, pc, #600	; (adr r3, 8005ab0 <__ieee754_rem_pio2+0x2f8>)
 8005858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585c:	e7de      	b.n	800581c <__ieee754_rem_pio2+0x64>
 800585e:	f7fa fc85 	bl	800016c <__adddf3>
 8005862:	45aa      	cmp	sl, r5
 8005864:	4606      	mov	r6, r0
 8005866:	460f      	mov	r7, r1
 8005868:	d016      	beq.n	8005898 <__ieee754_rem_pio2+0xe0>
 800586a:	a38d      	add	r3, pc, #564	; (adr r3, 8005aa0 <__ieee754_rem_pio2+0x2e8>)
 800586c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005870:	f7fa fc7c 	bl	800016c <__adddf3>
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	4630      	mov	r0, r6
 800587a:	e9c4 2300 	strd	r2, r3, [r4]
 800587e:	4639      	mov	r1, r7
 8005880:	f7fa fc72 	bl	8000168 <__aeabi_dsub>
 8005884:	a386      	add	r3, pc, #536	; (adr r3, 8005aa0 <__ieee754_rem_pio2+0x2e8>)
 8005886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588a:	f7fa fc6f 	bl	800016c <__adddf3>
 800588e:	f04f 35ff 	mov.w	r5, #4294967295
 8005892:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005896:	e7c6      	b.n	8005826 <__ieee754_rem_pio2+0x6e>
 8005898:	a383      	add	r3, pc, #524	; (adr r3, 8005aa8 <__ieee754_rem_pio2+0x2f0>)
 800589a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589e:	f7fa fc65 	bl	800016c <__adddf3>
 80058a2:	a383      	add	r3, pc, #524	; (adr r3, 8005ab0 <__ieee754_rem_pio2+0x2f8>)
 80058a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a8:	4606      	mov	r6, r0
 80058aa:	460f      	mov	r7, r1
 80058ac:	f7fa fc5e 	bl	800016c <__adddf3>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4630      	mov	r0, r6
 80058b6:	e9c4 2300 	strd	r2, r3, [r4]
 80058ba:	4639      	mov	r1, r7
 80058bc:	f7fa fc54 	bl	8000168 <__aeabi_dsub>
 80058c0:	a37b      	add	r3, pc, #492	; (adr r3, 8005ab0 <__ieee754_rem_pio2+0x2f8>)
 80058c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c6:	e7e0      	b.n	800588a <__ieee754_rem_pio2+0xd2>
 80058c8:	4a84      	ldr	r2, [pc, #528]	; (8005adc <__ieee754_rem_pio2+0x324>)
 80058ca:	4592      	cmp	sl, r2
 80058cc:	f300 80d5 	bgt.w	8005a7a <__ieee754_rem_pio2+0x2c2>
 80058d0:	f000 ffe6 	bl	80068a0 <fabs>
 80058d4:	a378      	add	r3, pc, #480	; (adr r3, 8005ab8 <__ieee754_rem_pio2+0x300>)
 80058d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058da:	4606      	mov	r6, r0
 80058dc:	460f      	mov	r7, r1
 80058de:	f7fa fdfb 	bl	80004d8 <__aeabi_dmul>
 80058e2:	2200      	movs	r2, #0
 80058e4:	4b7e      	ldr	r3, [pc, #504]	; (8005ae0 <__ieee754_rem_pio2+0x328>)
 80058e6:	f7fa fc41 	bl	800016c <__adddf3>
 80058ea:	f7fb f88f 	bl	8000a0c <__aeabi_d2iz>
 80058ee:	4605      	mov	r5, r0
 80058f0:	f7fa fd88 	bl	8000404 <__aeabi_i2d>
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80058fc:	a366      	add	r3, pc, #408	; (adr r3, 8005a98 <__ieee754_rem_pio2+0x2e0>)
 80058fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005902:	f7fa fde9 	bl	80004d8 <__aeabi_dmul>
 8005906:	4602      	mov	r2, r0
 8005908:	460b      	mov	r3, r1
 800590a:	4630      	mov	r0, r6
 800590c:	4639      	mov	r1, r7
 800590e:	f7fa fc2b 	bl	8000168 <__aeabi_dsub>
 8005912:	a363      	add	r3, pc, #396	; (adr r3, 8005aa0 <__ieee754_rem_pio2+0x2e8>)
 8005914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005918:	4680      	mov	r8, r0
 800591a:	4689      	mov	r9, r1
 800591c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005920:	f7fa fdda 	bl	80004d8 <__aeabi_dmul>
 8005924:	2d1f      	cmp	r5, #31
 8005926:	4606      	mov	r6, r0
 8005928:	460f      	mov	r7, r1
 800592a:	dc0e      	bgt.n	800594a <__ieee754_rem_pio2+0x192>
 800592c:	4b6d      	ldr	r3, [pc, #436]	; (8005ae4 <__ieee754_rem_pio2+0x32c>)
 800592e:	1e6a      	subs	r2, r5, #1
 8005930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005934:	4553      	cmp	r3, sl
 8005936:	d008      	beq.n	800594a <__ieee754_rem_pio2+0x192>
 8005938:	4632      	mov	r2, r6
 800593a:	463b      	mov	r3, r7
 800593c:	4640      	mov	r0, r8
 800593e:	4649      	mov	r1, r9
 8005940:	f7fa fc12 	bl	8000168 <__aeabi_dsub>
 8005944:	e9c4 0100 	strd	r0, r1, [r4]
 8005948:	e013      	b.n	8005972 <__ieee754_rem_pio2+0x1ba>
 800594a:	463b      	mov	r3, r7
 800594c:	4632      	mov	r2, r6
 800594e:	4640      	mov	r0, r8
 8005950:	4649      	mov	r1, r9
 8005952:	f7fa fc09 	bl	8000168 <__aeabi_dsub>
 8005956:	ea4f 532a 	mov.w	r3, sl, asr #20
 800595a:	9305      	str	r3, [sp, #20]
 800595c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005960:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8005964:	f1ba 0f10 	cmp.w	sl, #16
 8005968:	dc1f      	bgt.n	80059aa <__ieee754_rem_pio2+0x1f2>
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	e9c4 2300 	strd	r2, r3, [r4]
 8005972:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8005976:	4640      	mov	r0, r8
 8005978:	4653      	mov	r3, sl
 800597a:	4649      	mov	r1, r9
 800597c:	f7fa fbf4 	bl	8000168 <__aeabi_dsub>
 8005980:	4632      	mov	r2, r6
 8005982:	463b      	mov	r3, r7
 8005984:	f7fa fbf0 	bl	8000168 <__aeabi_dsub>
 8005988:	460b      	mov	r3, r1
 800598a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800598e:	9904      	ldr	r1, [sp, #16]
 8005990:	4602      	mov	r2, r0
 8005992:	2900      	cmp	r1, #0
 8005994:	f6bf af47 	bge.w	8005826 <__ieee754_rem_pio2+0x6e>
 8005998:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800599c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80059a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80059a4:	60e3      	str	r3, [r4, #12]
 80059a6:	426d      	negs	r5, r5
 80059a8:	e73d      	b.n	8005826 <__ieee754_rem_pio2+0x6e>
 80059aa:	a33f      	add	r3, pc, #252	; (adr r3, 8005aa8 <__ieee754_rem_pio2+0x2f0>)
 80059ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059b4:	f7fa fd90 	bl	80004d8 <__aeabi_dmul>
 80059b8:	4606      	mov	r6, r0
 80059ba:	460f      	mov	r7, r1
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	4640      	mov	r0, r8
 80059c2:	4649      	mov	r1, r9
 80059c4:	f7fa fbd0 	bl	8000168 <__aeabi_dsub>
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	4682      	mov	sl, r0
 80059ce:	468b      	mov	fp, r1
 80059d0:	4640      	mov	r0, r8
 80059d2:	4649      	mov	r1, r9
 80059d4:	f7fa fbc8 	bl	8000168 <__aeabi_dsub>
 80059d8:	4632      	mov	r2, r6
 80059da:	463b      	mov	r3, r7
 80059dc:	f7fa fbc4 	bl	8000168 <__aeabi_dsub>
 80059e0:	a333      	add	r3, pc, #204	; (adr r3, 8005ab0 <__ieee754_rem_pio2+0x2f8>)
 80059e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e6:	4606      	mov	r6, r0
 80059e8:	460f      	mov	r7, r1
 80059ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059ee:	f7fa fd73 	bl	80004d8 <__aeabi_dmul>
 80059f2:	4632      	mov	r2, r6
 80059f4:	463b      	mov	r3, r7
 80059f6:	f7fa fbb7 	bl	8000168 <__aeabi_dsub>
 80059fa:	4602      	mov	r2, r0
 80059fc:	460b      	mov	r3, r1
 80059fe:	4606      	mov	r6, r0
 8005a00:	460f      	mov	r7, r1
 8005a02:	4650      	mov	r0, sl
 8005a04:	4659      	mov	r1, fp
 8005a06:	f7fa fbaf 	bl	8000168 <__aeabi_dsub>
 8005a0a:	9a05      	ldr	r2, [sp, #20]
 8005a0c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b31      	cmp	r3, #49	; 0x31
 8005a14:	dc06      	bgt.n	8005a24 <__ieee754_rem_pio2+0x26c>
 8005a16:	4602      	mov	r2, r0
 8005a18:	460b      	mov	r3, r1
 8005a1a:	46d0      	mov	r8, sl
 8005a1c:	46d9      	mov	r9, fp
 8005a1e:	e9c4 2300 	strd	r2, r3, [r4]
 8005a22:	e7a6      	b.n	8005972 <__ieee754_rem_pio2+0x1ba>
 8005a24:	a326      	add	r3, pc, #152	; (adr r3, 8005ac0 <__ieee754_rem_pio2+0x308>)
 8005a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a2e:	f7fa fd53 	bl	80004d8 <__aeabi_dmul>
 8005a32:	4606      	mov	r6, r0
 8005a34:	460f      	mov	r7, r1
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4650      	mov	r0, sl
 8005a3c:	4659      	mov	r1, fp
 8005a3e:	f7fa fb93 	bl	8000168 <__aeabi_dsub>
 8005a42:	4602      	mov	r2, r0
 8005a44:	460b      	mov	r3, r1
 8005a46:	4680      	mov	r8, r0
 8005a48:	4689      	mov	r9, r1
 8005a4a:	4650      	mov	r0, sl
 8005a4c:	4659      	mov	r1, fp
 8005a4e:	f7fa fb8b 	bl	8000168 <__aeabi_dsub>
 8005a52:	4632      	mov	r2, r6
 8005a54:	463b      	mov	r3, r7
 8005a56:	f7fa fb87 	bl	8000168 <__aeabi_dsub>
 8005a5a:	a31b      	add	r3, pc, #108	; (adr r3, 8005ac8 <__ieee754_rem_pio2+0x310>)
 8005a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a60:	4606      	mov	r6, r0
 8005a62:	460f      	mov	r7, r1
 8005a64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a68:	f7fa fd36 	bl	80004d8 <__aeabi_dmul>
 8005a6c:	4632      	mov	r2, r6
 8005a6e:	463b      	mov	r3, r7
 8005a70:	f7fa fb7a 	bl	8000168 <__aeabi_dsub>
 8005a74:	4606      	mov	r6, r0
 8005a76:	460f      	mov	r7, r1
 8005a78:	e75e      	b.n	8005938 <__ieee754_rem_pio2+0x180>
 8005a7a:	4a1b      	ldr	r2, [pc, #108]	; (8005ae8 <__ieee754_rem_pio2+0x330>)
 8005a7c:	4592      	cmp	sl, r2
 8005a7e:	dd35      	ble.n	8005aec <__ieee754_rem_pio2+0x334>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	f7fa fb70 	bl	8000168 <__aeabi_dsub>
 8005a88:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005a8c:	e9c4 0100 	strd	r0, r1, [r4]
 8005a90:	e6a2      	b.n	80057d8 <__ieee754_rem_pio2+0x20>
 8005a92:	bf00      	nop
 8005a94:	f3af 8000 	nop.w
 8005a98:	54400000 	.word	0x54400000
 8005a9c:	3ff921fb 	.word	0x3ff921fb
 8005aa0:	1a626331 	.word	0x1a626331
 8005aa4:	3dd0b461 	.word	0x3dd0b461
 8005aa8:	1a600000 	.word	0x1a600000
 8005aac:	3dd0b461 	.word	0x3dd0b461
 8005ab0:	2e037073 	.word	0x2e037073
 8005ab4:	3ba3198a 	.word	0x3ba3198a
 8005ab8:	6dc9c883 	.word	0x6dc9c883
 8005abc:	3fe45f30 	.word	0x3fe45f30
 8005ac0:	2e000000 	.word	0x2e000000
 8005ac4:	3ba3198a 	.word	0x3ba3198a
 8005ac8:	252049c1 	.word	0x252049c1
 8005acc:	397b839a 	.word	0x397b839a
 8005ad0:	3fe921fb 	.word	0x3fe921fb
 8005ad4:	4002d97b 	.word	0x4002d97b
 8005ad8:	3ff921fb 	.word	0x3ff921fb
 8005adc:	413921fb 	.word	0x413921fb
 8005ae0:	3fe00000 	.word	0x3fe00000
 8005ae4:	08006bac 	.word	0x08006bac
 8005ae8:	7fefffff 	.word	0x7fefffff
 8005aec:	ea4f 552a 	mov.w	r5, sl, asr #20
 8005af0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005af4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8005af8:	460f      	mov	r7, r1
 8005afa:	4606      	mov	r6, r0
 8005afc:	f7fa ff86 	bl	8000a0c <__aeabi_d2iz>
 8005b00:	f7fa fc80 	bl	8000404 <__aeabi_i2d>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	4630      	mov	r0, r6
 8005b0a:	4639      	mov	r1, r7
 8005b0c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005b10:	f7fa fb2a 	bl	8000168 <__aeabi_dsub>
 8005b14:	2200      	movs	r2, #0
 8005b16:	4b1e      	ldr	r3, [pc, #120]	; (8005b90 <__ieee754_rem_pio2+0x3d8>)
 8005b18:	f7fa fcde 	bl	80004d8 <__aeabi_dmul>
 8005b1c:	460f      	mov	r7, r1
 8005b1e:	4606      	mov	r6, r0
 8005b20:	f7fa ff74 	bl	8000a0c <__aeabi_d2iz>
 8005b24:	f7fa fc6e 	bl	8000404 <__aeabi_i2d>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	4630      	mov	r0, r6
 8005b2e:	4639      	mov	r1, r7
 8005b30:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005b34:	f7fa fb18 	bl	8000168 <__aeabi_dsub>
 8005b38:	2200      	movs	r2, #0
 8005b3a:	4b15      	ldr	r3, [pc, #84]	; (8005b90 <__ieee754_rem_pio2+0x3d8>)
 8005b3c:	f7fa fccc 	bl	80004d8 <__aeabi_dmul>
 8005b40:	f04f 0803 	mov.w	r8, #3
 8005b44:	2600      	movs	r6, #0
 8005b46:	2700      	movs	r7, #0
 8005b48:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005b4c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8005b50:	4632      	mov	r2, r6
 8005b52:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8005b56:	463b      	mov	r3, r7
 8005b58:	46c2      	mov	sl, r8
 8005b5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b5e:	f7fa ff23 	bl	80009a8 <__aeabi_dcmpeq>
 8005b62:	2800      	cmp	r0, #0
 8005b64:	d1f4      	bne.n	8005b50 <__ieee754_rem_pio2+0x398>
 8005b66:	4b0b      	ldr	r3, [pc, #44]	; (8005b94 <__ieee754_rem_pio2+0x3dc>)
 8005b68:	462a      	mov	r2, r5
 8005b6a:	9301      	str	r3, [sp, #4]
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	4621      	mov	r1, r4
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	a806      	add	r0, sp, #24
 8005b74:	4653      	mov	r3, sl
 8005b76:	f000 f8cd 	bl	8005d14 <__kernel_rem_pio2>
 8005b7a:	9b04      	ldr	r3, [sp, #16]
 8005b7c:	4605      	mov	r5, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f6bf ae51 	bge.w	8005826 <__ieee754_rem_pio2+0x6e>
 8005b84:	6863      	ldr	r3, [r4, #4]
 8005b86:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005b8a:	6063      	str	r3, [r4, #4]
 8005b8c:	68e3      	ldr	r3, [r4, #12]
 8005b8e:	e707      	b.n	80059a0 <__ieee754_rem_pio2+0x1e8>
 8005b90:	41700000 	.word	0x41700000
 8005b94:	08006c2c 	.word	0x08006c2c

08005b98 <__kernel_cos>:
 8005b98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b9c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005ba0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005ba4:	4680      	mov	r8, r0
 8005ba6:	460f      	mov	r7, r1
 8005ba8:	e9cd 2300 	strd	r2, r3, [sp]
 8005bac:	da04      	bge.n	8005bb8 <__kernel_cos+0x20>
 8005bae:	f7fa ff2d 	bl	8000a0c <__aeabi_d2iz>
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	f000 8086 	beq.w	8005cc4 <__kernel_cos+0x12c>
 8005bb8:	4642      	mov	r2, r8
 8005bba:	463b      	mov	r3, r7
 8005bbc:	4640      	mov	r0, r8
 8005bbe:	4639      	mov	r1, r7
 8005bc0:	f7fa fc8a 	bl	80004d8 <__aeabi_dmul>
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	4b4e      	ldr	r3, [pc, #312]	; (8005d00 <__kernel_cos+0x168>)
 8005bc8:	4604      	mov	r4, r0
 8005bca:	460d      	mov	r5, r1
 8005bcc:	f7fa fc84 	bl	80004d8 <__aeabi_dmul>
 8005bd0:	a33f      	add	r3, pc, #252	; (adr r3, 8005cd0 <__kernel_cos+0x138>)
 8005bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd6:	4682      	mov	sl, r0
 8005bd8:	468b      	mov	fp, r1
 8005bda:	4620      	mov	r0, r4
 8005bdc:	4629      	mov	r1, r5
 8005bde:	f7fa fc7b 	bl	80004d8 <__aeabi_dmul>
 8005be2:	a33d      	add	r3, pc, #244	; (adr r3, 8005cd8 <__kernel_cos+0x140>)
 8005be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be8:	f7fa fac0 	bl	800016c <__adddf3>
 8005bec:	4622      	mov	r2, r4
 8005bee:	462b      	mov	r3, r5
 8005bf0:	f7fa fc72 	bl	80004d8 <__aeabi_dmul>
 8005bf4:	a33a      	add	r3, pc, #232	; (adr r3, 8005ce0 <__kernel_cos+0x148>)
 8005bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfa:	f7fa fab5 	bl	8000168 <__aeabi_dsub>
 8005bfe:	4622      	mov	r2, r4
 8005c00:	462b      	mov	r3, r5
 8005c02:	f7fa fc69 	bl	80004d8 <__aeabi_dmul>
 8005c06:	a338      	add	r3, pc, #224	; (adr r3, 8005ce8 <__kernel_cos+0x150>)
 8005c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0c:	f7fa faae 	bl	800016c <__adddf3>
 8005c10:	4622      	mov	r2, r4
 8005c12:	462b      	mov	r3, r5
 8005c14:	f7fa fc60 	bl	80004d8 <__aeabi_dmul>
 8005c18:	a335      	add	r3, pc, #212	; (adr r3, 8005cf0 <__kernel_cos+0x158>)
 8005c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1e:	f7fa faa3 	bl	8000168 <__aeabi_dsub>
 8005c22:	4622      	mov	r2, r4
 8005c24:	462b      	mov	r3, r5
 8005c26:	f7fa fc57 	bl	80004d8 <__aeabi_dmul>
 8005c2a:	a333      	add	r3, pc, #204	; (adr r3, 8005cf8 <__kernel_cos+0x160>)
 8005c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c30:	f7fa fa9c 	bl	800016c <__adddf3>
 8005c34:	4622      	mov	r2, r4
 8005c36:	462b      	mov	r3, r5
 8005c38:	f7fa fc4e 	bl	80004d8 <__aeabi_dmul>
 8005c3c:	4622      	mov	r2, r4
 8005c3e:	462b      	mov	r3, r5
 8005c40:	f7fa fc4a 	bl	80004d8 <__aeabi_dmul>
 8005c44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c48:	4604      	mov	r4, r0
 8005c4a:	460d      	mov	r5, r1
 8005c4c:	4640      	mov	r0, r8
 8005c4e:	4639      	mov	r1, r7
 8005c50:	f7fa fc42 	bl	80004d8 <__aeabi_dmul>
 8005c54:	460b      	mov	r3, r1
 8005c56:	4602      	mov	r2, r0
 8005c58:	4629      	mov	r1, r5
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f7fa fa84 	bl	8000168 <__aeabi_dsub>
 8005c60:	4b28      	ldr	r3, [pc, #160]	; (8005d04 <__kernel_cos+0x16c>)
 8005c62:	4680      	mov	r8, r0
 8005c64:	429e      	cmp	r6, r3
 8005c66:	4689      	mov	r9, r1
 8005c68:	dc0e      	bgt.n	8005c88 <__kernel_cos+0xf0>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	4650      	mov	r0, sl
 8005c70:	4659      	mov	r1, fp
 8005c72:	f7fa fa79 	bl	8000168 <__aeabi_dsub>
 8005c76:	4602      	mov	r2, r0
 8005c78:	2000      	movs	r0, #0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4922      	ldr	r1, [pc, #136]	; (8005d08 <__kernel_cos+0x170>)
 8005c7e:	f7fa fa73 	bl	8000168 <__aeabi_dsub>
 8005c82:	b003      	add	sp, #12
 8005c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c88:	2400      	movs	r4, #0
 8005c8a:	4b20      	ldr	r3, [pc, #128]	; (8005d0c <__kernel_cos+0x174>)
 8005c8c:	4622      	mov	r2, r4
 8005c8e:	429e      	cmp	r6, r3
 8005c90:	bfcc      	ite	gt
 8005c92:	4d1f      	ldrgt	r5, [pc, #124]	; (8005d10 <__kernel_cos+0x178>)
 8005c94:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005c98:	462b      	mov	r3, r5
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	491a      	ldr	r1, [pc, #104]	; (8005d08 <__kernel_cos+0x170>)
 8005c9e:	f7fa fa63 	bl	8000168 <__aeabi_dsub>
 8005ca2:	4622      	mov	r2, r4
 8005ca4:	4606      	mov	r6, r0
 8005ca6:	460f      	mov	r7, r1
 8005ca8:	462b      	mov	r3, r5
 8005caa:	4650      	mov	r0, sl
 8005cac:	4659      	mov	r1, fp
 8005cae:	f7fa fa5b 	bl	8000168 <__aeabi_dsub>
 8005cb2:	4642      	mov	r2, r8
 8005cb4:	464b      	mov	r3, r9
 8005cb6:	f7fa fa57 	bl	8000168 <__aeabi_dsub>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	4639      	mov	r1, r7
 8005cc2:	e7dc      	b.n	8005c7e <__kernel_cos+0xe6>
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	4910      	ldr	r1, [pc, #64]	; (8005d08 <__kernel_cos+0x170>)
 8005cc8:	e7db      	b.n	8005c82 <__kernel_cos+0xea>
 8005cca:	bf00      	nop
 8005ccc:	f3af 8000 	nop.w
 8005cd0:	be8838d4 	.word	0xbe8838d4
 8005cd4:	bda8fae9 	.word	0xbda8fae9
 8005cd8:	bdb4b1c4 	.word	0xbdb4b1c4
 8005cdc:	3e21ee9e 	.word	0x3e21ee9e
 8005ce0:	809c52ad 	.word	0x809c52ad
 8005ce4:	3e927e4f 	.word	0x3e927e4f
 8005ce8:	19cb1590 	.word	0x19cb1590
 8005cec:	3efa01a0 	.word	0x3efa01a0
 8005cf0:	16c15177 	.word	0x16c15177
 8005cf4:	3f56c16c 	.word	0x3f56c16c
 8005cf8:	5555554c 	.word	0x5555554c
 8005cfc:	3fa55555 	.word	0x3fa55555
 8005d00:	3fe00000 	.word	0x3fe00000
 8005d04:	3fd33332 	.word	0x3fd33332
 8005d08:	3ff00000 	.word	0x3ff00000
 8005d0c:	3fe90000 	.word	0x3fe90000
 8005d10:	3fd20000 	.word	0x3fd20000

08005d14 <__kernel_rem_pio2>:
 8005d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d18:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005d1c:	9308      	str	r3, [sp, #32]
 8005d1e:	9101      	str	r1, [sp, #4]
 8005d20:	4bc0      	ldr	r3, [pc, #768]	; (8006024 <__kernel_rem_pio2+0x310>)
 8005d22:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8005d24:	f112 0f14 	cmn.w	r2, #20
 8005d28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005d2c:	bfa8      	it	ge
 8005d2e:	1ed4      	subge	r4, r2, #3
 8005d30:	9304      	str	r3, [sp, #16]
 8005d32:	9b08      	ldr	r3, [sp, #32]
 8005d34:	bfb8      	it	lt
 8005d36:	2400      	movlt	r4, #0
 8005d38:	f103 33ff 	add.w	r3, r3, #4294967295
 8005d3c:	9306      	str	r3, [sp, #24]
 8005d3e:	bfa4      	itt	ge
 8005d40:	2318      	movge	r3, #24
 8005d42:	fb94 f4f3 	sdivge	r4, r4, r3
 8005d46:	f06f 0317 	mvn.w	r3, #23
 8005d4a:	fb04 3303 	mla	r3, r4, r3, r3
 8005d4e:	eb03 0a02 	add.w	sl, r3, r2
 8005d52:	9a06      	ldr	r2, [sp, #24]
 8005d54:	9b04      	ldr	r3, [sp, #16]
 8005d56:	1aa7      	subs	r7, r4, r2
 8005d58:	eb03 0802 	add.w	r8, r3, r2
 8005d5c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005d5e:	2500      	movs	r5, #0
 8005d60:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005d64:	2200      	movs	r2, #0
 8005d66:	2300      	movs	r3, #0
 8005d68:	9009      	str	r0, [sp, #36]	; 0x24
 8005d6a:	ae20      	add	r6, sp, #128	; 0x80
 8005d6c:	4545      	cmp	r5, r8
 8005d6e:	dd19      	ble.n	8005da4 <__kernel_rem_pio2+0x90>
 8005d70:	9b08      	ldr	r3, [sp, #32]
 8005d72:	aa20      	add	r2, sp, #128	; 0x80
 8005d74:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005d78:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005d7c:	f1c3 0301 	rsb	r3, r3, #1
 8005d80:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8005d84:	9307      	str	r3, [sp, #28]
 8005d86:	9b07      	ldr	r3, [sp, #28]
 8005d88:	9a04      	ldr	r2, [sp, #16]
 8005d8a:	4443      	add	r3, r8
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	db35      	blt.n	8005dfc <__kernel_rem_pio2+0xe8>
 8005d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d92:	2200      	movs	r2, #0
 8005d94:	f1a3 0908 	sub.w	r9, r3, #8
 8005d98:	2300      	movs	r3, #0
 8005d9a:	462f      	mov	r7, r5
 8005d9c:	2600      	movs	r6, #0
 8005d9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005da2:	e01f      	b.n	8005de4 <__kernel_rem_pio2+0xd0>
 8005da4:	42ef      	cmn	r7, r5
 8005da6:	d40b      	bmi.n	8005dc0 <__kernel_rem_pio2+0xac>
 8005da8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005dac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005db0:	f7fa fb28 	bl	8000404 <__aeabi_i2d>
 8005db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005db8:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005dbc:	3501      	adds	r5, #1
 8005dbe:	e7d5      	b.n	8005d6c <__kernel_rem_pio2+0x58>
 8005dc0:	4610      	mov	r0, r2
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	e7f8      	b.n	8005db8 <__kernel_rem_pio2+0xa4>
 8005dc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dca:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8005dce:	f7fa fb83 	bl	80004d8 <__aeabi_dmul>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dda:	f7fa f9c7 	bl	800016c <__adddf3>
 8005dde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005de2:	3601      	adds	r6, #1
 8005de4:	9b06      	ldr	r3, [sp, #24]
 8005de6:	3f08      	subs	r7, #8
 8005de8:	429e      	cmp	r6, r3
 8005dea:	ddec      	ble.n	8005dc6 <__kernel_rem_pio2+0xb2>
 8005dec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005df0:	3508      	adds	r5, #8
 8005df2:	e8eb 2302 	strd	r2, r3, [fp], #8
 8005df6:	f108 0801 	add.w	r8, r8, #1
 8005dfa:	e7c4      	b.n	8005d86 <__kernel_rem_pio2+0x72>
 8005dfc:	9b04      	ldr	r3, [sp, #16]
 8005dfe:	aa0c      	add	r2, sp, #48	; 0x30
 8005e00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005e04:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e06:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005e08:	9f04      	ldr	r7, [sp, #16]
 8005e0a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005e0e:	930a      	str	r3, [sp, #40]	; 0x28
 8005e10:	463e      	mov	r6, r7
 8005e12:	ab98      	add	r3, sp, #608	; 0x260
 8005e14:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8005e18:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005e1c:	f8cd b008 	str.w	fp, [sp, #8]
 8005e20:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8005e24:	2e00      	cmp	r6, #0
 8005e26:	dc71      	bgt.n	8005f0c <__kernel_rem_pio2+0x1f8>
 8005e28:	4652      	mov	r2, sl
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	4629      	mov	r1, r5
 8005e2e:	f000 fdbb 	bl	80069a8 <scalbn>
 8005e32:	2200      	movs	r2, #0
 8005e34:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005e38:	4604      	mov	r4, r0
 8005e3a:	460d      	mov	r5, r1
 8005e3c:	f7fa fb4c 	bl	80004d8 <__aeabi_dmul>
 8005e40:	f000 fd32 	bl	80068a8 <floor>
 8005e44:	2200      	movs	r2, #0
 8005e46:	4b78      	ldr	r3, [pc, #480]	; (8006028 <__kernel_rem_pio2+0x314>)
 8005e48:	f7fa fb46 	bl	80004d8 <__aeabi_dmul>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4620      	mov	r0, r4
 8005e52:	4629      	mov	r1, r5
 8005e54:	f7fa f988 	bl	8000168 <__aeabi_dsub>
 8005e58:	460d      	mov	r5, r1
 8005e5a:	4604      	mov	r4, r0
 8005e5c:	f7fa fdd6 	bl	8000a0c <__aeabi_d2iz>
 8005e60:	9007      	str	r0, [sp, #28]
 8005e62:	f7fa facf 	bl	8000404 <__aeabi_i2d>
 8005e66:	4602      	mov	r2, r0
 8005e68:	460b      	mov	r3, r1
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	f7fa f97b 	bl	8000168 <__aeabi_dsub>
 8005e72:	f1ba 0f00 	cmp.w	sl, #0
 8005e76:	4680      	mov	r8, r0
 8005e78:	4689      	mov	r9, r1
 8005e7a:	dd70      	ble.n	8005f5e <__kernel_rem_pio2+0x24a>
 8005e7c:	1e7a      	subs	r2, r7, #1
 8005e7e:	ab0c      	add	r3, sp, #48	; 0x30
 8005e80:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005e84:	9c07      	ldr	r4, [sp, #28]
 8005e86:	f1ca 0118 	rsb	r1, sl, #24
 8005e8a:	fa40 f301 	asr.w	r3, r0, r1
 8005e8e:	441c      	add	r4, r3
 8005e90:	408b      	lsls	r3, r1
 8005e92:	1ac0      	subs	r0, r0, r3
 8005e94:	ab0c      	add	r3, sp, #48	; 0x30
 8005e96:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005e9a:	f1ca 0317 	rsb	r3, sl, #23
 8005e9e:	9407      	str	r4, [sp, #28]
 8005ea0:	fa40 f303 	asr.w	r3, r0, r3
 8005ea4:	9302      	str	r3, [sp, #8]
 8005ea6:	9b02      	ldr	r3, [sp, #8]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	dd66      	ble.n	8005f7a <__kernel_rem_pio2+0x266>
 8005eac:	2200      	movs	r2, #0
 8005eae:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005eb2:	4614      	mov	r4, r2
 8005eb4:	9b07      	ldr	r3, [sp, #28]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	9307      	str	r3, [sp, #28]
 8005eba:	4297      	cmp	r7, r2
 8005ebc:	f300 809f 	bgt.w	8005ffe <__kernel_rem_pio2+0x2ea>
 8005ec0:	f1ba 0f00 	cmp.w	sl, #0
 8005ec4:	dd07      	ble.n	8005ed6 <__kernel_rem_pio2+0x1c2>
 8005ec6:	f1ba 0f01 	cmp.w	sl, #1
 8005eca:	f000 80b9 	beq.w	8006040 <__kernel_rem_pio2+0x32c>
 8005ece:	f1ba 0f02 	cmp.w	sl, #2
 8005ed2:	f000 80bf 	beq.w	8006054 <__kernel_rem_pio2+0x340>
 8005ed6:	9b02      	ldr	r3, [sp, #8]
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d14e      	bne.n	8005f7a <__kernel_rem_pio2+0x266>
 8005edc:	4642      	mov	r2, r8
 8005ede:	464b      	mov	r3, r9
 8005ee0:	2000      	movs	r0, #0
 8005ee2:	4952      	ldr	r1, [pc, #328]	; (800602c <__kernel_rem_pio2+0x318>)
 8005ee4:	f7fa f940 	bl	8000168 <__aeabi_dsub>
 8005ee8:	4680      	mov	r8, r0
 8005eea:	4689      	mov	r9, r1
 8005eec:	2c00      	cmp	r4, #0
 8005eee:	d044      	beq.n	8005f7a <__kernel_rem_pio2+0x266>
 8005ef0:	4652      	mov	r2, sl
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	494d      	ldr	r1, [pc, #308]	; (800602c <__kernel_rem_pio2+0x318>)
 8005ef6:	f000 fd57 	bl	80069a8 <scalbn>
 8005efa:	4602      	mov	r2, r0
 8005efc:	460b      	mov	r3, r1
 8005efe:	4640      	mov	r0, r8
 8005f00:	4649      	mov	r1, r9
 8005f02:	f7fa f931 	bl	8000168 <__aeabi_dsub>
 8005f06:	4680      	mov	r8, r0
 8005f08:	4689      	mov	r9, r1
 8005f0a:	e036      	b.n	8005f7a <__kernel_rem_pio2+0x266>
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	4b48      	ldr	r3, [pc, #288]	; (8006030 <__kernel_rem_pio2+0x31c>)
 8005f10:	4620      	mov	r0, r4
 8005f12:	4629      	mov	r1, r5
 8005f14:	f7fa fae0 	bl	80004d8 <__aeabi_dmul>
 8005f18:	f7fa fd78 	bl	8000a0c <__aeabi_d2iz>
 8005f1c:	f7fa fa72 	bl	8000404 <__aeabi_i2d>
 8005f20:	2200      	movs	r2, #0
 8005f22:	4b44      	ldr	r3, [pc, #272]	; (8006034 <__kernel_rem_pio2+0x320>)
 8005f24:	4680      	mov	r8, r0
 8005f26:	4689      	mov	r9, r1
 8005f28:	f7fa fad6 	bl	80004d8 <__aeabi_dmul>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	4620      	mov	r0, r4
 8005f32:	4629      	mov	r1, r5
 8005f34:	f7fa f918 	bl	8000168 <__aeabi_dsub>
 8005f38:	f7fa fd68 	bl	8000a0c <__aeabi_d2iz>
 8005f3c:	9b02      	ldr	r3, [sp, #8]
 8005f3e:	3e01      	subs	r6, #1
 8005f40:	f843 0b04 	str.w	r0, [r3], #4
 8005f44:	9302      	str	r3, [sp, #8]
 8005f46:	ab70      	add	r3, sp, #448	; 0x1c0
 8005f48:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005f4c:	4640      	mov	r0, r8
 8005f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f52:	4649      	mov	r1, r9
 8005f54:	f7fa f90a 	bl	800016c <__adddf3>
 8005f58:	4604      	mov	r4, r0
 8005f5a:	460d      	mov	r5, r1
 8005f5c:	e762      	b.n	8005e24 <__kernel_rem_pio2+0x110>
 8005f5e:	d105      	bne.n	8005f6c <__kernel_rem_pio2+0x258>
 8005f60:	1e7b      	subs	r3, r7, #1
 8005f62:	aa0c      	add	r2, sp, #48	; 0x30
 8005f64:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005f68:	15c3      	asrs	r3, r0, #23
 8005f6a:	e79b      	b.n	8005ea4 <__kernel_rem_pio2+0x190>
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	4b32      	ldr	r3, [pc, #200]	; (8006038 <__kernel_rem_pio2+0x324>)
 8005f70:	f7fa fd38 	bl	80009e4 <__aeabi_dcmpge>
 8005f74:	2800      	cmp	r0, #0
 8005f76:	d13f      	bne.n	8005ff8 <__kernel_rem_pio2+0x2e4>
 8005f78:	9002      	str	r0, [sp, #8]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	4640      	mov	r0, r8
 8005f80:	4649      	mov	r1, r9
 8005f82:	f7fa fd11 	bl	80009a8 <__aeabi_dcmpeq>
 8005f86:	2800      	cmp	r0, #0
 8005f88:	f000 80b5 	beq.w	80060f6 <__kernel_rem_pio2+0x3e2>
 8005f8c:	1e7c      	subs	r4, r7, #1
 8005f8e:	4623      	mov	r3, r4
 8005f90:	2200      	movs	r2, #0
 8005f92:	9904      	ldr	r1, [sp, #16]
 8005f94:	428b      	cmp	r3, r1
 8005f96:	da64      	bge.n	8006062 <__kernel_rem_pio2+0x34e>
 8005f98:	2a00      	cmp	r2, #0
 8005f9a:	d078      	beq.n	800608e <__kernel_rem_pio2+0x37a>
 8005f9c:	ab0c      	add	r3, sp, #48	; 0x30
 8005f9e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005fa2:	f1aa 0a18 	sub.w	sl, sl, #24
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 80a3 	beq.w	80060f2 <__kernel_rem_pio2+0x3de>
 8005fac:	4652      	mov	r2, sl
 8005fae:	2000      	movs	r0, #0
 8005fb0:	491e      	ldr	r1, [pc, #120]	; (800602c <__kernel_rem_pio2+0x318>)
 8005fb2:	f000 fcf9 	bl	80069a8 <scalbn>
 8005fb6:	46a2      	mov	sl, r4
 8005fb8:	4606      	mov	r6, r0
 8005fba:	460f      	mov	r7, r1
 8005fbc:	f04f 0800 	mov.w	r8, #0
 8005fc0:	00e3      	lsls	r3, r4, #3
 8005fc2:	9306      	str	r3, [sp, #24]
 8005fc4:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8006030 <__kernel_rem_pio2+0x31c>
 8005fc8:	ab70      	add	r3, sp, #448	; 0x1c0
 8005fca:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8005fce:	f1ba 0f00 	cmp.w	sl, #0
 8005fd2:	f280 80c6 	bge.w	8006162 <__kernel_rem_pio2+0x44e>
 8005fd6:	4627      	mov	r7, r4
 8005fd8:	f04f 0800 	mov.w	r8, #0
 8005fdc:	2f00      	cmp	r7, #0
 8005fde:	f2c0 80f3 	blt.w	80061c8 <__kernel_rem_pio2+0x4b4>
 8005fe2:	4b16      	ldr	r3, [pc, #88]	; (800603c <__kernel_rem_pio2+0x328>)
 8005fe4:	f04f 0a00 	mov.w	sl, #0
 8005fe8:	461d      	mov	r5, r3
 8005fea:	ab70      	add	r3, sp, #448	; 0x1c0
 8005fec:	f04f 0b00 	mov.w	fp, #0
 8005ff0:	2600      	movs	r6, #0
 8005ff2:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8005ff6:	e0d9      	b.n	80061ac <__kernel_rem_pio2+0x498>
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	9302      	str	r3, [sp, #8]
 8005ffc:	e756      	b.n	8005eac <__kernel_rem_pio2+0x198>
 8005ffe:	f8db 3000 	ldr.w	r3, [fp]
 8006002:	b954      	cbnz	r4, 800601a <__kernel_rem_pio2+0x306>
 8006004:	b123      	cbz	r3, 8006010 <__kernel_rem_pio2+0x2fc>
 8006006:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800600a:	f8cb 3000 	str.w	r3, [fp]
 800600e:	2301      	movs	r3, #1
 8006010:	461c      	mov	r4, r3
 8006012:	3201      	adds	r2, #1
 8006014:	f10b 0b04 	add.w	fp, fp, #4
 8006018:	e74f      	b.n	8005eba <__kernel_rem_pio2+0x1a6>
 800601a:	1acb      	subs	r3, r1, r3
 800601c:	f8cb 3000 	str.w	r3, [fp]
 8006020:	4623      	mov	r3, r4
 8006022:	e7f5      	b.n	8006010 <__kernel_rem_pio2+0x2fc>
 8006024:	08006d78 	.word	0x08006d78
 8006028:	40200000 	.word	0x40200000
 800602c:	3ff00000 	.word	0x3ff00000
 8006030:	3e700000 	.word	0x3e700000
 8006034:	41700000 	.word	0x41700000
 8006038:	3fe00000 	.word	0x3fe00000
 800603c:	08006d38 	.word	0x08006d38
 8006040:	1e7a      	subs	r2, r7, #1
 8006042:	ab0c      	add	r3, sp, #48	; 0x30
 8006044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006048:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800604c:	a90c      	add	r1, sp, #48	; 0x30
 800604e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006052:	e740      	b.n	8005ed6 <__kernel_rem_pio2+0x1c2>
 8006054:	1e7a      	subs	r2, r7, #1
 8006056:	ab0c      	add	r3, sp, #48	; 0x30
 8006058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800605c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006060:	e7f4      	b.n	800604c <__kernel_rem_pio2+0x338>
 8006062:	a90c      	add	r1, sp, #48	; 0x30
 8006064:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006068:	3b01      	subs	r3, #1
 800606a:	430a      	orrs	r2, r1
 800606c:	e791      	b.n	8005f92 <__kernel_rem_pio2+0x27e>
 800606e:	3401      	adds	r4, #1
 8006070:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006074:	2a00      	cmp	r2, #0
 8006076:	d0fa      	beq.n	800606e <__kernel_rem_pio2+0x35a>
 8006078:	9b08      	ldr	r3, [sp, #32]
 800607a:	1c7e      	adds	r6, r7, #1
 800607c:	18fd      	adds	r5, r7, r3
 800607e:	ab20      	add	r3, sp, #128	; 0x80
 8006080:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006084:	443c      	add	r4, r7
 8006086:	42b4      	cmp	r4, r6
 8006088:	da04      	bge.n	8006094 <__kernel_rem_pio2+0x380>
 800608a:	4627      	mov	r7, r4
 800608c:	e6c0      	b.n	8005e10 <__kernel_rem_pio2+0xfc>
 800608e:	2401      	movs	r4, #1
 8006090:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006092:	e7ed      	b.n	8006070 <__kernel_rem_pio2+0x35c>
 8006094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006096:	462f      	mov	r7, r5
 8006098:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800609c:	f7fa f9b2 	bl	8000404 <__aeabi_i2d>
 80060a0:	f04f 0b00 	mov.w	fp, #0
 80060a4:	f04f 0800 	mov.w	r8, #0
 80060a8:	f04f 0900 	mov.w	r9, #0
 80060ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ae:	e8e7 0102 	strd	r0, r1, [r7], #8
 80060b2:	3b08      	subs	r3, #8
 80060b4:	9302      	str	r3, [sp, #8]
 80060b6:	9b06      	ldr	r3, [sp, #24]
 80060b8:	459b      	cmp	fp, r3
 80060ba:	dd07      	ble.n	80060cc <__kernel_rem_pio2+0x3b8>
 80060bc:	ab70      	add	r3, sp, #448	; 0x1c0
 80060be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80060c2:	463d      	mov	r5, r7
 80060c4:	e9c3 8900 	strd	r8, r9, [r3]
 80060c8:	3601      	adds	r6, #1
 80060ca:	e7dc      	b.n	8006086 <__kernel_rem_pio2+0x372>
 80060cc:	9902      	ldr	r1, [sp, #8]
 80060ce:	f10b 0b01 	add.w	fp, fp, #1
 80060d2:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80060d6:	9102      	str	r1, [sp, #8]
 80060d8:	e875 0102 	ldrd	r0, r1, [r5], #-8
 80060dc:	f7fa f9fc 	bl	80004d8 <__aeabi_dmul>
 80060e0:	4602      	mov	r2, r0
 80060e2:	460b      	mov	r3, r1
 80060e4:	4640      	mov	r0, r8
 80060e6:	4649      	mov	r1, r9
 80060e8:	f7fa f840 	bl	800016c <__adddf3>
 80060ec:	4680      	mov	r8, r0
 80060ee:	4689      	mov	r9, r1
 80060f0:	e7e1      	b.n	80060b6 <__kernel_rem_pio2+0x3a2>
 80060f2:	3c01      	subs	r4, #1
 80060f4:	e752      	b.n	8005f9c <__kernel_rem_pio2+0x288>
 80060f6:	f1ca 0200 	rsb	r2, sl, #0
 80060fa:	4640      	mov	r0, r8
 80060fc:	4649      	mov	r1, r9
 80060fe:	f000 fc53 	bl	80069a8 <scalbn>
 8006102:	2200      	movs	r2, #0
 8006104:	4ba5      	ldr	r3, [pc, #660]	; (800639c <__kernel_rem_pio2+0x688>)
 8006106:	4604      	mov	r4, r0
 8006108:	460d      	mov	r5, r1
 800610a:	f7fa fc6b 	bl	80009e4 <__aeabi_dcmpge>
 800610e:	b1f8      	cbz	r0, 8006150 <__kernel_rem_pio2+0x43c>
 8006110:	2200      	movs	r2, #0
 8006112:	4ba3      	ldr	r3, [pc, #652]	; (80063a0 <__kernel_rem_pio2+0x68c>)
 8006114:	4620      	mov	r0, r4
 8006116:	4629      	mov	r1, r5
 8006118:	f7fa f9de 	bl	80004d8 <__aeabi_dmul>
 800611c:	f7fa fc76 	bl	8000a0c <__aeabi_d2iz>
 8006120:	4606      	mov	r6, r0
 8006122:	f7fa f96f 	bl	8000404 <__aeabi_i2d>
 8006126:	2200      	movs	r2, #0
 8006128:	4b9c      	ldr	r3, [pc, #624]	; (800639c <__kernel_rem_pio2+0x688>)
 800612a:	f7fa f9d5 	bl	80004d8 <__aeabi_dmul>
 800612e:	460b      	mov	r3, r1
 8006130:	4602      	mov	r2, r0
 8006132:	4629      	mov	r1, r5
 8006134:	4620      	mov	r0, r4
 8006136:	f7fa f817 	bl	8000168 <__aeabi_dsub>
 800613a:	f7fa fc67 	bl	8000a0c <__aeabi_d2iz>
 800613e:	1c7c      	adds	r4, r7, #1
 8006140:	ab0c      	add	r3, sp, #48	; 0x30
 8006142:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8006146:	f10a 0a18 	add.w	sl, sl, #24
 800614a:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800614e:	e72d      	b.n	8005fac <__kernel_rem_pio2+0x298>
 8006150:	4620      	mov	r0, r4
 8006152:	4629      	mov	r1, r5
 8006154:	f7fa fc5a 	bl	8000a0c <__aeabi_d2iz>
 8006158:	ab0c      	add	r3, sp, #48	; 0x30
 800615a:	463c      	mov	r4, r7
 800615c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8006160:	e724      	b.n	8005fac <__kernel_rem_pio2+0x298>
 8006162:	ab0c      	add	r3, sp, #48	; 0x30
 8006164:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006168:	f7fa f94c 	bl	8000404 <__aeabi_i2d>
 800616c:	4632      	mov	r2, r6
 800616e:	463b      	mov	r3, r7
 8006170:	f7fa f9b2 	bl	80004d8 <__aeabi_dmul>
 8006174:	4642      	mov	r2, r8
 8006176:	e86b 0102 	strd	r0, r1, [fp], #-8
 800617a:	464b      	mov	r3, r9
 800617c:	4630      	mov	r0, r6
 800617e:	4639      	mov	r1, r7
 8006180:	f7fa f9aa 	bl	80004d8 <__aeabi_dmul>
 8006184:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006188:	4606      	mov	r6, r0
 800618a:	460f      	mov	r7, r1
 800618c:	e71f      	b.n	8005fce <__kernel_rem_pio2+0x2ba>
 800618e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8006192:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8006196:	f7fa f99f 	bl	80004d8 <__aeabi_dmul>
 800619a:	4602      	mov	r2, r0
 800619c:	460b      	mov	r3, r1
 800619e:	4650      	mov	r0, sl
 80061a0:	4659      	mov	r1, fp
 80061a2:	f7f9 ffe3 	bl	800016c <__adddf3>
 80061a6:	4682      	mov	sl, r0
 80061a8:	468b      	mov	fp, r1
 80061aa:	3601      	adds	r6, #1
 80061ac:	9b04      	ldr	r3, [sp, #16]
 80061ae:	429e      	cmp	r6, r3
 80061b0:	dc01      	bgt.n	80061b6 <__kernel_rem_pio2+0x4a2>
 80061b2:	45b0      	cmp	r8, r6
 80061b4:	daeb      	bge.n	800618e <__kernel_rem_pio2+0x47a>
 80061b6:	ab48      	add	r3, sp, #288	; 0x120
 80061b8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80061bc:	e9c3 ab00 	strd	sl, fp, [r3]
 80061c0:	3f01      	subs	r7, #1
 80061c2:	f108 0801 	add.w	r8, r8, #1
 80061c6:	e709      	b.n	8005fdc <__kernel_rem_pio2+0x2c8>
 80061c8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	dc09      	bgt.n	80061e2 <__kernel_rem_pio2+0x4ce>
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	dc34      	bgt.n	800623c <__kernel_rem_pio2+0x528>
 80061d2:	d05e      	beq.n	8006292 <__kernel_rem_pio2+0x57e>
 80061d4:	9b07      	ldr	r3, [sp, #28]
 80061d6:	f003 0007 	and.w	r0, r3, #7
 80061da:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80061de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061e2:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80061e4:	2b03      	cmp	r3, #3
 80061e6:	d1f5      	bne.n	80061d4 <__kernel_rem_pio2+0x4c0>
 80061e8:	9a06      	ldr	r2, [sp, #24]
 80061ea:	ab48      	add	r3, sp, #288	; 0x120
 80061ec:	441a      	add	r2, r3
 80061ee:	4615      	mov	r5, r2
 80061f0:	4692      	mov	sl, r2
 80061f2:	46a3      	mov	fp, r4
 80061f4:	f1bb 0f00 	cmp.w	fp, #0
 80061f8:	dc7a      	bgt.n	80062f0 <__kernel_rem_pio2+0x5dc>
 80061fa:	46aa      	mov	sl, r5
 80061fc:	46a3      	mov	fp, r4
 80061fe:	f1bb 0f01 	cmp.w	fp, #1
 8006202:	f300 8094 	bgt.w	800632e <__kernel_rem_pio2+0x61a>
 8006206:	2700      	movs	r7, #0
 8006208:	463e      	mov	r6, r7
 800620a:	2c01      	cmp	r4, #1
 800620c:	f300 80ae 	bgt.w	800636c <__kernel_rem_pio2+0x658>
 8006210:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8006214:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8006218:	9b02      	ldr	r3, [sp, #8]
 800621a:	2b00      	cmp	r3, #0
 800621c:	f040 80b0 	bne.w	8006380 <__kernel_rem_pio2+0x66c>
 8006220:	4603      	mov	r3, r0
 8006222:	462a      	mov	r2, r5
 8006224:	9801      	ldr	r0, [sp, #4]
 8006226:	e9c0 2300 	strd	r2, r3, [r0]
 800622a:	4622      	mov	r2, r4
 800622c:	460b      	mov	r3, r1
 800622e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006232:	463a      	mov	r2, r7
 8006234:	4633      	mov	r3, r6
 8006236:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800623a:	e7cb      	b.n	80061d4 <__kernel_rem_pio2+0x4c0>
 800623c:	2000      	movs	r0, #0
 800623e:	9a06      	ldr	r2, [sp, #24]
 8006240:	ab48      	add	r3, sp, #288	; 0x120
 8006242:	441a      	add	r2, r3
 8006244:	4615      	mov	r5, r2
 8006246:	46a0      	mov	r8, r4
 8006248:	4601      	mov	r1, r0
 800624a:	f1b8 0f00 	cmp.w	r8, #0
 800624e:	da3c      	bge.n	80062ca <__kernel_rem_pio2+0x5b6>
 8006250:	9b02      	ldr	r3, [sp, #8]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d040      	beq.n	80062d8 <__kernel_rem_pio2+0x5c4>
 8006256:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800625a:	4602      	mov	r2, r0
 800625c:	462b      	mov	r3, r5
 800625e:	9d01      	ldr	r5, [sp, #4]
 8006260:	2601      	movs	r6, #1
 8006262:	e9c5 2300 	strd	r2, r3, [r5]
 8006266:	460b      	mov	r3, r1
 8006268:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800626c:	f7f9 ff7c 	bl	8000168 <__aeabi_dsub>
 8006270:	4684      	mov	ip, r0
 8006272:	460f      	mov	r7, r1
 8006274:	ad48      	add	r5, sp, #288	; 0x120
 8006276:	42b4      	cmp	r4, r6
 8006278:	f105 0508 	add.w	r5, r5, #8
 800627c:	da2e      	bge.n	80062dc <__kernel_rem_pio2+0x5c8>
 800627e:	9b02      	ldr	r3, [sp, #8]
 8006280:	b10b      	cbz	r3, 8006286 <__kernel_rem_pio2+0x572>
 8006282:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8006286:	4662      	mov	r2, ip
 8006288:	463b      	mov	r3, r7
 800628a:	9901      	ldr	r1, [sp, #4]
 800628c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8006290:	e7a0      	b.n	80061d4 <__kernel_rem_pio2+0x4c0>
 8006292:	9a06      	ldr	r2, [sp, #24]
 8006294:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8006296:	ab48      	add	r3, sp, #288	; 0x120
 8006298:	441a      	add	r2, r3
 800629a:	4615      	mov	r5, r2
 800629c:	4637      	mov	r7, r6
 800629e:	2c00      	cmp	r4, #0
 80062a0:	da09      	bge.n	80062b6 <__kernel_rem_pio2+0x5a2>
 80062a2:	9b02      	ldr	r3, [sp, #8]
 80062a4:	b10b      	cbz	r3, 80062aa <__kernel_rem_pio2+0x596>
 80062a6:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80062aa:	4632      	mov	r2, r6
 80062ac:	463b      	mov	r3, r7
 80062ae:	9901      	ldr	r1, [sp, #4]
 80062b0:	e9c1 2300 	strd	r2, r3, [r1]
 80062b4:	e78e      	b.n	80061d4 <__kernel_rem_pio2+0x4c0>
 80062b6:	4630      	mov	r0, r6
 80062b8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80062bc:	4639      	mov	r1, r7
 80062be:	f7f9 ff55 	bl	800016c <__adddf3>
 80062c2:	3c01      	subs	r4, #1
 80062c4:	4606      	mov	r6, r0
 80062c6:	460f      	mov	r7, r1
 80062c8:	e7e9      	b.n	800629e <__kernel_rem_pio2+0x58a>
 80062ca:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80062ce:	f7f9 ff4d 	bl	800016c <__adddf3>
 80062d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80062d6:	e7b8      	b.n	800624a <__kernel_rem_pio2+0x536>
 80062d8:	460d      	mov	r5, r1
 80062da:	e7be      	b.n	800625a <__kernel_rem_pio2+0x546>
 80062dc:	4660      	mov	r0, ip
 80062de:	e9d5 2300 	ldrd	r2, r3, [r5]
 80062e2:	4639      	mov	r1, r7
 80062e4:	f7f9 ff42 	bl	800016c <__adddf3>
 80062e8:	3601      	adds	r6, #1
 80062ea:	4684      	mov	ip, r0
 80062ec:	460f      	mov	r7, r1
 80062ee:	e7c2      	b.n	8006276 <__kernel_rem_pio2+0x562>
 80062f0:	e9da 6700 	ldrd	r6, r7, [sl]
 80062f4:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 80062f8:	4632      	mov	r2, r6
 80062fa:	463b      	mov	r3, r7
 80062fc:	4640      	mov	r0, r8
 80062fe:	4649      	mov	r1, r9
 8006300:	f7f9 ff34 	bl	800016c <__adddf3>
 8006304:	4602      	mov	r2, r0
 8006306:	460b      	mov	r3, r1
 8006308:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800630c:	4640      	mov	r0, r8
 800630e:	4649      	mov	r1, r9
 8006310:	f7f9 ff2a 	bl	8000168 <__aeabi_dsub>
 8006314:	4632      	mov	r2, r6
 8006316:	463b      	mov	r3, r7
 8006318:	f7f9 ff28 	bl	800016c <__adddf3>
 800631c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006320:	e86a 0102 	strd	r0, r1, [sl], #-8
 8006324:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006328:	e9ca 2300 	strd	r2, r3, [sl]
 800632c:	e762      	b.n	80061f4 <__kernel_rem_pio2+0x4e0>
 800632e:	e9da 8900 	ldrd	r8, r9, [sl]
 8006332:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8006336:	4642      	mov	r2, r8
 8006338:	464b      	mov	r3, r9
 800633a:	4630      	mov	r0, r6
 800633c:	4639      	mov	r1, r7
 800633e:	f7f9 ff15 	bl	800016c <__adddf3>
 8006342:	4602      	mov	r2, r0
 8006344:	460b      	mov	r3, r1
 8006346:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800634a:	4630      	mov	r0, r6
 800634c:	4639      	mov	r1, r7
 800634e:	f7f9 ff0b 	bl	8000168 <__aeabi_dsub>
 8006352:	4642      	mov	r2, r8
 8006354:	464b      	mov	r3, r9
 8006356:	f7f9 ff09 	bl	800016c <__adddf3>
 800635a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800635e:	e86a 0102 	strd	r0, r1, [sl], #-8
 8006362:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006366:	e9ca 2300 	strd	r2, r3, [sl]
 800636a:	e748      	b.n	80061fe <__kernel_rem_pio2+0x4ea>
 800636c:	4638      	mov	r0, r7
 800636e:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8006372:	4631      	mov	r1, r6
 8006374:	f7f9 fefa 	bl	800016c <__adddf3>
 8006378:	3c01      	subs	r4, #1
 800637a:	4607      	mov	r7, r0
 800637c:	460e      	mov	r6, r1
 800637e:	e744      	b.n	800620a <__kernel_rem_pio2+0x4f6>
 8006380:	9b01      	ldr	r3, [sp, #4]
 8006382:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8006386:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800638a:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800638e:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8006392:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8006396:	601d      	str	r5, [r3, #0]
 8006398:	615e      	str	r6, [r3, #20]
 800639a:	e71b      	b.n	80061d4 <__kernel_rem_pio2+0x4c0>
 800639c:	41700000 	.word	0x41700000
 80063a0:	3e700000 	.word	0x3e700000
 80063a4:	00000000 	.word	0x00000000

080063a8 <__kernel_sin>:
 80063a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063ac:	b086      	sub	sp, #24
 80063ae:	e9cd 2300 	strd	r2, r3, [sp]
 80063b2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80063b6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80063ba:	4682      	mov	sl, r0
 80063bc:	460c      	mov	r4, r1
 80063be:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80063c0:	da03      	bge.n	80063ca <__kernel_sin+0x22>
 80063c2:	f7fa fb23 	bl	8000a0c <__aeabi_d2iz>
 80063c6:	2800      	cmp	r0, #0
 80063c8:	d050      	beq.n	800646c <__kernel_sin+0xc4>
 80063ca:	4652      	mov	r2, sl
 80063cc:	4623      	mov	r3, r4
 80063ce:	4650      	mov	r0, sl
 80063d0:	4621      	mov	r1, r4
 80063d2:	f7fa f881 	bl	80004d8 <__aeabi_dmul>
 80063d6:	4606      	mov	r6, r0
 80063d8:	460f      	mov	r7, r1
 80063da:	4602      	mov	r2, r0
 80063dc:	460b      	mov	r3, r1
 80063de:	4650      	mov	r0, sl
 80063e0:	4621      	mov	r1, r4
 80063e2:	f7fa f879 	bl	80004d8 <__aeabi_dmul>
 80063e6:	a33e      	add	r3, pc, #248	; (adr r3, 80064e0 <__kernel_sin+0x138>)
 80063e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ec:	4680      	mov	r8, r0
 80063ee:	4689      	mov	r9, r1
 80063f0:	4630      	mov	r0, r6
 80063f2:	4639      	mov	r1, r7
 80063f4:	f7fa f870 	bl	80004d8 <__aeabi_dmul>
 80063f8:	a33b      	add	r3, pc, #236	; (adr r3, 80064e8 <__kernel_sin+0x140>)
 80063fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fe:	f7f9 feb3 	bl	8000168 <__aeabi_dsub>
 8006402:	4632      	mov	r2, r6
 8006404:	463b      	mov	r3, r7
 8006406:	f7fa f867 	bl	80004d8 <__aeabi_dmul>
 800640a:	a339      	add	r3, pc, #228	; (adr r3, 80064f0 <__kernel_sin+0x148>)
 800640c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006410:	f7f9 feac 	bl	800016c <__adddf3>
 8006414:	4632      	mov	r2, r6
 8006416:	463b      	mov	r3, r7
 8006418:	f7fa f85e 	bl	80004d8 <__aeabi_dmul>
 800641c:	a336      	add	r3, pc, #216	; (adr r3, 80064f8 <__kernel_sin+0x150>)
 800641e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006422:	f7f9 fea1 	bl	8000168 <__aeabi_dsub>
 8006426:	4632      	mov	r2, r6
 8006428:	463b      	mov	r3, r7
 800642a:	f7fa f855 	bl	80004d8 <__aeabi_dmul>
 800642e:	a334      	add	r3, pc, #208	; (adr r3, 8006500 <__kernel_sin+0x158>)
 8006430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006434:	f7f9 fe9a 	bl	800016c <__adddf3>
 8006438:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800643c:	b9dd      	cbnz	r5, 8006476 <__kernel_sin+0xce>
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	4630      	mov	r0, r6
 8006444:	4639      	mov	r1, r7
 8006446:	f7fa f847 	bl	80004d8 <__aeabi_dmul>
 800644a:	a32f      	add	r3, pc, #188	; (adr r3, 8006508 <__kernel_sin+0x160>)
 800644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006450:	f7f9 fe8a 	bl	8000168 <__aeabi_dsub>
 8006454:	4642      	mov	r2, r8
 8006456:	464b      	mov	r3, r9
 8006458:	f7fa f83e 	bl	80004d8 <__aeabi_dmul>
 800645c:	4602      	mov	r2, r0
 800645e:	460b      	mov	r3, r1
 8006460:	4650      	mov	r0, sl
 8006462:	4621      	mov	r1, r4
 8006464:	f7f9 fe82 	bl	800016c <__adddf3>
 8006468:	4682      	mov	sl, r0
 800646a:	460c      	mov	r4, r1
 800646c:	4650      	mov	r0, sl
 800646e:	4621      	mov	r1, r4
 8006470:	b006      	add	sp, #24
 8006472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006476:	2200      	movs	r2, #0
 8006478:	e9dd 0100 	ldrd	r0, r1, [sp]
 800647c:	4b24      	ldr	r3, [pc, #144]	; (8006510 <__kernel_sin+0x168>)
 800647e:	f7fa f82b 	bl	80004d8 <__aeabi_dmul>
 8006482:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006486:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800648a:	4640      	mov	r0, r8
 800648c:	4649      	mov	r1, r9
 800648e:	f7fa f823 	bl	80004d8 <__aeabi_dmul>
 8006492:	4602      	mov	r2, r0
 8006494:	460b      	mov	r3, r1
 8006496:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800649a:	f7f9 fe65 	bl	8000168 <__aeabi_dsub>
 800649e:	4632      	mov	r2, r6
 80064a0:	463b      	mov	r3, r7
 80064a2:	f7fa f819 	bl	80004d8 <__aeabi_dmul>
 80064a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064aa:	f7f9 fe5d 	bl	8000168 <__aeabi_dsub>
 80064ae:	a316      	add	r3, pc, #88	; (adr r3, 8006508 <__kernel_sin+0x160>)
 80064b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b4:	4606      	mov	r6, r0
 80064b6:	460f      	mov	r7, r1
 80064b8:	4640      	mov	r0, r8
 80064ba:	4649      	mov	r1, r9
 80064bc:	f7fa f80c 	bl	80004d8 <__aeabi_dmul>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4630      	mov	r0, r6
 80064c6:	4639      	mov	r1, r7
 80064c8:	f7f9 fe50 	bl	800016c <__adddf3>
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	4650      	mov	r0, sl
 80064d2:	4621      	mov	r1, r4
 80064d4:	f7f9 fe48 	bl	8000168 <__aeabi_dsub>
 80064d8:	e7c6      	b.n	8006468 <__kernel_sin+0xc0>
 80064da:	bf00      	nop
 80064dc:	f3af 8000 	nop.w
 80064e0:	5acfd57c 	.word	0x5acfd57c
 80064e4:	3de5d93a 	.word	0x3de5d93a
 80064e8:	8a2b9ceb 	.word	0x8a2b9ceb
 80064ec:	3e5ae5e6 	.word	0x3e5ae5e6
 80064f0:	57b1fe7d 	.word	0x57b1fe7d
 80064f4:	3ec71de3 	.word	0x3ec71de3
 80064f8:	19c161d5 	.word	0x19c161d5
 80064fc:	3f2a01a0 	.word	0x3f2a01a0
 8006500:	1110f8a6 	.word	0x1110f8a6
 8006504:	3f811111 	.word	0x3f811111
 8006508:	55555549 	.word	0x55555549
 800650c:	3fc55555 	.word	0x3fc55555
 8006510:	3fe00000 	.word	0x3fe00000
 8006514:	00000000 	.word	0x00000000

08006518 <__kernel_tan>:
 8006518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651c:	461f      	mov	r7, r3
 800651e:	4bda      	ldr	r3, [pc, #872]	; (8006888 <__kernel_tan+0x370>)
 8006520:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006524:	b089      	sub	sp, #36	; 0x24
 8006526:	429e      	cmp	r6, r3
 8006528:	4604      	mov	r4, r0
 800652a:	460d      	mov	r5, r1
 800652c:	4682      	mov	sl, r0
 800652e:	468b      	mov	fp, r1
 8006530:	4690      	mov	r8, r2
 8006532:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 8006536:	9105      	str	r1, [sp, #20]
 8006538:	dc21      	bgt.n	800657e <__kernel_tan+0x66>
 800653a:	f7fa fa67 	bl	8000a0c <__aeabi_d2iz>
 800653e:	2800      	cmp	r0, #0
 8006540:	d140      	bne.n	80065c4 <__kernel_tan+0xac>
 8006542:	f109 0301 	add.w	r3, r9, #1
 8006546:	4323      	orrs	r3, r4
 8006548:	4333      	orrs	r3, r6
 800654a:	4622      	mov	r2, r4
 800654c:	d110      	bne.n	8006570 <__kernel_tan+0x58>
 800654e:	4620      	mov	r0, r4
 8006550:	4629      	mov	r1, r5
 8006552:	f000 f9a5 	bl	80068a0 <fabs>
 8006556:	4602      	mov	r2, r0
 8006558:	2000      	movs	r0, #0
 800655a:	460b      	mov	r3, r1
 800655c:	49cb      	ldr	r1, [pc, #812]	; (800688c <__kernel_tan+0x374>)
 800655e:	f7fa f8e5 	bl	800072c <__aeabi_ddiv>
 8006562:	4682      	mov	sl, r0
 8006564:	468b      	mov	fp, r1
 8006566:	4650      	mov	r0, sl
 8006568:	4659      	mov	r1, fp
 800656a:	b009      	add	sp, #36	; 0x24
 800656c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006570:	f1b9 0f01 	cmp.w	r9, #1
 8006574:	d0f7      	beq.n	8006566 <__kernel_tan+0x4e>
 8006576:	462b      	mov	r3, r5
 8006578:	2000      	movs	r0, #0
 800657a:	49c5      	ldr	r1, [pc, #788]	; (8006890 <__kernel_tan+0x378>)
 800657c:	e7ef      	b.n	800655e <__kernel_tan+0x46>
 800657e:	4bc5      	ldr	r3, [pc, #788]	; (8006894 <__kernel_tan+0x37c>)
 8006580:	429e      	cmp	r6, r3
 8006582:	dd1f      	ble.n	80065c4 <__kernel_tan+0xac>
 8006584:	2900      	cmp	r1, #0
 8006586:	da04      	bge.n	8006592 <__kernel_tan+0x7a>
 8006588:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800658c:	469b      	mov	fp, r3
 800658e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8006592:	4652      	mov	r2, sl
 8006594:	a19e      	add	r1, pc, #632	; (adr r1, 8006810 <__kernel_tan+0x2f8>)
 8006596:	e9d1 0100 	ldrd	r0, r1, [r1]
 800659a:	465b      	mov	r3, fp
 800659c:	f7f9 fde4 	bl	8000168 <__aeabi_dsub>
 80065a0:	4604      	mov	r4, r0
 80065a2:	460d      	mov	r5, r1
 80065a4:	a19c      	add	r1, pc, #624	; (adr r1, 8006818 <__kernel_tan+0x300>)
 80065a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065aa:	4642      	mov	r2, r8
 80065ac:	463b      	mov	r3, r7
 80065ae:	f7f9 fddb 	bl	8000168 <__aeabi_dsub>
 80065b2:	4622      	mov	r2, r4
 80065b4:	462b      	mov	r3, r5
 80065b6:	f7f9 fdd9 	bl	800016c <__adddf3>
 80065ba:	f04f 0800 	mov.w	r8, #0
 80065be:	4682      	mov	sl, r0
 80065c0:	468b      	mov	fp, r1
 80065c2:	4647      	mov	r7, r8
 80065c4:	4652      	mov	r2, sl
 80065c6:	465b      	mov	r3, fp
 80065c8:	4650      	mov	r0, sl
 80065ca:	4659      	mov	r1, fp
 80065cc:	f7f9 ff84 	bl	80004d8 <__aeabi_dmul>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	e9cd 2300 	strd	r2, r3, [sp]
 80065d8:	f7f9 ff7e 	bl	80004d8 <__aeabi_dmul>
 80065dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065e0:	4604      	mov	r4, r0
 80065e2:	460d      	mov	r5, r1
 80065e4:	4650      	mov	r0, sl
 80065e6:	4659      	mov	r1, fp
 80065e8:	f7f9 ff76 	bl	80004d8 <__aeabi_dmul>
 80065ec:	a38c      	add	r3, pc, #560	; (adr r3, 8006820 <__kernel_tan+0x308>)
 80065ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065f6:	4620      	mov	r0, r4
 80065f8:	4629      	mov	r1, r5
 80065fa:	f7f9 ff6d 	bl	80004d8 <__aeabi_dmul>
 80065fe:	a38a      	add	r3, pc, #552	; (adr r3, 8006828 <__kernel_tan+0x310>)
 8006600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006604:	f7f9 fdb2 	bl	800016c <__adddf3>
 8006608:	4622      	mov	r2, r4
 800660a:	462b      	mov	r3, r5
 800660c:	f7f9 ff64 	bl	80004d8 <__aeabi_dmul>
 8006610:	a387      	add	r3, pc, #540	; (adr r3, 8006830 <__kernel_tan+0x318>)
 8006612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006616:	f7f9 fda9 	bl	800016c <__adddf3>
 800661a:	4622      	mov	r2, r4
 800661c:	462b      	mov	r3, r5
 800661e:	f7f9 ff5b 	bl	80004d8 <__aeabi_dmul>
 8006622:	a385      	add	r3, pc, #532	; (adr r3, 8006838 <__kernel_tan+0x320>)
 8006624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006628:	f7f9 fda0 	bl	800016c <__adddf3>
 800662c:	4622      	mov	r2, r4
 800662e:	462b      	mov	r3, r5
 8006630:	f7f9 ff52 	bl	80004d8 <__aeabi_dmul>
 8006634:	a382      	add	r3, pc, #520	; (adr r3, 8006840 <__kernel_tan+0x328>)
 8006636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663a:	f7f9 fd97 	bl	800016c <__adddf3>
 800663e:	4622      	mov	r2, r4
 8006640:	462b      	mov	r3, r5
 8006642:	f7f9 ff49 	bl	80004d8 <__aeabi_dmul>
 8006646:	a380      	add	r3, pc, #512	; (adr r3, 8006848 <__kernel_tan+0x330>)
 8006648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664c:	f7f9 fd8e 	bl	800016c <__adddf3>
 8006650:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006654:	f7f9 ff40 	bl	80004d8 <__aeabi_dmul>
 8006658:	a37d      	add	r3, pc, #500	; (adr r3, 8006850 <__kernel_tan+0x338>)
 800665a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006662:	4620      	mov	r0, r4
 8006664:	4629      	mov	r1, r5
 8006666:	f7f9 ff37 	bl	80004d8 <__aeabi_dmul>
 800666a:	a37b      	add	r3, pc, #492	; (adr r3, 8006858 <__kernel_tan+0x340>)
 800666c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006670:	f7f9 fd7c 	bl	800016c <__adddf3>
 8006674:	4622      	mov	r2, r4
 8006676:	462b      	mov	r3, r5
 8006678:	f7f9 ff2e 	bl	80004d8 <__aeabi_dmul>
 800667c:	a378      	add	r3, pc, #480	; (adr r3, 8006860 <__kernel_tan+0x348>)
 800667e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006682:	f7f9 fd73 	bl	800016c <__adddf3>
 8006686:	4622      	mov	r2, r4
 8006688:	462b      	mov	r3, r5
 800668a:	f7f9 ff25 	bl	80004d8 <__aeabi_dmul>
 800668e:	a376      	add	r3, pc, #472	; (adr r3, 8006868 <__kernel_tan+0x350>)
 8006690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006694:	f7f9 fd6a 	bl	800016c <__adddf3>
 8006698:	4622      	mov	r2, r4
 800669a:	462b      	mov	r3, r5
 800669c:	f7f9 ff1c 	bl	80004d8 <__aeabi_dmul>
 80066a0:	a373      	add	r3, pc, #460	; (adr r3, 8006870 <__kernel_tan+0x358>)
 80066a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a6:	f7f9 fd61 	bl	800016c <__adddf3>
 80066aa:	4622      	mov	r2, r4
 80066ac:	462b      	mov	r3, r5
 80066ae:	f7f9 ff13 	bl	80004d8 <__aeabi_dmul>
 80066b2:	a371      	add	r3, pc, #452	; (adr r3, 8006878 <__kernel_tan+0x360>)
 80066b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b8:	f7f9 fd58 	bl	800016c <__adddf3>
 80066bc:	4602      	mov	r2, r0
 80066be:	460b      	mov	r3, r1
 80066c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066c4:	f7f9 fd52 	bl	800016c <__adddf3>
 80066c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066cc:	f7f9 ff04 	bl	80004d8 <__aeabi_dmul>
 80066d0:	4642      	mov	r2, r8
 80066d2:	463b      	mov	r3, r7
 80066d4:	f7f9 fd4a 	bl	800016c <__adddf3>
 80066d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066dc:	f7f9 fefc 	bl	80004d8 <__aeabi_dmul>
 80066e0:	4642      	mov	r2, r8
 80066e2:	463b      	mov	r3, r7
 80066e4:	f7f9 fd42 	bl	800016c <__adddf3>
 80066e8:	a365      	add	r3, pc, #404	; (adr r3, 8006880 <__kernel_tan+0x368>)
 80066ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ee:	4604      	mov	r4, r0
 80066f0:	460d      	mov	r5, r1
 80066f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066f6:	f7f9 feef 	bl	80004d8 <__aeabi_dmul>
 80066fa:	4622      	mov	r2, r4
 80066fc:	462b      	mov	r3, r5
 80066fe:	f7f9 fd35 	bl	800016c <__adddf3>
 8006702:	460b      	mov	r3, r1
 8006704:	e9cd 0100 	strd	r0, r1, [sp]
 8006708:	4602      	mov	r2, r0
 800670a:	4659      	mov	r1, fp
 800670c:	4650      	mov	r0, sl
 800670e:	f7f9 fd2d 	bl	800016c <__adddf3>
 8006712:	4b60      	ldr	r3, [pc, #384]	; (8006894 <__kernel_tan+0x37c>)
 8006714:	4604      	mov	r4, r0
 8006716:	429e      	cmp	r6, r3
 8006718:	460d      	mov	r5, r1
 800671a:	dd3e      	ble.n	800679a <__kernel_tan+0x282>
 800671c:	4648      	mov	r0, r9
 800671e:	f7f9 fe71 	bl	8000404 <__aeabi_i2d>
 8006722:	4622      	mov	r2, r4
 8006724:	4680      	mov	r8, r0
 8006726:	4689      	mov	r9, r1
 8006728:	462b      	mov	r3, r5
 800672a:	4620      	mov	r0, r4
 800672c:	4629      	mov	r1, r5
 800672e:	f7f9 fed3 	bl	80004d8 <__aeabi_dmul>
 8006732:	4642      	mov	r2, r8
 8006734:	4606      	mov	r6, r0
 8006736:	460f      	mov	r7, r1
 8006738:	464b      	mov	r3, r9
 800673a:	4620      	mov	r0, r4
 800673c:	4629      	mov	r1, r5
 800673e:	f7f9 fd15 	bl	800016c <__adddf3>
 8006742:	4602      	mov	r2, r0
 8006744:	460b      	mov	r3, r1
 8006746:	4630      	mov	r0, r6
 8006748:	4639      	mov	r1, r7
 800674a:	f7f9 ffef 	bl	800072c <__aeabi_ddiv>
 800674e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006752:	f7f9 fd09 	bl	8000168 <__aeabi_dsub>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	4650      	mov	r0, sl
 800675c:	4659      	mov	r1, fp
 800675e:	f7f9 fd03 	bl	8000168 <__aeabi_dsub>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	f7f9 fd01 	bl	800016c <__adddf3>
 800676a:	4602      	mov	r2, r0
 800676c:	460b      	mov	r3, r1
 800676e:	4640      	mov	r0, r8
 8006770:	4649      	mov	r1, r9
 8006772:	f7f9 fcf9 	bl	8000168 <__aeabi_dsub>
 8006776:	9b05      	ldr	r3, [sp, #20]
 8006778:	4604      	mov	r4, r0
 800677a:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800677e:	f00a 0a02 	and.w	sl, sl, #2
 8006782:	f1ca 0001 	rsb	r0, sl, #1
 8006786:	460d      	mov	r5, r1
 8006788:	f7f9 fe3c 	bl	8000404 <__aeabi_i2d>
 800678c:	4602      	mov	r2, r0
 800678e:	460b      	mov	r3, r1
 8006790:	4620      	mov	r0, r4
 8006792:	4629      	mov	r1, r5
 8006794:	f7f9 fea0 	bl	80004d8 <__aeabi_dmul>
 8006798:	e6e3      	b.n	8006562 <__kernel_tan+0x4a>
 800679a:	f1b9 0f01 	cmp.w	r9, #1
 800679e:	d07b      	beq.n	8006898 <__kernel_tan+0x380>
 80067a0:	460f      	mov	r7, r1
 80067a2:	4602      	mov	r2, r0
 80067a4:	460b      	mov	r3, r1
 80067a6:	2000      	movs	r0, #0
 80067a8:	4939      	ldr	r1, [pc, #228]	; (8006890 <__kernel_tan+0x378>)
 80067aa:	f7f9 ffbf 	bl	800072c <__aeabi_ddiv>
 80067ae:	2600      	movs	r6, #0
 80067b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80067b8:	4652      	mov	r2, sl
 80067ba:	465b      	mov	r3, fp
 80067bc:	4630      	mov	r0, r6
 80067be:	4639      	mov	r1, r7
 80067c0:	f7f9 fcd2 	bl	8000168 <__aeabi_dsub>
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067cc:	f7f9 fccc 	bl	8000168 <__aeabi_dsub>
 80067d0:	4632      	mov	r2, r6
 80067d2:	462b      	mov	r3, r5
 80067d4:	f7f9 fe80 	bl	80004d8 <__aeabi_dmul>
 80067d8:	4632      	mov	r2, r6
 80067da:	4682      	mov	sl, r0
 80067dc:	468b      	mov	fp, r1
 80067de:	462b      	mov	r3, r5
 80067e0:	4630      	mov	r0, r6
 80067e2:	4639      	mov	r1, r7
 80067e4:	f7f9 fe78 	bl	80004d8 <__aeabi_dmul>
 80067e8:	2200      	movs	r2, #0
 80067ea:	4b28      	ldr	r3, [pc, #160]	; (800688c <__kernel_tan+0x374>)
 80067ec:	f7f9 fcbe 	bl	800016c <__adddf3>
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	4650      	mov	r0, sl
 80067f6:	4659      	mov	r1, fp
 80067f8:	f7f9 fcb8 	bl	800016c <__adddf3>
 80067fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006800:	f7f9 fe6a 	bl	80004d8 <__aeabi_dmul>
 8006804:	4632      	mov	r2, r6
 8006806:	462b      	mov	r3, r5
 8006808:	f7f9 fcb0 	bl	800016c <__adddf3>
 800680c:	e6a9      	b.n	8006562 <__kernel_tan+0x4a>
 800680e:	bf00      	nop
 8006810:	54442d18 	.word	0x54442d18
 8006814:	3fe921fb 	.word	0x3fe921fb
 8006818:	33145c07 	.word	0x33145c07
 800681c:	3c81a626 	.word	0x3c81a626
 8006820:	74bf7ad4 	.word	0x74bf7ad4
 8006824:	3efb2a70 	.word	0x3efb2a70
 8006828:	32f0a7e9 	.word	0x32f0a7e9
 800682c:	3f12b80f 	.word	0x3f12b80f
 8006830:	1a8d1068 	.word	0x1a8d1068
 8006834:	3f3026f7 	.word	0x3f3026f7
 8006838:	fee08315 	.word	0xfee08315
 800683c:	3f57dbc8 	.word	0x3f57dbc8
 8006840:	e96e8493 	.word	0xe96e8493
 8006844:	3f8226e3 	.word	0x3f8226e3
 8006848:	1bb341fe 	.word	0x1bb341fe
 800684c:	3faba1ba 	.word	0x3faba1ba
 8006850:	db605373 	.word	0xdb605373
 8006854:	bef375cb 	.word	0xbef375cb
 8006858:	a03792a6 	.word	0xa03792a6
 800685c:	3f147e88 	.word	0x3f147e88
 8006860:	f2f26501 	.word	0xf2f26501
 8006864:	3f4344d8 	.word	0x3f4344d8
 8006868:	c9560328 	.word	0xc9560328
 800686c:	3f6d6d22 	.word	0x3f6d6d22
 8006870:	8406d637 	.word	0x8406d637
 8006874:	3f9664f4 	.word	0x3f9664f4
 8006878:	1110fe7a 	.word	0x1110fe7a
 800687c:	3fc11111 	.word	0x3fc11111
 8006880:	55555563 	.word	0x55555563
 8006884:	3fd55555 	.word	0x3fd55555
 8006888:	3e2fffff 	.word	0x3e2fffff
 800688c:	3ff00000 	.word	0x3ff00000
 8006890:	bff00000 	.word	0xbff00000
 8006894:	3fe59427 	.word	0x3fe59427
 8006898:	4682      	mov	sl, r0
 800689a:	468b      	mov	fp, r1
 800689c:	e663      	b.n	8006566 <__kernel_tan+0x4e>
 800689e:	bf00      	nop

080068a0 <fabs>:
 80068a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80068a4:	4770      	bx	lr
	...

080068a8 <floor>:
 80068a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068ac:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80068b0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80068b4:	2e13      	cmp	r6, #19
 80068b6:	4602      	mov	r2, r0
 80068b8:	460b      	mov	r3, r1
 80068ba:	4607      	mov	r7, r0
 80068bc:	460c      	mov	r4, r1
 80068be:	4605      	mov	r5, r0
 80068c0:	dc34      	bgt.n	800692c <floor+0x84>
 80068c2:	2e00      	cmp	r6, #0
 80068c4:	da15      	bge.n	80068f2 <floor+0x4a>
 80068c6:	a334      	add	r3, pc, #208	; (adr r3, 8006998 <floor+0xf0>)
 80068c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068cc:	f7f9 fc4e 	bl	800016c <__adddf3>
 80068d0:	2200      	movs	r2, #0
 80068d2:	2300      	movs	r3, #0
 80068d4:	f7fa f890 	bl	80009f8 <__aeabi_dcmpgt>
 80068d8:	b140      	cbz	r0, 80068ec <floor+0x44>
 80068da:	2c00      	cmp	r4, #0
 80068dc:	da59      	bge.n	8006992 <floor+0xea>
 80068de:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80068e2:	ea57 0503 	orrs.w	r5, r7, r3
 80068e6:	d001      	beq.n	80068ec <floor+0x44>
 80068e8:	2500      	movs	r5, #0
 80068ea:	4c2d      	ldr	r4, [pc, #180]	; (80069a0 <floor+0xf8>)
 80068ec:	4623      	mov	r3, r4
 80068ee:	462f      	mov	r7, r5
 80068f0:	e025      	b.n	800693e <floor+0x96>
 80068f2:	4a2c      	ldr	r2, [pc, #176]	; (80069a4 <floor+0xfc>)
 80068f4:	fa42 f806 	asr.w	r8, r2, r6
 80068f8:	ea01 0208 	and.w	r2, r1, r8
 80068fc:	4302      	orrs	r2, r0
 80068fe:	d01e      	beq.n	800693e <floor+0x96>
 8006900:	a325      	add	r3, pc, #148	; (adr r3, 8006998 <floor+0xf0>)
 8006902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006906:	f7f9 fc31 	bl	800016c <__adddf3>
 800690a:	2200      	movs	r2, #0
 800690c:	2300      	movs	r3, #0
 800690e:	f7fa f873 	bl	80009f8 <__aeabi_dcmpgt>
 8006912:	2800      	cmp	r0, #0
 8006914:	d0ea      	beq.n	80068ec <floor+0x44>
 8006916:	2c00      	cmp	r4, #0
 8006918:	bfbe      	ittt	lt
 800691a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800691e:	fa43 f606 	asrlt.w	r6, r3, r6
 8006922:	19a4      	addlt	r4, r4, r6
 8006924:	2500      	movs	r5, #0
 8006926:	ea24 0408 	bic.w	r4, r4, r8
 800692a:	e7df      	b.n	80068ec <floor+0x44>
 800692c:	2e33      	cmp	r6, #51	; 0x33
 800692e:	dd0a      	ble.n	8006946 <floor+0x9e>
 8006930:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006934:	d103      	bne.n	800693e <floor+0x96>
 8006936:	f7f9 fc19 	bl	800016c <__adddf3>
 800693a:	4607      	mov	r7, r0
 800693c:	460b      	mov	r3, r1
 800693e:	4638      	mov	r0, r7
 8006940:	4619      	mov	r1, r3
 8006942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006946:	f04f 32ff 	mov.w	r2, #4294967295
 800694a:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800694e:	fa22 f808 	lsr.w	r8, r2, r8
 8006952:	ea18 0f00 	tst.w	r8, r0
 8006956:	d0f2      	beq.n	800693e <floor+0x96>
 8006958:	a30f      	add	r3, pc, #60	; (adr r3, 8006998 <floor+0xf0>)
 800695a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695e:	f7f9 fc05 	bl	800016c <__adddf3>
 8006962:	2200      	movs	r2, #0
 8006964:	2300      	movs	r3, #0
 8006966:	f7fa f847 	bl	80009f8 <__aeabi_dcmpgt>
 800696a:	2800      	cmp	r0, #0
 800696c:	d0be      	beq.n	80068ec <floor+0x44>
 800696e:	2c00      	cmp	r4, #0
 8006970:	da02      	bge.n	8006978 <floor+0xd0>
 8006972:	2e14      	cmp	r6, #20
 8006974:	d103      	bne.n	800697e <floor+0xd6>
 8006976:	3401      	adds	r4, #1
 8006978:	ea25 0508 	bic.w	r5, r5, r8
 800697c:	e7b6      	b.n	80068ec <floor+0x44>
 800697e:	2301      	movs	r3, #1
 8006980:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006984:	fa03 f606 	lsl.w	r6, r3, r6
 8006988:	4435      	add	r5, r6
 800698a:	42bd      	cmp	r5, r7
 800698c:	bf38      	it	cc
 800698e:	18e4      	addcc	r4, r4, r3
 8006990:	e7f2      	b.n	8006978 <floor+0xd0>
 8006992:	2500      	movs	r5, #0
 8006994:	462c      	mov	r4, r5
 8006996:	e7a9      	b.n	80068ec <floor+0x44>
 8006998:	8800759c 	.word	0x8800759c
 800699c:	7e37e43c 	.word	0x7e37e43c
 80069a0:	bff00000 	.word	0xbff00000
 80069a4:	000fffff 	.word	0x000fffff

080069a8 <scalbn>:
 80069a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069aa:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80069ae:	4604      	mov	r4, r0
 80069b0:	460d      	mov	r5, r1
 80069b2:	4617      	mov	r7, r2
 80069b4:	460b      	mov	r3, r1
 80069b6:	b996      	cbnz	r6, 80069de <scalbn+0x36>
 80069b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80069bc:	4303      	orrs	r3, r0
 80069be:	d039      	beq.n	8006a34 <scalbn+0x8c>
 80069c0:	4b35      	ldr	r3, [pc, #212]	; (8006a98 <scalbn+0xf0>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	f7f9 fd88 	bl	80004d8 <__aeabi_dmul>
 80069c8:	4b34      	ldr	r3, [pc, #208]	; (8006a9c <scalbn+0xf4>)
 80069ca:	4604      	mov	r4, r0
 80069cc:	429f      	cmp	r7, r3
 80069ce:	460d      	mov	r5, r1
 80069d0:	da0f      	bge.n	80069f2 <scalbn+0x4a>
 80069d2:	a32d      	add	r3, pc, #180	; (adr r3, 8006a88 <scalbn+0xe0>)
 80069d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d8:	f7f9 fd7e 	bl	80004d8 <__aeabi_dmul>
 80069dc:	e006      	b.n	80069ec <scalbn+0x44>
 80069de:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80069e2:	4296      	cmp	r6, r2
 80069e4:	d10a      	bne.n	80069fc <scalbn+0x54>
 80069e6:	4602      	mov	r2, r0
 80069e8:	f7f9 fbc0 	bl	800016c <__adddf3>
 80069ec:	4604      	mov	r4, r0
 80069ee:	460d      	mov	r5, r1
 80069f0:	e020      	b.n	8006a34 <scalbn+0x8c>
 80069f2:	460b      	mov	r3, r1
 80069f4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80069f8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80069fc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006a00:	19b9      	adds	r1, r7, r6
 8006a02:	4291      	cmp	r1, r2
 8006a04:	dd0e      	ble.n	8006a24 <scalbn+0x7c>
 8006a06:	a322      	add	r3, pc, #136	; (adr r3, 8006a90 <scalbn+0xe8>)
 8006a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006a10:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006a14:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8006a18:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006a1c:	4820      	ldr	r0, [pc, #128]	; (8006aa0 <scalbn+0xf8>)
 8006a1e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006a22:	e7d9      	b.n	80069d8 <scalbn+0x30>
 8006a24:	2900      	cmp	r1, #0
 8006a26:	dd08      	ble.n	8006a3a <scalbn+0x92>
 8006a28:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006a2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a30:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006a34:	4620      	mov	r0, r4
 8006a36:	4629      	mov	r1, r5
 8006a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a3a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8006a3e:	da16      	bge.n	8006a6e <scalbn+0xc6>
 8006a40:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006a44:	429f      	cmp	r7, r3
 8006a46:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8006a4a:	dd08      	ble.n	8006a5e <scalbn+0xb6>
 8006a4c:	4c15      	ldr	r4, [pc, #84]	; (8006aa4 <scalbn+0xfc>)
 8006a4e:	4814      	ldr	r0, [pc, #80]	; (8006aa0 <scalbn+0xf8>)
 8006a50:	f363 74df 	bfi	r4, r3, #31, #1
 8006a54:	a30e      	add	r3, pc, #56	; (adr r3, 8006a90 <scalbn+0xe8>)
 8006a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5a:	4621      	mov	r1, r4
 8006a5c:	e7bc      	b.n	80069d8 <scalbn+0x30>
 8006a5e:	4c12      	ldr	r4, [pc, #72]	; (8006aa8 <scalbn+0x100>)
 8006a60:	4812      	ldr	r0, [pc, #72]	; (8006aac <scalbn+0x104>)
 8006a62:	f363 74df 	bfi	r4, r3, #31, #1
 8006a66:	a308      	add	r3, pc, #32	; (adr r3, 8006a88 <scalbn+0xe0>)
 8006a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6c:	e7f5      	b.n	8006a5a <scalbn+0xb2>
 8006a6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006a72:	3136      	adds	r1, #54	; 0x36
 8006a74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a78:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	4629      	mov	r1, r5
 8006a80:	2200      	movs	r2, #0
 8006a82:	4b0b      	ldr	r3, [pc, #44]	; (8006ab0 <scalbn+0x108>)
 8006a84:	e7a8      	b.n	80069d8 <scalbn+0x30>
 8006a86:	bf00      	nop
 8006a88:	c2f8f359 	.word	0xc2f8f359
 8006a8c:	01a56e1f 	.word	0x01a56e1f
 8006a90:	8800759c 	.word	0x8800759c
 8006a94:	7e37e43c 	.word	0x7e37e43c
 8006a98:	43500000 	.word	0x43500000
 8006a9c:	ffff3cb0 	.word	0xffff3cb0
 8006aa0:	8800759c 	.word	0x8800759c
 8006aa4:	7e37e43c 	.word	0x7e37e43c
 8006aa8:	01a56e1f 	.word	0x01a56e1f
 8006aac:	c2f8f359 	.word	0xc2f8f359
 8006ab0:	3c900000 	.word	0x3c900000

08006ab4 <_init>:
 8006ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab6:	bf00      	nop
 8006ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aba:	bc08      	pop	{r3}
 8006abc:	469e      	mov	lr, r3
 8006abe:	4770      	bx	lr

08006ac0 <_fini>:
 8006ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac2:	bf00      	nop
 8006ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ac6:	bc08      	pop	{r3}
 8006ac8:	469e      	mov	lr, r3
 8006aca:	4770      	bx	lr
