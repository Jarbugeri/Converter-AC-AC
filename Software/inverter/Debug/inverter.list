
inverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c10  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000688  08005d20  08005d20  00015d20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063a8  080063a8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080063a8  080063a8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063a8  080063a8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063a8  080063a8  000163a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063ac  080063ac  000163ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080063b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000074  08006424  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08006424  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ad5  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b59  00000000  00000000  00032b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00009e37  00000000  00000000  000356cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba8  00000000  00000000  0003f508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d40  00000000  00000000  000400b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b18  00000000  00000000  00040df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000110de  00000000  00000000  00059908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cb05  00000000  00000000  0006a9e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000f74eb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000029f0  00000000  00000000  000f7540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08005d08 	.word	0x08005d08

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08005d08 	.word	0x08005d08

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_frsub>:
 8000afc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b00:	e002      	b.n	8000b08 <__addsf3>
 8000b02:	bf00      	nop

08000b04 <__aeabi_fsub>:
 8000b04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b08 <__addsf3>:
 8000b08:	0042      	lsls	r2, r0, #1
 8000b0a:	bf1f      	itttt	ne
 8000b0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b10:	ea92 0f03 	teqne	r2, r3
 8000b14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1c:	d06a      	beq.n	8000bf4 <__addsf3+0xec>
 8000b1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b26:	bfc1      	itttt	gt
 8000b28:	18d2      	addgt	r2, r2, r3
 8000b2a:	4041      	eorgt	r1, r0
 8000b2c:	4048      	eorgt	r0, r1
 8000b2e:	4041      	eorgt	r1, r0
 8000b30:	bfb8      	it	lt
 8000b32:	425b      	neglt	r3, r3
 8000b34:	2b19      	cmp	r3, #25
 8000b36:	bf88      	it	hi
 8000b38:	4770      	bxhi	lr
 8000b3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b56:	bf18      	it	ne
 8000b58:	4249      	negne	r1, r1
 8000b5a:	ea92 0f03 	teq	r2, r3
 8000b5e:	d03f      	beq.n	8000be0 <__addsf3+0xd8>
 8000b60:	f1a2 0201 	sub.w	r2, r2, #1
 8000b64:	fa41 fc03 	asr.w	ip, r1, r3
 8000b68:	eb10 000c 	adds.w	r0, r0, ip
 8000b6c:	f1c3 0320 	rsb	r3, r3, #32
 8000b70:	fa01 f103 	lsl.w	r1, r1, r3
 8000b74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__addsf3+0x78>
 8000b7a:	4249      	negs	r1, r1
 8000b7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b84:	d313      	bcc.n	8000bae <__addsf3+0xa6>
 8000b86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b8a:	d306      	bcc.n	8000b9a <__addsf3+0x92>
 8000b8c:	0840      	lsrs	r0, r0, #1
 8000b8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b92:	f102 0201 	add.w	r2, r2, #1
 8000b96:	2afe      	cmp	r2, #254	; 0xfe
 8000b98:	d251      	bcs.n	8000c3e <__addsf3+0x136>
 8000b9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba2:	bf08      	it	eq
 8000ba4:	f020 0001 	biceq.w	r0, r0, #1
 8000ba8:	ea40 0003 	orr.w	r0, r0, r3
 8000bac:	4770      	bx	lr
 8000bae:	0049      	lsls	r1, r1, #1
 8000bb0:	eb40 0000 	adc.w	r0, r0, r0
 8000bb4:	3a01      	subs	r2, #1
 8000bb6:	bf28      	it	cs
 8000bb8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bbc:	d2ed      	bcs.n	8000b9a <__addsf3+0x92>
 8000bbe:	fab0 fc80 	clz	ip, r0
 8000bc2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bc6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bca:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bce:	bfaa      	itet	ge
 8000bd0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bd4:	4252      	neglt	r2, r2
 8000bd6:	4318      	orrge	r0, r3
 8000bd8:	bfbc      	itt	lt
 8000bda:	40d0      	lsrlt	r0, r2
 8000bdc:	4318      	orrlt	r0, r3
 8000bde:	4770      	bx	lr
 8000be0:	f092 0f00 	teq	r2, #0
 8000be4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000be8:	bf06      	itte	eq
 8000bea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bee:	3201      	addeq	r2, #1
 8000bf0:	3b01      	subne	r3, #1
 8000bf2:	e7b5      	b.n	8000b60 <__addsf3+0x58>
 8000bf4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bfc:	bf18      	it	ne
 8000bfe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c02:	d021      	beq.n	8000c48 <__addsf3+0x140>
 8000c04:	ea92 0f03 	teq	r2, r3
 8000c08:	d004      	beq.n	8000c14 <__addsf3+0x10c>
 8000c0a:	f092 0f00 	teq	r2, #0
 8000c0e:	bf08      	it	eq
 8000c10:	4608      	moveq	r0, r1
 8000c12:	4770      	bx	lr
 8000c14:	ea90 0f01 	teq	r0, r1
 8000c18:	bf1c      	itt	ne
 8000c1a:	2000      	movne	r0, #0
 8000c1c:	4770      	bxne	lr
 8000c1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c22:	d104      	bne.n	8000c2e <__addsf3+0x126>
 8000c24:	0040      	lsls	r0, r0, #1
 8000c26:	bf28      	it	cs
 8000c28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c2c:	4770      	bx	lr
 8000c2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c32:	bf3c      	itt	cc
 8000c34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c38:	4770      	bxcc	lr
 8000c3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	4770      	bx	lr
 8000c48:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c4c:	bf16      	itet	ne
 8000c4e:	4608      	movne	r0, r1
 8000c50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c54:	4601      	movne	r1, r0
 8000c56:	0242      	lsls	r2, r0, #9
 8000c58:	bf06      	itte	eq
 8000c5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c5e:	ea90 0f01 	teqeq	r0, r1
 8000c62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_ui2f>:
 8000c68:	f04f 0300 	mov.w	r3, #0
 8000c6c:	e004      	b.n	8000c78 <__aeabi_i2f+0x8>
 8000c6e:	bf00      	nop

08000c70 <__aeabi_i2f>:
 8000c70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c74:	bf48      	it	mi
 8000c76:	4240      	negmi	r0, r0
 8000c78:	ea5f 0c00 	movs.w	ip, r0
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c84:	4601      	mov	r1, r0
 8000c86:	f04f 0000 	mov.w	r0, #0
 8000c8a:	e01c      	b.n	8000cc6 <__aeabi_l2f+0x2a>

08000c8c <__aeabi_ul2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e00a      	b.n	8000cb0 <__aeabi_l2f+0x14>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_l2f>:
 8000c9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca0:	bf08      	it	eq
 8000ca2:	4770      	bxeq	lr
 8000ca4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ca8:	d502      	bpl.n	8000cb0 <__aeabi_l2f+0x14>
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	ea5f 0c01 	movs.w	ip, r1
 8000cb4:	bf02      	ittt	eq
 8000cb6:	4684      	moveq	ip, r0
 8000cb8:	4601      	moveq	r1, r0
 8000cba:	2000      	moveq	r0, #0
 8000cbc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cc0:	bf08      	it	eq
 8000cc2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cca:	fabc f28c 	clz	r2, ip
 8000cce:	3a08      	subs	r2, #8
 8000cd0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cd4:	db10      	blt.n	8000cf8 <__aeabi_l2f+0x5c>
 8000cd6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cda:	4463      	add	r3, ip
 8000cdc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce0:	f1c2 0220 	rsb	r2, r2, #32
 8000ce4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ce8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cec:	eb43 0002 	adc.w	r0, r3, r2
 8000cf0:	bf08      	it	eq
 8000cf2:	f020 0001 	biceq.w	r0, r0, #1
 8000cf6:	4770      	bx	lr
 8000cf8:	f102 0220 	add.w	r2, r2, #32
 8000cfc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d00:	f1c2 0220 	rsb	r2, r2, #32
 8000d04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d08:	fa21 f202 	lsr.w	r2, r1, r2
 8000d0c:	eb43 0002 	adc.w	r0, r3, r2
 8000d10:	bf08      	it	eq
 8000d12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_fmul>:
 8000d18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d20:	bf1e      	ittt	ne
 8000d22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d26:	ea92 0f0c 	teqne	r2, ip
 8000d2a:	ea93 0f0c 	teqne	r3, ip
 8000d2e:	d06f      	beq.n	8000e10 <__aeabi_fmul+0xf8>
 8000d30:	441a      	add	r2, r3
 8000d32:	ea80 0c01 	eor.w	ip, r0, r1
 8000d36:	0240      	lsls	r0, r0, #9
 8000d38:	bf18      	it	ne
 8000d3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d3e:	d01e      	beq.n	8000d7e <__aeabi_fmul+0x66>
 8000d40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d58:	bf3e      	ittt	cc
 8000d5a:	0049      	lslcc	r1, r1, #1
 8000d5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d60:	005b      	lslcc	r3, r3, #1
 8000d62:	ea40 0001 	orr.w	r0, r0, r1
 8000d66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d6a:	2afd      	cmp	r2, #253	; 0xfd
 8000d6c:	d81d      	bhi.n	8000daa <__aeabi_fmul+0x92>
 8000d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	4770      	bx	lr
 8000d7e:	f090 0f00 	teq	r0, #0
 8000d82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d86:	bf08      	it	eq
 8000d88:	0249      	lsleq	r1, r1, #9
 8000d8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d92:	3a7f      	subs	r2, #127	; 0x7f
 8000d94:	bfc2      	ittt	gt
 8000d96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d9e:	4770      	bxgt	lr
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	3a01      	subs	r2, #1
 8000daa:	dc5d      	bgt.n	8000e68 <__aeabi_fmul+0x150>
 8000dac:	f112 0f19 	cmn.w	r2, #25
 8000db0:	bfdc      	itt	le
 8000db2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000db6:	4770      	bxle	lr
 8000db8:	f1c2 0200 	rsb	r2, r2, #0
 8000dbc:	0041      	lsls	r1, r0, #1
 8000dbe:	fa21 f102 	lsr.w	r1, r1, r2
 8000dc2:	f1c2 0220 	rsb	r2, r2, #32
 8000dc6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dce:	f140 0000 	adc.w	r0, r0, #0
 8000dd2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dd6:	bf08      	it	eq
 8000dd8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ddc:	4770      	bx	lr
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0040      	lsleq	r0, r0, #1
 8000dea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dee:	3a01      	subeq	r2, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fmul+0xce>
 8000df2:	ea40 000c 	orr.w	r0, r0, ip
 8000df6:	f093 0f00 	teq	r3, #0
 8000dfa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfe:	bf02      	ittt	eq
 8000e00:	0049      	lsleq	r1, r1, #1
 8000e02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e06:	3b01      	subeq	r3, #1
 8000e08:	d0f9      	beq.n	8000dfe <__aeabi_fmul+0xe6>
 8000e0a:	ea41 010c 	orr.w	r1, r1, ip
 8000e0e:	e78f      	b.n	8000d30 <__aeabi_fmul+0x18>
 8000e10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e14:	ea92 0f0c 	teq	r2, ip
 8000e18:	bf18      	it	ne
 8000e1a:	ea93 0f0c 	teqne	r3, ip
 8000e1e:	d00a      	beq.n	8000e36 <__aeabi_fmul+0x11e>
 8000e20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e24:	bf18      	it	ne
 8000e26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	d1d8      	bne.n	8000dde <__aeabi_fmul+0xc6>
 8000e2c:	ea80 0001 	eor.w	r0, r0, r1
 8000e30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e34:	4770      	bx	lr
 8000e36:	f090 0f00 	teq	r0, #0
 8000e3a:	bf17      	itett	ne
 8000e3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e40:	4608      	moveq	r0, r1
 8000e42:	f091 0f00 	teqne	r1, #0
 8000e46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e4a:	d014      	beq.n	8000e76 <__aeabi_fmul+0x15e>
 8000e4c:	ea92 0f0c 	teq	r2, ip
 8000e50:	d101      	bne.n	8000e56 <__aeabi_fmul+0x13e>
 8000e52:	0242      	lsls	r2, r0, #9
 8000e54:	d10f      	bne.n	8000e76 <__aeabi_fmul+0x15e>
 8000e56:	ea93 0f0c 	teq	r3, ip
 8000e5a:	d103      	bne.n	8000e64 <__aeabi_fmul+0x14c>
 8000e5c:	024b      	lsls	r3, r1, #9
 8000e5e:	bf18      	it	ne
 8000e60:	4608      	movne	r0, r1
 8000e62:	d108      	bne.n	8000e76 <__aeabi_fmul+0x15e>
 8000e64:	ea80 0001 	eor.w	r0, r0, r1
 8000e68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e74:	4770      	bx	lr
 8000e76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e7e:	4770      	bx	lr

08000e80 <__aeabi_fdiv>:
 8000e80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e88:	bf1e      	ittt	ne
 8000e8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e8e:	ea92 0f0c 	teqne	r2, ip
 8000e92:	ea93 0f0c 	teqne	r3, ip
 8000e96:	d069      	beq.n	8000f6c <__aeabi_fdiv+0xec>
 8000e98:	eba2 0203 	sub.w	r2, r2, r3
 8000e9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000ea0:	0249      	lsls	r1, r1, #9
 8000ea2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ea6:	d037      	beq.n	8000f18 <__aeabi_fdiv+0x98>
 8000ea8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000eb0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000eb4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	bf38      	it	cc
 8000ebc:	005b      	lslcc	r3, r3, #1
 8000ebe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ec2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	bf24      	itt	cs
 8000eca:	1a5b      	subcs	r3, r3, r1
 8000ecc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ed0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ed4:	bf24      	itt	cs
 8000ed6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ede:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ee2:	bf24      	itt	cs
 8000ee4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ee8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ef6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	bf18      	it	ne
 8000efe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f02:	d1e0      	bne.n	8000ec6 <__aeabi_fdiv+0x46>
 8000f04:	2afd      	cmp	r2, #253	; 0xfd
 8000f06:	f63f af50 	bhi.w	8000daa <__aeabi_fmul+0x92>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f10:	bf08      	it	eq
 8000f12:	f020 0001 	biceq.w	r0, r0, #1
 8000f16:	4770      	bx	lr
 8000f18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f20:	327f      	adds	r2, #127	; 0x7f
 8000f22:	bfc2      	ittt	gt
 8000f24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f2c:	4770      	bxgt	lr
 8000f2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	3a01      	subs	r2, #1
 8000f38:	e737      	b.n	8000daa <__aeabi_fmul+0x92>
 8000f3a:	f092 0f00 	teq	r2, #0
 8000f3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0040      	lsleq	r0, r0, #1
 8000f46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f4a:	3a01      	subeq	r2, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fdiv+0xc2>
 8000f4e:	ea40 000c 	orr.w	r0, r0, ip
 8000f52:	f093 0f00 	teq	r3, #0
 8000f56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f5a:	bf02      	ittt	eq
 8000f5c:	0049      	lsleq	r1, r1, #1
 8000f5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f62:	3b01      	subeq	r3, #1
 8000f64:	d0f9      	beq.n	8000f5a <__aeabi_fdiv+0xda>
 8000f66:	ea41 010c 	orr.w	r1, r1, ip
 8000f6a:	e795      	b.n	8000e98 <__aeabi_fdiv+0x18>
 8000f6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f70:	ea92 0f0c 	teq	r2, ip
 8000f74:	d108      	bne.n	8000f88 <__aeabi_fdiv+0x108>
 8000f76:	0242      	lsls	r2, r0, #9
 8000f78:	f47f af7d 	bne.w	8000e76 <__aeabi_fmul+0x15e>
 8000f7c:	ea93 0f0c 	teq	r3, ip
 8000f80:	f47f af70 	bne.w	8000e64 <__aeabi_fmul+0x14c>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e776      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	d104      	bne.n	8000f98 <__aeabi_fdiv+0x118>
 8000f8e:	024b      	lsls	r3, r1, #9
 8000f90:	f43f af4c 	beq.w	8000e2c <__aeabi_fmul+0x114>
 8000f94:	4608      	mov	r0, r1
 8000f96:	e76e      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000f98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f9c:	bf18      	it	ne
 8000f9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fa2:	d1ca      	bne.n	8000f3a <__aeabi_fdiv+0xba>
 8000fa4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fa8:	f47f af5c 	bne.w	8000e64 <__aeabi_fmul+0x14c>
 8000fac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fb0:	f47f af3c 	bne.w	8000e2c <__aeabi_fmul+0x114>
 8000fb4:	e75f      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000fb6:	bf00      	nop

08000fb8 <__gesf2>:
 8000fb8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fbc:	e006      	b.n	8000fcc <__cmpsf2+0x4>
 8000fbe:	bf00      	nop

08000fc0 <__lesf2>:
 8000fc0:	f04f 0c01 	mov.w	ip, #1
 8000fc4:	e002      	b.n	8000fcc <__cmpsf2+0x4>
 8000fc6:	bf00      	nop

08000fc8 <__cmpsf2>:
 8000fc8:	f04f 0c01 	mov.w	ip, #1
 8000fcc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fd0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fdc:	bf18      	it	ne
 8000fde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fe2:	d011      	beq.n	8001008 <__cmpsf2+0x40>
 8000fe4:	b001      	add	sp, #4
 8000fe6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fea:	bf18      	it	ne
 8000fec:	ea90 0f01 	teqne	r0, r1
 8000ff0:	bf58      	it	pl
 8000ff2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ff6:	bf88      	it	hi
 8000ff8:	17c8      	asrhi	r0, r1, #31
 8000ffa:	bf38      	it	cc
 8000ffc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001000:	bf18      	it	ne
 8001002:	f040 0001 	orrne.w	r0, r0, #1
 8001006:	4770      	bx	lr
 8001008:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800100c:	d102      	bne.n	8001014 <__cmpsf2+0x4c>
 800100e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001012:	d105      	bne.n	8001020 <__cmpsf2+0x58>
 8001014:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001018:	d1e4      	bne.n	8000fe4 <__cmpsf2+0x1c>
 800101a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800101e:	d0e1      	beq.n	8000fe4 <__cmpsf2+0x1c>
 8001020:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <__aeabi_cfrcmple>:
 8001028:	4684      	mov	ip, r0
 800102a:	4608      	mov	r0, r1
 800102c:	4661      	mov	r1, ip
 800102e:	e7ff      	b.n	8001030 <__aeabi_cfcmpeq>

08001030 <__aeabi_cfcmpeq>:
 8001030:	b50f      	push	{r0, r1, r2, r3, lr}
 8001032:	f7ff ffc9 	bl	8000fc8 <__cmpsf2>
 8001036:	2800      	cmp	r0, #0
 8001038:	bf48      	it	mi
 800103a:	f110 0f00 	cmnmi.w	r0, #0
 800103e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001040 <__aeabi_fcmpeq>:
 8001040:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001044:	f7ff fff4 	bl	8001030 <__aeabi_cfcmpeq>
 8001048:	bf0c      	ite	eq
 800104a:	2001      	moveq	r0, #1
 800104c:	2000      	movne	r0, #0
 800104e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001052:	bf00      	nop

08001054 <__aeabi_fcmplt>:
 8001054:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001058:	f7ff ffea 	bl	8001030 <__aeabi_cfcmpeq>
 800105c:	bf34      	ite	cc
 800105e:	2001      	movcc	r0, #1
 8001060:	2000      	movcs	r0, #0
 8001062:	f85d fb08 	ldr.w	pc, [sp], #8
 8001066:	bf00      	nop

08001068 <__aeabi_fcmple>:
 8001068:	f84d ed08 	str.w	lr, [sp, #-8]!
 800106c:	f7ff ffe0 	bl	8001030 <__aeabi_cfcmpeq>
 8001070:	bf94      	ite	ls
 8001072:	2001      	movls	r0, #1
 8001074:	2000      	movhi	r0, #0
 8001076:	f85d fb08 	ldr.w	pc, [sp], #8
 800107a:	bf00      	nop

0800107c <__aeabi_fcmpge>:
 800107c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001080:	f7ff ffd2 	bl	8001028 <__aeabi_cfrcmple>
 8001084:	bf94      	ite	ls
 8001086:	2001      	movls	r0, #1
 8001088:	2000      	movhi	r0, #0
 800108a:	f85d fb08 	ldr.w	pc, [sp], #8
 800108e:	bf00      	nop

08001090 <__aeabi_fcmpgt>:
 8001090:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001094:	f7ff ffc8 	bl	8001028 <__aeabi_cfrcmple>
 8001098:	bf34      	ite	cc
 800109a:	2001      	movcc	r0, #1
 800109c:	2000      	movcs	r0, #0
 800109e:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a2:	bf00      	nop

080010a4 <__aeabi_f2iz>:
 80010a4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010a8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010ac:	d30f      	bcc.n	80010ce <__aeabi_f2iz+0x2a>
 80010ae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010b2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010b6:	d90d      	bls.n	80010d4 <__aeabi_f2iz+0x30>
 80010b8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010c0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010c4:	fa23 f002 	lsr.w	r0, r3, r2
 80010c8:	bf18      	it	ne
 80010ca:	4240      	negne	r0, r0
 80010cc:	4770      	bx	lr
 80010ce:	f04f 0000 	mov.w	r0, #0
 80010d2:	4770      	bx	lr
 80010d4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010d8:	d101      	bne.n	80010de <__aeabi_f2iz+0x3a>
 80010da:	0242      	lsls	r2, r0, #9
 80010dc:	d105      	bne.n	80010ea <__aeabi_f2iz+0x46>
 80010de:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010e2:	bf08      	it	eq
 80010e4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr

080010f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f0:	b500      	push	{lr}
 80010f2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f4:	2300      	movs	r3, #0
 80010f6:	930d      	str	r3, [sp, #52]	; 0x34
 80010f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80010fa:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010fc:	9305      	str	r3, [sp, #20]
 80010fe:	9306      	str	r3, [sp, #24]
 8001100:	9307      	str	r3, [sp, #28]
 8001102:	9308      	str	r3, [sp, #32]
 8001104:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001106:	9301      	str	r3, [sp, #4]
 8001108:	9302      	str	r3, [sp, #8]
 800110a:	9303      	str	r3, [sp, #12]
 800110c:	9304      	str	r3, [sp, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800110e:	2101      	movs	r1, #1
 8001110:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001112:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001116:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001118:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800111a:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111c:	2302      	movs	r3, #2
 800111e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001120:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001122:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001126:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001128:	a80a      	add	r0, sp, #40	; 0x28
 800112a:	f000 fda3 	bl	8001c74 <HAL_RCC_OscConfig>
 800112e:	b9c8      	cbnz	r0, 8001164 <SystemClock_Config+0x74>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001130:	230f      	movs	r3, #15
 8001132:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001134:	2102      	movs	r1, #2
 8001136:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800113c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001140:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001142:	9309      	str	r3, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001144:	a805      	add	r0, sp, #20
 8001146:	f000 ffe1 	bl	800210c <HAL_RCC_ClockConfig>
 800114a:	b968      	cbnz	r0, 8001168 <SystemClock_Config+0x78>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800114c:	2302      	movs	r3, #2
 800114e:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001150:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001154:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001156:	a801      	add	r0, sp, #4
 8001158:	f001 f896 	bl	8002288 <HAL_RCCEx_PeriphCLKConfig>
 800115c:	b930      	cbnz	r0, 800116c <SystemClock_Config+0x7c>
  {
    Error_Handler();
  }
}
 800115e:	b015      	add	sp, #84	; 0x54
 8001160:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001164:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001166:	e7fe      	b.n	8001166 <SystemClock_Config+0x76>
 8001168:	b672      	cpsid	i
 800116a:	e7fe      	b.n	800116a <SystemClock_Config+0x7a>
 800116c:	b672      	cpsid	i
 800116e:	e7fe      	b.n	800116e <SystemClock_Config+0x7e>

08001170 <main>:
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b09e      	sub	sp, #120	; 0x78
  HAL_Init();
 8001174:	f000 fa72 	bl	800165c <HAL_Init>
  SystemClock_Config();
 8001178:	f7ff ffba 	bl	80010f0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	2400      	movs	r4, #0
 800117e:	9416      	str	r4, [sp, #88]	; 0x58
 8001180:	9417      	str	r4, [sp, #92]	; 0x5c
 8001182:	9418      	str	r4, [sp, #96]	; 0x60
 8001184:	9419      	str	r4, [sp, #100]	; 0x64
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001186:	4b84      	ldr	r3, [pc, #528]	; (8001398 <main+0x228>)
 8001188:	699a      	ldr	r2, [r3, #24]
 800118a:	f042 0210 	orr.w	r2, r2, #16
 800118e:	619a      	str	r2, [r3, #24]
 8001190:	699a      	ldr	r2, [r3, #24]
 8001192:	f002 0210 	and.w	r2, r2, #16
 8001196:	9205      	str	r2, [sp, #20]
 8001198:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800119a:	699a      	ldr	r2, [r3, #24]
 800119c:	f042 0220 	orr.w	r2, r2, #32
 80011a0:	619a      	str	r2, [r3, #24]
 80011a2:	699a      	ldr	r2, [r3, #24]
 80011a4:	f002 0220 	and.w	r2, r2, #32
 80011a8:	9206      	str	r2, [sp, #24]
 80011aa:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	699a      	ldr	r2, [r3, #24]
 80011ae:	f042 0204 	orr.w	r2, r2, #4
 80011b2:	619a      	str	r2, [r3, #24]
 80011b4:	699a      	ldr	r2, [r3, #24]
 80011b6:	f002 0204 	and.w	r2, r2, #4
 80011ba:	9207      	str	r2, [sp, #28]
 80011bc:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	699a      	ldr	r2, [r3, #24]
 80011c0:	f042 0208 	orr.w	r2, r2, #8
 80011c4:	619a      	str	r2, [r3, #24]
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f003 0308 	and.w	r3, r3, #8
 80011cc:	9308      	str	r3, [sp, #32]
 80011ce:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 80011d0:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 80013b8 <main+0x248>
 80011d4:	4622      	mov	r2, r4
 80011d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011da:	4640      	mov	r0, r8
 80011dc:	f000 fd44 	bl	8001c68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|EN_Pin|DATA0_Pin
 80011e0:	4e6e      	ldr	r6, [pc, #440]	; (800139c <main+0x22c>)
 80011e2:	4622      	mov	r2, r4
 80011e4:	21fe      	movs	r1, #254	; 0xfe
 80011e6:	4630      	mov	r0, r6
 80011e8:	f000 fd3e 	bl	8001c68 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Led_Pin;
 80011ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f0:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f2:	2501      	movs	r5, #1
 80011f4:	9517      	str	r5, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2702      	movs	r7, #2
 80011fa:	9719      	str	r7, [sp, #100]	; 0x64
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80011fc:	a916      	add	r1, sp, #88	; 0x58
 80011fe:	4640      	mov	r0, r8
 8001200:	f000 fc22 	bl	8001a48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|EN_Pin|DATA0_Pin
 8001204:	23fe      	movs	r3, #254	; 0xfe
 8001206:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001208:	9517      	str	r5, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	9719      	str	r7, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	a916      	add	r1, sp, #88	; 0x58
 8001210:	4630      	mov	r0, r6
 8001212:	f000 fc19 	bl	8001a48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BT1_Pin|BT2_Pin|BT3_Pin|BT4_Pin;
 8001216:	23f0      	movs	r3, #240	; 0xf0
 8001218:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121a:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800121c:	9518      	str	r5, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121e:	a916      	add	r1, sp, #88	; 0x58
 8001220:	485f      	ldr	r0, [pc, #380]	; (80013a0 <main+0x230>)
 8001222:	f000 fc11 	bl	8001a48 <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001226:	9416      	str	r4, [sp, #88]	; 0x58
 8001228:	9417      	str	r4, [sp, #92]	; 0x5c
 800122a:	9418      	str	r4, [sp, #96]	; 0x60
  hadc1.Instance = ADC1;
 800122c:	485d      	ldr	r0, [pc, #372]	; (80013a4 <main+0x234>)
 800122e:	4b5e      	ldr	r3, [pc, #376]	; (80013a8 <main+0x238>)
 8001230:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001232:	6084      	str	r4, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001234:	7304      	strb	r4, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001236:	7504      	strb	r4, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001238:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 800123c:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800123e:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001240:	6105      	str	r5, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001242:	f000 fb15 	bl	8001870 <HAL_ADC_Init>
 8001246:	2800      	cmp	r0, #0
 8001248:	f040 8091 	bne.w	800136e <main+0x1fe>
  sConfig.Channel = ADC_CHANNEL_9;
 800124c:	2309      	movs	r3, #9
 800124e:	9316      	str	r3, [sp, #88]	; 0x58
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001250:	2301      	movs	r3, #1
 8001252:	9317      	str	r3, [sp, #92]	; 0x5c
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001254:	2300      	movs	r3, #0
 8001256:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001258:	a916      	add	r1, sp, #88	; 0x58
 800125a:	4852      	ldr	r0, [pc, #328]	; (80013a4 <main+0x234>)
 800125c:	f000 fa36 	bl	80016cc <HAL_ADC_ConfigChannel>
 8001260:	2800      	cmp	r0, #0
 8001262:	f040 8086 	bne.w	8001372 <main+0x202>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001266:	2400      	movs	r4, #0
 8001268:	940b      	str	r4, [sp, #44]	; 0x2c
 800126a:	940c      	str	r4, [sp, #48]	; 0x30
 800126c:	940d      	str	r4, [sp, #52]	; 0x34
 800126e:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	9409      	str	r4, [sp, #36]	; 0x24
 8001272:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001274:	940f      	str	r4, [sp, #60]	; 0x3c
 8001276:	9410      	str	r4, [sp, #64]	; 0x40
 8001278:	9411      	str	r4, [sp, #68]	; 0x44
 800127a:	9412      	str	r4, [sp, #72]	; 0x48
 800127c:	9413      	str	r4, [sp, #76]	; 0x4c
 800127e:	9414      	str	r4, [sp, #80]	; 0x50
 8001280:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001282:	2220      	movs	r2, #32
 8001284:	4621      	mov	r1, r4
 8001286:	a816      	add	r0, sp, #88	; 0x58
 8001288:	f002 facc 	bl	8003824 <memset>
  htim1.Instance = TIM1;
 800128c:	4847      	ldr	r0, [pc, #284]	; (80013ac <main+0x23c>)
 800128e:	4b48      	ldr	r3, [pc, #288]	; (80013b0 <main+0x240>)
 8001290:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8001292:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001294:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 6000;
 8001296:	f241 7370 	movw	r3, #6000	; 0x1770
 800129a:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129c:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800129e:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a0:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012a2:	f001 fa2f 	bl	8002704 <HAL_TIM_Base_Init>
 80012a6:	2800      	cmp	r0, #0
 80012a8:	d165      	bne.n	8001376 <main+0x206>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ae:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012b0:	a90b      	add	r1, sp, #44	; 0x2c
 80012b2:	483e      	ldr	r0, [pc, #248]	; (80013ac <main+0x23c>)
 80012b4:	f001 fb1f 	bl	80028f6 <HAL_TIM_ConfigClockSource>
 80012b8:	2800      	cmp	r0, #0
 80012ba:	d15e      	bne.n	800137a <main+0x20a>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012bc:	483b      	ldr	r0, [pc, #236]	; (80013ac <main+0x23c>)
 80012be:	f001 fa4d 	bl	800275c <HAL_TIM_PWM_Init>
 80012c2:	2800      	cmp	r0, #0
 80012c4:	d15b      	bne.n	800137e <main+0x20e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c6:	2300      	movs	r3, #0
 80012c8:	9309      	str	r3, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ca:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012cc:	a909      	add	r1, sp, #36	; 0x24
 80012ce:	4837      	ldr	r0, [pc, #220]	; (80013ac <main+0x23c>)
 80012d0:	f001 fbb4 	bl	8002a3c <HAL_TIMEx_MasterConfigSynchronization>
 80012d4:	2800      	cmp	r0, #0
 80012d6:	d154      	bne.n	8001382 <main+0x212>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d8:	2360      	movs	r3, #96	; 0x60
 80012da:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.Pulse = 0;
 80012dc:	2200      	movs	r2, #0
 80012de:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e0:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80012e2:	2308      	movs	r3, #8
 80012e4:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e6:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012e8:	9214      	str	r2, [sp, #80]	; 0x50
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012ea:	9215      	str	r2, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ec:	a90f      	add	r1, sp, #60	; 0x3c
 80012ee:	482f      	ldr	r0, [pc, #188]	; (80013ac <main+0x23c>)
 80012f0:	f001 fa8e 	bl	8002810 <HAL_TIM_PWM_ConfigChannel>
 80012f4:	2800      	cmp	r0, #0
 80012f6:	d146      	bne.n	8001386 <main+0x216>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012f8:	2204      	movs	r2, #4
 80012fa:	a90f      	add	r1, sp, #60	; 0x3c
 80012fc:	482b      	ldr	r0, [pc, #172]	; (80013ac <main+0x23c>)
 80012fe:	f001 fa87 	bl	8002810 <HAL_TIM_PWM_ConfigChannel>
 8001302:	2800      	cmp	r0, #0
 8001304:	d141      	bne.n	800138a <main+0x21a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001306:	2208      	movs	r2, #8
 8001308:	a90f      	add	r1, sp, #60	; 0x3c
 800130a:	4828      	ldr	r0, [pc, #160]	; (80013ac <main+0x23c>)
 800130c:	f001 fa80 	bl	8002810 <HAL_TIM_PWM_ConfigChannel>
 8001310:	2800      	cmp	r0, #0
 8001312:	d13c      	bne.n	800138e <main+0x21e>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001318:	9317      	str	r3, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800131a:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.DeadTime = 144;
 800131c:	2290      	movs	r2, #144	; 0x90
 800131e:	9219      	str	r2, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001320:	931a      	str	r3, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001322:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001326:	921b      	str	r2, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001328:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800132a:	a916      	add	r1, sp, #88	; 0x58
 800132c:	481f      	ldr	r0, [pc, #124]	; (80013ac <main+0x23c>)
 800132e:	f001 fbb5 	bl	8002a9c <HAL_TIMEx_ConfigBreakDeadTime>
 8001332:	bb70      	cbnz	r0, 8001392 <main+0x222>
  HAL_TIM_MspPostInit(&htim1);
 8001334:	4c1d      	ldr	r4, [pc, #116]	; (80013ac <main+0x23c>)
 8001336:	4620      	mov	r0, r4
 8001338:	f000 f8ba 	bl	80014b0 <HAL_TIM_MspPostInit>
  lcd16x2_init_4bits(RS_GPIO_Port, RS_Pin, EN_Pin,
 800133c:	4817      	ldr	r0, [pc, #92]	; (800139c <main+0x22c>)
 800133e:	2380      	movs	r3, #128	; 0x80
 8001340:	9303      	str	r3, [sp, #12]
 8001342:	2340      	movs	r3, #64	; 0x40
 8001344:	9302      	str	r3, [sp, #8]
 8001346:	2320      	movs	r3, #32
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	2310      	movs	r3, #16
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	4603      	mov	r3, r0
 8001350:	2208      	movs	r2, #8
 8001352:	2102      	movs	r1, #2
 8001354:	f001 ffa6 	bl	80032a4 <lcd16x2_init_4bits>
  app_init(&app);
 8001358:	4816      	ldr	r0, [pc, #88]	; (80013b4 <main+0x244>)
 800135a:	f001 fd05 	bl	8002d68 <app_init>
  HAL_TIM_Base_Start_IT(&htim1);
 800135e:	4620      	mov	r0, r4
 8001360:	f001 f898 	bl	8002494 <HAL_TIM_Base_Start_IT>
	app_loop(&app);
 8001364:	4c13      	ldr	r4, [pc, #76]	; (80013b4 <main+0x244>)
 8001366:	4620      	mov	r0, r4
 8001368:	f001 fdd8 	bl	8002f1c <app_loop>
  while (1)
 800136c:	e7fb      	b.n	8001366 <main+0x1f6>
 800136e:	b672      	cpsid	i
  while (1)
 8001370:	e7fe      	b.n	8001370 <main+0x200>
 8001372:	b672      	cpsid	i
 8001374:	e7fe      	b.n	8001374 <main+0x204>
 8001376:	b672      	cpsid	i
 8001378:	e7fe      	b.n	8001378 <main+0x208>
 800137a:	b672      	cpsid	i
 800137c:	e7fe      	b.n	800137c <main+0x20c>
 800137e:	b672      	cpsid	i
 8001380:	e7fe      	b.n	8001380 <main+0x210>
 8001382:	b672      	cpsid	i
 8001384:	e7fe      	b.n	8001384 <main+0x214>
 8001386:	b672      	cpsid	i
 8001388:	e7fe      	b.n	8001388 <main+0x218>
 800138a:	b672      	cpsid	i
 800138c:	e7fe      	b.n	800138c <main+0x21c>
 800138e:	b672      	cpsid	i
 8001390:	e7fe      	b.n	8001390 <main+0x220>
 8001392:	b672      	cpsid	i
 8001394:	e7fe      	b.n	8001394 <main+0x224>
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000
 800139c:	40010800 	.word	0x40010800
 80013a0:	40010c00 	.word	0x40010c00
 80013a4:	200000bc 	.word	0x200000bc
 80013a8:	40012400 	.word	0x40012400
 80013ac:	200000ec 	.word	0x200000ec
 80013b0:	40012c00 	.word	0x40012c00
 80013b4:	20000134 	.word	0x20000134
 80013b8:	40011000 	.word	0x40011000

080013bc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013bc:	b508      	push	{r3, lr}
	app_isr(&app);
 80013be:	4802      	ldr	r0, [pc, #8]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0xc>)
 80013c0:	f001 fde8 	bl	8002f94 <app_isr>
}
 80013c4:	bd08      	pop	{r3, pc}
 80013c6:	bf00      	nop
 80013c8:	20000134 	.word	0x20000134

080013cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013cc:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <HAL_MspInit+0x3c>)
 80013d0:	699a      	ldr	r2, [r3, #24]
 80013d2:	f042 0201 	orr.w	r2, r2, #1
 80013d6:	619a      	str	r2, [r3, #24]
 80013d8:	699a      	ldr	r2, [r3, #24]
 80013da:	f002 0201 	and.w	r2, r2, #1
 80013de:	9200      	str	r2, [sp, #0]
 80013e0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	69da      	ldr	r2, [r3, #28]
 80013e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013e8:	61da      	str	r2, [r3, #28]
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013f4:	4a05      	ldr	r2, [pc, #20]	; (800140c <HAL_MspInit+0x40>)
 80013f6:	6853      	ldr	r3, [r2, #4]
 80013f8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001400:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001402:	b002      	add	sp, #8
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000
 800140c:	40010000 	.word	0x40010000

08001410 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001410:	b500      	push	{lr}
 8001412:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	2300      	movs	r3, #0
 8001416:	9302      	str	r3, [sp, #8]
 8001418:	9303      	str	r3, [sp, #12]
 800141a:	9304      	str	r3, [sp, #16]
 800141c:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 800141e:	6802      	ldr	r2, [r0, #0]
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_ADC_MspInit+0x58>)
 8001422:	429a      	cmp	r2, r3
 8001424:	d002      	beq.n	800142c <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001426:	b007      	add	sp, #28
 8001428:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 800142c:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001430:	699a      	ldr	r2, [r3, #24]
 8001432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001436:	619a      	str	r2, [r3, #24]
 8001438:	699a      	ldr	r2, [r3, #24]
 800143a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800143e:	9200      	str	r2, [sp, #0]
 8001440:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001442:	699a      	ldr	r2, [r3, #24]
 8001444:	f042 0208 	orr.w	r2, r2, #8
 8001448:	619a      	str	r2, [r3, #24]
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	9301      	str	r3, [sp, #4]
 8001452:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ADC_VOUT_Pin;
 8001454:	2302      	movs	r3, #2
 8001456:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001458:	2303      	movs	r3, #3
 800145a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(ADC_VOUT_GPIO_Port, &GPIO_InitStruct);
 800145c:	a902      	add	r1, sp, #8
 800145e:	4803      	ldr	r0, [pc, #12]	; (800146c <HAL_ADC_MspInit+0x5c>)
 8001460:	f000 faf2 	bl	8001a48 <HAL_GPIO_Init>
}
 8001464:	e7df      	b.n	8001426 <HAL_ADC_MspInit+0x16>
 8001466:	bf00      	nop
 8001468:	40012400 	.word	0x40012400
 800146c:	40010c00 	.word	0x40010c00

08001470 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8001470:	6802      	ldr	r2, [r0, #0]
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <HAL_TIM_Base_MspInit+0x3c>)
 8001474:	429a      	cmp	r2, r3
 8001476:	d000      	beq.n	800147a <HAL_TIM_Base_MspInit+0xa>
 8001478:	4770      	bx	lr
{
 800147a:	b500      	push	{lr}
 800147c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800147e:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001482:	699a      	ldr	r2, [r3, #24]
 8001484:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001488:	619a      	str	r2, [r3, #24]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	9b01      	ldr	r3, [sp, #4]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	4611      	mov	r1, r2
 8001498:	2019      	movs	r0, #25
 800149a:	f000 fa7f 	bl	800199c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800149e:	2019      	movs	r0, #25
 80014a0:	f000 faae 	bl	8001a00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80014a4:	b003      	add	sp, #12
 80014a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80014aa:	bf00      	nop
 80014ac:	40012c00 	.word	0x40012c00

080014b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014b0:	b570      	push	{r4, r5, r6, lr}
 80014b2:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	2300      	movs	r3, #0
 80014b6:	9302      	str	r3, [sp, #8]
 80014b8:	9303      	str	r3, [sp, #12]
 80014ba:	9304      	str	r3, [sp, #16]
 80014bc:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 80014be:	6802      	ldr	r2, [r0, #0]
 80014c0:	4b21      	ldr	r3, [pc, #132]	; (8001548 <HAL_TIM_MspPostInit+0x98>)
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d001      	beq.n	80014ca <HAL_TIM_MspPostInit+0x1a>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014c6:	b006      	add	sp, #24
 80014c8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80014ce:	699a      	ldr	r2, [r3, #24]
 80014d0:	f042 0208 	orr.w	r2, r2, #8
 80014d4:	619a      	str	r2, [r3, #24]
 80014d6:	699a      	ldr	r2, [r3, #24]
 80014d8:	f002 0208 	and.w	r2, r2, #8
 80014dc:	9200      	str	r2, [sp, #0]
 80014de:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e0:	699a      	ldr	r2, [r3, #24]
 80014e2:	f042 0204 	orr.w	r2, r2, #4
 80014e6:	619a      	str	r2, [r3, #24]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	9301      	str	r3, [sp, #4]
 80014f0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SAN_Pin;
 80014f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014f6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2402      	movs	r4, #2
 80014fa:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(SAN_GPIO_Port, &GPIO_InitStruct);
 80014fe:	4d13      	ldr	r5, [pc, #76]	; (800154c <HAL_TIM_MspPostInit+0x9c>)
 8001500:	a902      	add	r1, sp, #8
 8001502:	4628      	mov	r0, r5
 8001504:	f000 faa0 	bl	8001a48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SBN_Pin|SCN_Pin;
 8001508:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800150c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001510:	2603      	movs	r6, #3
 8001512:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	a902      	add	r1, sp, #8
 8001516:	4628      	mov	r0, r5
 8001518:	f000 fa96 	bl	8001a48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SAP_Pin;
 800151c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001520:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(SAP_GPIO_Port, &GPIO_InitStruct);
 8001526:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
 800152a:	a902      	add	r1, sp, #8
 800152c:	4628      	mov	r0, r5
 800152e:	f000 fa8b 	bl	8001a48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SBP_Pin|SCP_Pin;
 8001532:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001536:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800153a:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153c:	a902      	add	r1, sp, #8
 800153e:	4628      	mov	r0, r5
 8001540:	f000 fa82 	bl	8001a48 <HAL_GPIO_Init>
}
 8001544:	e7bf      	b.n	80014c6 <HAL_TIM_MspPostInit+0x16>
 8001546:	bf00      	nop
 8001548:	40012c00 	.word	0x40012c00
 800154c:	40010c00 	.word	0x40010c00

08001550 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <NMI_Handler>

08001552 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <HardFault_Handler>

08001554 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <MemManage_Handler>

08001556 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001556:	e7fe      	b.n	8001556 <BusFault_Handler>

08001558 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <UsageFault_Handler>

0800155a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155a:	4770      	bx	lr

0800155c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155c:	4770      	bx	lr

0800155e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800155e:	4770      	bx	lr

08001560 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001560:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001562:	f000 f88d 	bl	8001680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001566:	bd08      	pop	{r3, pc}

08001568 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001568:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800156a:	4802      	ldr	r0, [pc, #8]	; (8001574 <TIM1_UP_IRQHandler+0xc>)
 800156c:	f000 ffc7 	bl	80024fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001570:	bd08      	pop	{r3, pc}
 8001572:	bf00      	nop
 8001574:	200000ec 	.word	0x200000ec

08001578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001578:	b508      	push	{r3, lr}
 800157a:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800157c:	4a0c      	ldr	r2, [pc, #48]	; (80015b0 <_sbrk+0x38>)
 800157e:	6812      	ldr	r2, [r2, #0]
 8001580:	b152      	cbz	r2, 8001598 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001582:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <_sbrk+0x38>)
 8001584:	6810      	ldr	r0, [r2, #0]
 8001586:	4403      	add	r3, r0
 8001588:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <_sbrk+0x3c>)
 800158a:	490b      	ldr	r1, [pc, #44]	; (80015b8 <_sbrk+0x40>)
 800158c:	1a52      	subs	r2, r2, r1
 800158e:	4293      	cmp	r3, r2
 8001590:	d806      	bhi.n	80015a0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001592:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <_sbrk+0x38>)
 8001594:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001596:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8001598:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <_sbrk+0x38>)
 800159a:	4908      	ldr	r1, [pc, #32]	; (80015bc <_sbrk+0x44>)
 800159c:	6011      	str	r1, [r2, #0]
 800159e:	e7f0      	b.n	8001582 <_sbrk+0xa>
    errno = ENOMEM;
 80015a0:	f002 f916 	bl	80037d0 <__errno>
 80015a4:	230c      	movs	r3, #12
 80015a6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80015a8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ac:	e7f3      	b.n	8001596 <_sbrk+0x1e>
 80015ae:	bf00      	nop
 80015b0:	20000090 	.word	0x20000090
 80015b4:	20002800 	.word	0x20002800
 80015b8:	00000400 	.word	0x00000400
 80015bc:	20000338 	.word	0x20000338

080015c0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c0:	4770      	bx	lr
	...

080015c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015c4:	f7ff fffc 	bl	80015c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c8:	480b      	ldr	r0, [pc, #44]	; (80015f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015ca:	490c      	ldr	r1, [pc, #48]	; (80015fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015cc:	4a0c      	ldr	r2, [pc, #48]	; (8001600 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d0:	e002      	b.n	80015d8 <LoopCopyDataInit>

080015d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d6:	3304      	adds	r3, #4

080015d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015dc:	d3f9      	bcc.n	80015d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015de:	4a09      	ldr	r2, [pc, #36]	; (8001604 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015e0:	4c09      	ldr	r4, [pc, #36]	; (8001608 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e4:	e001      	b.n	80015ea <LoopFillZerobss>

080015e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e8:	3204      	adds	r2, #4

080015ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ec:	d3fb      	bcc.n	80015e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ee:	f002 f8f5 	bl	80037dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015f2:	f7ff fdbd 	bl	8001170 <main>
  bx lr
 80015f6:	4770      	bx	lr
  ldr r0, =_sdata
 80015f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015fc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001600:	080063b0 	.word	0x080063b0
  ldr r2, =_sbss
 8001604:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001608:	20000338 	.word	0x20000338

0800160c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800160c:	e7fe      	b.n	800160c <ADC1_2_IRQHandler>
	...

08001610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001610:	b510      	push	{r4, lr}
 8001612:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_InitTick+0x40>)
 8001616:	7818      	ldrb	r0, [r3, #0]
 8001618:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001620:	4a0c      	ldr	r2, [pc, #48]	; (8001654 <HAL_InitTick+0x44>)
 8001622:	6810      	ldr	r0, [r2, #0]
 8001624:	fbb0 f0f3 	udiv	r0, r0, r3
 8001628:	f000 f9f8 	bl	8001a1c <HAL_SYSTICK_Config>
 800162c:	b968      	cbnz	r0, 800164a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162e:	2c0f      	cmp	r4, #15
 8001630:	d901      	bls.n	8001636 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001632:	2001      	movs	r0, #1
 8001634:	e00a      	b.n	800164c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001636:	2200      	movs	r2, #0
 8001638:	4621      	mov	r1, r4
 800163a:	f04f 30ff 	mov.w	r0, #4294967295
 800163e:	f000 f9ad 	bl	800199c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001642:	4b05      	ldr	r3, [pc, #20]	; (8001658 <HAL_InitTick+0x48>)
 8001644:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001646:	2000      	movs	r0, #0
 8001648:	e000      	b.n	800164c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800164a:	2001      	movs	r0, #1
}
 800164c:	bd10      	pop	{r4, pc}
 800164e:	bf00      	nop
 8001650:	20000004 	.word	0x20000004
 8001654:	20000000 	.word	0x20000000
 8001658:	20000008 	.word	0x20000008

0800165c <HAL_Init>:
{
 800165c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800165e:	4a07      	ldr	r2, [pc, #28]	; (800167c <HAL_Init+0x20>)
 8001660:	6813      	ldr	r3, [r2, #0]
 8001662:	f043 0310 	orr.w	r3, r3, #16
 8001666:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001668:	2003      	movs	r0, #3
 800166a:	f000 f985 	bl	8001978 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800166e:	200f      	movs	r0, #15
 8001670:	f7ff ffce 	bl	8001610 <HAL_InitTick>
  HAL_MspInit();
 8001674:	f7ff feaa 	bl	80013cc <HAL_MspInit>
}
 8001678:	2000      	movs	r0, #0
 800167a:	bd08      	pop	{r3, pc}
 800167c:	40022000 	.word	0x40022000

08001680 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001680:	4a03      	ldr	r2, [pc, #12]	; (8001690 <HAL_IncTick+0x10>)
 8001682:	6811      	ldr	r1, [r2, #0]
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <HAL_IncTick+0x14>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	440b      	add	r3, r1
 800168a:	6013      	str	r3, [r2, #0]
}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20000324 	.word	0x20000324
 8001694:	20000004 	.word	0x20000004

08001698 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001698:	4b01      	ldr	r3, [pc, #4]	; (80016a0 <HAL_GetTick+0x8>)
 800169a:	6818      	ldr	r0, [r3, #0]
}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000324 	.word	0x20000324

080016a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a4:	b538      	push	{r3, r4, r5, lr}
 80016a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80016a8:	f7ff fff6 	bl	8001698 <HAL_GetTick>
 80016ac:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ae:	f1b4 3fff 	cmp.w	r4, #4294967295
 80016b2:	d002      	beq.n	80016ba <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <HAL_Delay+0x24>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ba:	f7ff ffed 	bl	8001698 <HAL_GetTick>
 80016be:	1b40      	subs	r0, r0, r5
 80016c0:	42a0      	cmp	r0, r4
 80016c2:	d3fa      	bcc.n	80016ba <HAL_Delay+0x16>
  {
  }
}
 80016c4:	bd38      	pop	{r3, r4, r5, pc}
 80016c6:	bf00      	nop
 80016c8:	20000004 	.word	0x20000004

080016cc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80016cc:	b430      	push	{r4, r5}
 80016ce:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80016d0:	2200      	movs	r2, #0
 80016d2:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016d4:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80016d8:	2a01      	cmp	r2, #1
 80016da:	f000 808f 	beq.w	80017fc <HAL_ADC_ConfigChannel+0x130>
 80016de:	4603      	mov	r3, r0
 80016e0:	2201      	movs	r2, #1
 80016e2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016e6:	684a      	ldr	r2, [r1, #4]
 80016e8:	2a06      	cmp	r2, #6
 80016ea:	d829      	bhi.n	8001740 <HAL_ADC_ConfigChannel+0x74>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016ec:	6805      	ldr	r5, [r0, #0]
 80016ee:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80016f0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80016f4:	3a05      	subs	r2, #5
 80016f6:	241f      	movs	r4, #31
 80016f8:	4094      	lsls	r4, r2
 80016fa:	ea20 0004 	bic.w	r0, r0, r4
 80016fe:	680c      	ldr	r4, [r1, #0]
 8001700:	fa04 f202 	lsl.w	r2, r4, r2
 8001704:	4302      	orrs	r2, r0
 8001706:	636a      	str	r2, [r5, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001708:	680a      	ldr	r2, [r1, #0]
 800170a:	2a09      	cmp	r2, #9
 800170c:	d938      	bls.n	8001780 <HAL_ADC_ConfigChannel+0xb4>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800170e:	681d      	ldr	r5, [r3, #0]
 8001710:	68e8      	ldr	r0, [r5, #12]
 8001712:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001716:	3a1e      	subs	r2, #30
 8001718:	2407      	movs	r4, #7
 800171a:	4094      	lsls	r4, r2
 800171c:	ea20 0004 	bic.w	r0, r0, r4
 8001720:	688c      	ldr	r4, [r1, #8]
 8001722:	fa04 f202 	lsl.w	r2, r4, r2
 8001726:	4302      	orrs	r2, r0
 8001728:	60ea      	str	r2, [r5, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800172a:	680a      	ldr	r2, [r1, #0]
 800172c:	3a10      	subs	r2, #16
 800172e:	2a01      	cmp	r2, #1
 8001730:	d934      	bls.n	800179c <HAL_ADC_ConfigChannel+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001732:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 800173a:	b002      	add	sp, #8
 800173c:	bc30      	pop	{r4, r5}
 800173e:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8001740:	2a0c      	cmp	r2, #12
 8001742:	d80e      	bhi.n	8001762 <HAL_ADC_ConfigChannel+0x96>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001744:	6805      	ldr	r5, [r0, #0]
 8001746:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001748:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800174c:	3a23      	subs	r2, #35	; 0x23
 800174e:	241f      	movs	r4, #31
 8001750:	4094      	lsls	r4, r2
 8001752:	ea20 0004 	bic.w	r0, r0, r4
 8001756:	680c      	ldr	r4, [r1, #0]
 8001758:	fa04 f202 	lsl.w	r2, r4, r2
 800175c:	4302      	orrs	r2, r0
 800175e:	632a      	str	r2, [r5, #48]	; 0x30
 8001760:	e7d2      	b.n	8001708 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001762:	6805      	ldr	r5, [r0, #0]
 8001764:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001766:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800176a:	3a41      	subs	r2, #65	; 0x41
 800176c:	241f      	movs	r4, #31
 800176e:	4094      	lsls	r4, r2
 8001770:	ea20 0004 	bic.w	r0, r0, r4
 8001774:	680c      	ldr	r4, [r1, #0]
 8001776:	fa04 f202 	lsl.w	r2, r4, r2
 800177a:	4302      	orrs	r2, r0
 800177c:	62ea      	str	r2, [r5, #44]	; 0x2c
 800177e:	e7c3      	b.n	8001708 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001780:	681d      	ldr	r5, [r3, #0]
 8001782:	6928      	ldr	r0, [r5, #16]
 8001784:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001788:	2407      	movs	r4, #7
 800178a:	4094      	lsls	r4, r2
 800178c:	ea20 0004 	bic.w	r0, r0, r4
 8001790:	688c      	ldr	r4, [r1, #8]
 8001792:	fa04 f202 	lsl.w	r2, r4, r2
 8001796:	4302      	orrs	r2, r0
 8001798:	612a      	str	r2, [r5, #16]
 800179a:	e7c6      	b.n	800172a <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 800179c:	6818      	ldr	r0, [r3, #0]
 800179e:	4a18      	ldr	r2, [pc, #96]	; (8001800 <HAL_ADC_ConfigChannel+0x134>)
 80017a0:	4290      	cmp	r0, r2
 80017a2:	d005      	beq.n	80017b0 <HAL_ADC_ConfigChannel+0xe4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017a6:	f042 0220 	orr.w	r2, r2, #32
 80017aa:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80017ac:	2001      	movs	r0, #1
 80017ae:	e7c1      	b.n	8001734 <HAL_ADC_ConfigChannel+0x68>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80017b0:	6892      	ldr	r2, [r2, #8]
 80017b2:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 80017b6:	d11d      	bne.n	80017f4 <HAL_ADC_ConfigChannel+0x128>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80017b8:	4811      	ldr	r0, [pc, #68]	; (8001800 <HAL_ADC_ConfigChannel+0x134>)
 80017ba:	6882      	ldr	r2, [r0, #8]
 80017bc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80017c0:	6082      	str	r2, [r0, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017c2:	680a      	ldr	r2, [r1, #0]
 80017c4:	2a10      	cmp	r2, #16
 80017c6:	d001      	beq.n	80017cc <HAL_ADC_ConfigChannel+0x100>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c8:	2000      	movs	r0, #0
 80017ca:	e7b3      	b.n	8001734 <HAL_ADC_ConfigChannel+0x68>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017cc:	4a0d      	ldr	r2, [pc, #52]	; (8001804 <HAL_ADC_ConfigChannel+0x138>)
 80017ce:	6812      	ldr	r2, [r2, #0]
 80017d0:	490d      	ldr	r1, [pc, #52]	; (8001808 <HAL_ADC_ConfigChannel+0x13c>)
 80017d2:	fba1 1202 	umull	r1, r2, r1, r2
 80017d6:	0c92      	lsrs	r2, r2, #18
 80017d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80017dc:	0052      	lsls	r2, r2, #1
 80017de:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80017e0:	9a01      	ldr	r2, [sp, #4]
 80017e2:	b14a      	cbz	r2, 80017f8 <HAL_ADC_ConfigChannel+0x12c>
            wait_loop_index--;
 80017e4:	9a01      	ldr	r2, [sp, #4]
 80017e6:	3a01      	subs	r2, #1
 80017e8:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80017ea:	9a01      	ldr	r2, [sp, #4]
 80017ec:	2a00      	cmp	r2, #0
 80017ee:	d1f9      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x118>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f0:	2000      	movs	r0, #0
 80017f2:	e79f      	b.n	8001734 <HAL_ADC_ConfigChannel+0x68>
 80017f4:	2000      	movs	r0, #0
 80017f6:	e79d      	b.n	8001734 <HAL_ADC_ConfigChannel+0x68>
 80017f8:	2000      	movs	r0, #0
 80017fa:	e79b      	b.n	8001734 <HAL_ADC_ConfigChannel+0x68>
  __HAL_LOCK(hadc);
 80017fc:	2002      	movs	r0, #2
 80017fe:	e79c      	b.n	800173a <HAL_ADC_ConfigChannel+0x6e>
 8001800:	40012400 	.word	0x40012400
 8001804:	20000000 	.word	0x20000000
 8001808:	431bde83 	.word	0x431bde83

0800180c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800180c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800180e:	6803      	ldr	r3, [r0, #0]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	f012 0f01 	tst.w	r2, #1
 8001816:	d101      	bne.n	800181c <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001818:	2000      	movs	r0, #0
}
 800181a:	bd38      	pop	{r3, r4, r5, pc}
 800181c:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	f022 0201 	bic.w	r2, r2, #1
 8001824:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001826:	f7ff ff37 	bl	8001698 <HAL_GetTick>
 800182a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800182c:	6823      	ldr	r3, [r4, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f013 0f01 	tst.w	r3, #1
 8001834:	d106      	bne.n	8001844 <ADC_ConversionStop_Disable+0x38>
  return HAL_OK;
 8001836:	2000      	movs	r0, #0
 8001838:	e7ef      	b.n	800181a <ADC_ConversionStop_Disable+0xe>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800183a:	6823      	ldr	r3, [r4, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f013 0f01 	tst.w	r3, #1
 8001842:	d013      	beq.n	800186c <ADC_ConversionStop_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001844:	f7ff ff28 	bl	8001698 <HAL_GetTick>
 8001848:	1b43      	subs	r3, r0, r5
 800184a:	2b02      	cmp	r3, #2
 800184c:	d9f5      	bls.n	800183a <ADC_ConversionStop_Disable+0x2e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 800184e:	6823      	ldr	r3, [r4, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f013 0f01 	tst.w	r3, #1
 8001856:	d0f0      	beq.n	800183a <ADC_ConversionStop_Disable+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001858:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800185a:	f043 0310 	orr.w	r3, r3, #16
 800185e:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001860:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8001868:	2001      	movs	r0, #1
 800186a:	e7d6      	b.n	800181a <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 800186c:	2000      	movs	r0, #0
 800186e:	e7d4      	b.n	800181a <ADC_ConversionStop_Disable+0xe>

08001870 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001870:	2800      	cmp	r0, #0
 8001872:	d07a      	beq.n	800196a <HAL_ADC_Init+0xfa>
{
 8001874:	b570      	push	{r4, r5, r6, lr}
 8001876:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001878:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800187a:	2b00      	cmp	r3, #0
 800187c:	d04f      	beq.n	800191e <HAL_ADC_Init+0xae>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800187e:	4620      	mov	r0, r4
 8001880:	f7ff ffc4 	bl	800180c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001884:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001886:	f013 0310 	ands.w	r3, r3, #16
 800188a:	d168      	bne.n	800195e <HAL_ADC_Init+0xee>
 800188c:	2800      	cmp	r0, #0
 800188e:	d166      	bne.n	800195e <HAL_ADC_Init+0xee>
    ADC_STATE_CLR_SET(hadc->State,
 8001890:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001892:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8001896:	f022 0202 	bic.w	r2, r2, #2
 800189a:	f042 0202 	orr.w	r2, r2, #2
 800189e:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80018a0:	7b21      	ldrb	r1, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018a2:	6862      	ldr	r2, [r4, #4]
 80018a4:	69e5      	ldr	r5, [r4, #28]
 80018a6:	432a      	orrs	r2, r5
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018a8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80018ac:	68a5      	ldr	r5, [r4, #8]
 80018ae:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80018b2:	d004      	beq.n	80018be <HAL_ADC_Init+0x4e>
 80018b4:	2d01      	cmp	r5, #1
 80018b6:	bf14      	ite	ne
 80018b8:	461d      	movne	r5, r3
 80018ba:	f44f 7580 	moveq.w	r5, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018be:	7d26      	ldrb	r6, [r4, #20]
 80018c0:	2e01      	cmp	r6, #1
 80018c2:	d032      	beq.n	800192a <HAL_ADC_Init+0xba>
      MODIFY_REG(hadc->Instance->CR1,
 80018c4:	6826      	ldr	r6, [r4, #0]
 80018c6:	6871      	ldr	r1, [r6, #4]
 80018c8:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 80018cc:	4329      	orrs	r1, r5
 80018ce:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80018d0:	6825      	ldr	r5, [r4, #0]
 80018d2:	68ae      	ldr	r6, [r5, #8]
 80018d4:	4926      	ldr	r1, [pc, #152]	; (8001970 <HAL_ADC_Init+0x100>)
 80018d6:	4031      	ands	r1, r6
 80018d8:	4311      	orrs	r1, r2
 80018da:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80018dc:	68a1      	ldr	r1, [r4, #8]
 80018de:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80018e2:	d001      	beq.n	80018e8 <HAL_ADC_Init+0x78>
 80018e4:	2901      	cmp	r1, #1
 80018e6:	d102      	bne.n	80018ee <HAL_ADC_Init+0x7e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80018e8:	6923      	ldr	r3, [r4, #16]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80018ee:	6825      	ldr	r5, [r4, #0]
 80018f0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80018f2:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 80018f6:	430b      	orrs	r3, r1
 80018f8:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018fa:	6823      	ldr	r3, [r4, #0]
 80018fc:	6899      	ldr	r1, [r3, #8]
 80018fe:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <HAL_ADC_Init+0x104>)
 8001900:	400b      	ands	r3, r1
 8001902:	429a      	cmp	r2, r3
 8001904:	d022      	beq.n	800194c <HAL_ADC_Init+0xdc>
      ADC_STATE_CLR_SET(hadc->State,
 8001906:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001908:	f023 0312 	bic.w	r3, r3, #18
 800190c:	f043 0310 	orr.w	r3, r3, #16
 8001910:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001912:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 800191a:	2001      	movs	r0, #1
 800191c:	e024      	b.n	8001968 <HAL_ADC_Init+0xf8>
    ADC_CLEAR_ERRORCODE(hadc);
 800191e:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001920:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001924:	f7ff fd74 	bl	8001410 <HAL_ADC_MspInit>
 8001928:	e7a9      	b.n	800187e <HAL_ADC_Init+0xe>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800192a:	b931      	cbnz	r1, 800193a <HAL_ADC_Init+0xca>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800192c:	69a1      	ldr	r1, [r4, #24]
 800192e:	3901      	subs	r1, #1
 8001930:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8001934:	f441 6500 	orr.w	r5, r1, #2048	; 0x800
 8001938:	e7c4      	b.n	80018c4 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800193a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800193c:	f041 0120 	orr.w	r1, r1, #32
 8001940:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001942:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001944:	f041 0101 	orr.w	r1, r1, #1
 8001948:	62e1      	str	r1, [r4, #44]	; 0x2c
 800194a:	e7bb      	b.n	80018c4 <HAL_ADC_Init+0x54>
      ADC_CLEAR_ERRORCODE(hadc);
 800194c:	2300      	movs	r3, #0
 800194e:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001950:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001952:	f023 0303 	bic.w	r3, r3, #3
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	62a3      	str	r3, [r4, #40]	; 0x28
 800195c:	e004      	b.n	8001968 <HAL_ADC_Init+0xf8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800195e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001960:	f043 0310 	orr.w	r3, r3, #16
 8001964:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8001966:	2001      	movs	r0, #1
}
 8001968:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800196a:	2001      	movs	r0, #1
}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	ffe1f7fd 	.word	0xffe1f7fd
 8001974:	ff1f0efe 	.word	0xff1f0efe

08001978 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001978:	4907      	ldr	r1, [pc, #28]	; (8001998 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800197a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800197c:	0203      	lsls	r3, r0, #8
 800197e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001982:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001986:	0412      	lsls	r2, r2, #16
 8001988:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800198c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001994:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001996:	4770      	bx	lr
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800199c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800199e:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <HAL_NVIC_SetPriority+0x5c>)
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a6:	f1c3 0407 	rsb	r4, r3, #7
 80019aa:	2c04      	cmp	r4, #4
 80019ac:	bf28      	it	cs
 80019ae:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b0:	1d1d      	adds	r5, r3, #4
 80019b2:	2d06      	cmp	r5, #6
 80019b4:	bf8c      	ite	hi
 80019b6:	3b03      	subhi	r3, #3
 80019b8:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ba:	f04f 35ff 	mov.w	r5, #4294967295
 80019be:	fa05 f404 	lsl.w	r4, r5, r4
 80019c2:	ea21 0104 	bic.w	r1, r1, r4
 80019c6:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c8:	fa05 f303 	lsl.w	r3, r5, r3
 80019cc:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 80019d2:	2800      	cmp	r0, #0
 80019d4:	db09      	blt.n	80019ea <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d6:	0109      	lsls	r1, r1, #4
 80019d8:	b2c9      	uxtb	r1, r1
 80019da:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80019de:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80019e2:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80019e6:	bc30      	pop	{r4, r5}
 80019e8:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ea:	f000 000f 	and.w	r0, r0, #15
 80019ee:	0109      	lsls	r1, r1, #4
 80019f0:	b2c9      	uxtb	r1, r1
 80019f2:	4b02      	ldr	r3, [pc, #8]	; (80019fc <HAL_NVIC_SetPriority+0x60>)
 80019f4:	5419      	strb	r1, [r3, r0]
 80019f6:	e7f6      	b.n	80019e6 <HAL_NVIC_SetPriority+0x4a>
 80019f8:	e000ed00 	.word	0xe000ed00
 80019fc:	e000ed14 	.word	0xe000ed14

08001a00 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001a00:	2800      	cmp	r0, #0
 8001a02:	db08      	blt.n	8001a16 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a04:	0942      	lsrs	r2, r0, #5
 8001a06:	f000 001f 	and.w	r0, r0, #31
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	fa03 f000 	lsl.w	r0, r3, r0
 8001a10:	4b01      	ldr	r3, [pc, #4]	; (8001a18 <HAL_NVIC_EnableIRQ+0x18>)
 8001a12:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001a16:	4770      	bx	lr
 8001a18:	e000e100 	.word	0xe000e100

08001a1c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a1c:	3801      	subs	r0, #1
 8001a1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a22:	d20a      	bcs.n	8001a3a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_SYSTICK_Config+0x24>)
 8001a26:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a28:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <HAL_SYSTICK_Config+0x28>)
 8001a2a:	21f0      	movs	r1, #240	; 0xf0
 8001a2c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a30:	2000      	movs	r0, #0
 8001a32:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a34:	2207      	movs	r2, #7
 8001a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a38:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a3a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000e010 	.word	0xe000e010
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a4c:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a4e:	680f      	ldr	r7, [r1, #0]
 8001a50:	2f00      	cmp	r7, #0
 8001a52:	f000 80f2 	beq.w	8001c3a <HAL_GPIO_Init+0x1f2>
  uint32_t config = 0x00u;
 8001a56:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8001a58:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a5a:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8001c50 <HAL_GPIO_Init+0x208>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a5e:	4d78      	ldr	r5, [pc, #480]	; (8001c40 <HAL_GPIO_Init+0x1f8>)
      switch (GPIO_Init->Mode)
 8001a60:	4e78      	ldr	r6, [pc, #480]	; (8001c44 <HAL_GPIO_Init+0x1fc>)
 8001a62:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 8001c54 <HAL_GPIO_Init+0x20c>
 8001a66:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 8001c58 <HAL_GPIO_Init+0x210>
 8001a6a:	e095      	b.n	8001b98 <HAL_GPIO_Init+0x150>
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	e01e      	b.n	8001aae <HAL_GPIO_Init+0x66>
 8001a70:	42b4      	cmp	r4, r6
 8001a72:	d00c      	beq.n	8001a8e <HAL_GPIO_Init+0x46>
 8001a74:	d904      	bls.n	8001a80 <HAL_GPIO_Init+0x38>
 8001a76:	4574      	cmp	r4, lr
 8001a78:	d009      	beq.n	8001a8e <HAL_GPIO_Init+0x46>
 8001a7a:	4544      	cmp	r4, r8
 8001a7c:	d007      	beq.n	8001a8e <HAL_GPIO_Init+0x46>
 8001a7e:	e016      	b.n	8001aae <HAL_GPIO_Init+0x66>
 8001a80:	4f71      	ldr	r7, [pc, #452]	; (8001c48 <HAL_GPIO_Init+0x200>)
 8001a82:	42bc      	cmp	r4, r7
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x46>
 8001a86:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 8001a8a:	42bc      	cmp	r4, r7
 8001a8c:	d10b      	bne.n	8001aa6 <HAL_GPIO_Init+0x5e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a8e:	688a      	ldr	r2, [r1, #8]
 8001a90:	2a00      	cmp	r2, #0
 8001a92:	f000 80c6 	beq.w	8001c22 <HAL_GPIO_Init+0x1da>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a96:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001a98:	bf0c      	ite	eq
 8001a9a:	f8c0 9010 	streq.w	r9, [r0, #16]
            GPIOx->BRR = ioposition;
 8001a9e:	f8c0 9014 	strne.w	r9, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aa2:	2208      	movs	r2, #8
 8001aa4:	e003      	b.n	8001aae <HAL_GPIO_Init+0x66>
      switch (GPIO_Init->Mode)
 8001aa6:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8001aaa:	42bc      	cmp	r4, r7
 8001aac:	d0ef      	beq.n	8001a8e <HAL_GPIO_Init+0x46>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aae:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8001ab2:	f200 80b8 	bhi.w	8001c26 <HAL_GPIO_Init+0x1de>
 8001ab6:	4607      	mov	r7, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ab8:	ea4f 0983 	mov.w	r9, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001abc:	683c      	ldr	r4, [r7, #0]
 8001abe:	f04f 0b0f 	mov.w	fp, #15
 8001ac2:	fa0b fb09 	lsl.w	fp, fp, r9
 8001ac6:	ea24 040b 	bic.w	r4, r4, fp
 8001aca:	fa02 f909 	lsl.w	r9, r2, r9
 8001ace:	ea44 0409 	orr.w	r4, r4, r9
 8001ad2:	603c      	str	r4, [r7, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ad4:	684c      	ldr	r4, [r1, #4]
 8001ad6:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001ada:	d058      	beq.n	8001b8e <HAL_GPIO_Init+0x146>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001adc:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8001ae0:	f044 0401 	orr.w	r4, r4, #1
 8001ae4:	f8cc 4018 	str.w	r4, [ip, #24]
 8001ae8:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8001aec:	f004 0401 	and.w	r4, r4, #1
 8001af0:	9401      	str	r4, [sp, #4]
 8001af2:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001af4:	f023 0403 	bic.w	r4, r3, #3
 8001af8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001afc:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8001b00:	f8d4 9008 	ldr.w	r9, [r4, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b04:	f003 0703 	and.w	r7, r3, #3
 8001b08:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8001b0c:	270f      	movs	r7, #15
 8001b0e:	fa07 f70b 	lsl.w	r7, r7, fp
 8001b12:	ea29 0907 	bic.w	r9, r9, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b16:	4f4d      	ldr	r7, [pc, #308]	; (8001c4c <HAL_GPIO_Init+0x204>)
 8001b18:	42b8      	cmp	r0, r7
 8001b1a:	f000 808a 	beq.w	8001c32 <HAL_GPIO_Init+0x1ea>
 8001b1e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001b22:	42b8      	cmp	r0, r7
 8001b24:	f000 8087 	beq.w	8001c36 <HAL_GPIO_Init+0x1ee>
 8001b28:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001b2c:	42b8      	cmp	r0, r7
 8001b2e:	bf0c      	ite	eq
 8001b30:	2702      	moveq	r7, #2
 8001b32:	2703      	movne	r7, #3
 8001b34:	fa07 f70b 	lsl.w	r7, r7, fp
 8001b38:	ea47 0709 	orr.w	r7, r7, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001b3c:	60a7      	str	r7, [r4, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b3e:	684c      	ldr	r4, [r1, #4]
 8001b40:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001b44:	682c      	ldr	r4, [r5, #0]
 8001b46:	bf14      	ite	ne
 8001b48:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b4c:	ea24 040a 	biceq.w	r4, r4, sl
 8001b50:	602c      	str	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b52:	684c      	ldr	r4, [r1, #4]
 8001b54:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001b58:	686c      	ldr	r4, [r5, #4]
 8001b5a:	bf14      	ite	ne
 8001b5c:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b60:	ea24 040a 	biceq.w	r4, r4, sl
 8001b64:	606c      	str	r4, [r5, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b66:	684c      	ldr	r4, [r1, #4]
 8001b68:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b6c:	68ac      	ldr	r4, [r5, #8]
 8001b6e:	bf14      	ite	ne
 8001b70:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b74:	ea24 040a 	biceq.w	r4, r4, sl
 8001b78:	60ac      	str	r4, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b7a:	684c      	ldr	r4, [r1, #4]
 8001b7c:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b80:	68ec      	ldr	r4, [r5, #12]
 8001b82:	bf14      	ite	ne
 8001b84:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b88:	ea24 040a 	biceq.w	r4, r4, sl
 8001b8c:	60ec      	str	r4, [r5, #12]
        }
      }
    }

	position++;
 8001b8e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b90:	680f      	ldr	r7, [r1, #0]
 8001b92:	fa37 f403 	lsrs.w	r4, r7, r3
 8001b96:	d050      	beq.n	8001c3a <HAL_GPIO_Init+0x1f2>
    ioposition = (0x01uL << position);
 8001b98:	f04f 0901 	mov.w	r9, #1
 8001b9c:	fa09 f903 	lsl.w	r9, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ba0:	ea09 0a07 	and.w	sl, r9, r7
    if (iocurrent == ioposition)
 8001ba4:	ea39 0407 	bics.w	r4, r9, r7
 8001ba8:	d1f1      	bne.n	8001b8e <HAL_GPIO_Init+0x146>
      switch (GPIO_Init->Mode)
 8001baa:	684c      	ldr	r4, [r1, #4]
 8001bac:	2c12      	cmp	r4, #18
 8001bae:	f63f af5f 	bhi.w	8001a70 <HAL_GPIO_Init+0x28>
 8001bb2:	2c12      	cmp	r4, #18
 8001bb4:	f63f af7b 	bhi.w	8001aae <HAL_GPIO_Init+0x66>
 8001bb8:	a701      	add	r7, pc, #4	; (adr r7, 8001bc0 <HAL_GPIO_Init+0x178>)
 8001bba:	f857 f024 	ldr.w	pc, [r7, r4, lsl #2]
 8001bbe:	bf00      	nop
 8001bc0:	08001a8f 	.word	0x08001a8f
 8001bc4:	08001c0d 	.word	0x08001c0d
 8001bc8:	08001c17 	.word	0x08001c17
 8001bcc:	08001a6d 	.word	0x08001a6d
 8001bd0:	08001aaf 	.word	0x08001aaf
 8001bd4:	08001aaf 	.word	0x08001aaf
 8001bd8:	08001aaf 	.word	0x08001aaf
 8001bdc:	08001aaf 	.word	0x08001aaf
 8001be0:	08001aaf 	.word	0x08001aaf
 8001be4:	08001aaf 	.word	0x08001aaf
 8001be8:	08001aaf 	.word	0x08001aaf
 8001bec:	08001aaf 	.word	0x08001aaf
 8001bf0:	08001aaf 	.word	0x08001aaf
 8001bf4:	08001aaf 	.word	0x08001aaf
 8001bf8:	08001aaf 	.word	0x08001aaf
 8001bfc:	08001aaf 	.word	0x08001aaf
 8001c00:	08001aaf 	.word	0x08001aaf
 8001c04:	08001c11 	.word	0x08001c11
 8001c08:	08001c1d 	.word	0x08001c1d
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c0c:	68ca      	ldr	r2, [r1, #12]
          break;
 8001c0e:	e74e      	b.n	8001aae <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c10:	68ca      	ldr	r2, [r1, #12]
 8001c12:	3204      	adds	r2, #4
          break;
 8001c14:	e74b      	b.n	8001aae <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c16:	68ca      	ldr	r2, [r1, #12]
 8001c18:	3208      	adds	r2, #8
          break;
 8001c1a:	e748      	b.n	8001aae <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c1c:	68ca      	ldr	r2, [r1, #12]
 8001c1e:	320c      	adds	r2, #12
          break;
 8001c20:	e745      	b.n	8001aae <HAL_GPIO_Init+0x66>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c22:	2204      	movs	r2, #4
 8001c24:	e743      	b.n	8001aae <HAL_GPIO_Init+0x66>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c26:	1d07      	adds	r7, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c28:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8001c2c:	f1a9 0920 	sub.w	r9, r9, #32
 8001c30:	e744      	b.n	8001abc <HAL_GPIO_Init+0x74>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c32:	2700      	movs	r7, #0
 8001c34:	e77e      	b.n	8001b34 <HAL_GPIO_Init+0xec>
 8001c36:	2701      	movs	r7, #1
 8001c38:	e77c      	b.n	8001b34 <HAL_GPIO_Init+0xec>
  }
}
 8001c3a:	b003      	add	sp, #12
 8001c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c40:	40010400 	.word	0x40010400
 8001c44:	10220000 	.word	0x10220000
 8001c48:	10120000 	.word	0x10120000
 8001c4c:	40010800 	.word	0x40010800
 8001c50:	40021000 	.word	0x40021000
 8001c54:	10310000 	.word	0x10310000
 8001c58:	10320000 	.word	0x10320000

08001c5c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c5c:	6883      	ldr	r3, [r0, #8]
 8001c5e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001c60:	bf14      	ite	ne
 8001c62:	2001      	movne	r0, #1
 8001c64:	2000      	moveq	r0, #0
 8001c66:	4770      	bx	lr

08001c68 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c68:	b10a      	cbz	r2, 8001c6e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c6a:	6101      	str	r1, [r0, #16]
 8001c6c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c6e:	0409      	lsls	r1, r1, #16
 8001c70:	6101      	str	r1, [r0, #16]
  }
}
 8001c72:	4770      	bx	lr

08001c74 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c74:	2800      	cmp	r0, #0
 8001c76:	f000 8201 	beq.w	800207c <HAL_RCC_OscConfig+0x408>
{
 8001c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c82:	6803      	ldr	r3, [r0, #0]
 8001c84:	f013 0f01 	tst.w	r3, #1
 8001c88:	d02c      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c8a:	4baa      	ldr	r3, [pc, #680]	; (8001f34 <HAL_RCC_OscConfig+0x2c0>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d01d      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c96:	4ba7      	ldr	r3, [pc, #668]	; (8001f34 <HAL_RCC_OscConfig+0x2c0>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d012      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca2:	6863      	ldr	r3, [r4, #4]
 8001ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca8:	d041      	beq.n	8001d2e <HAL_RCC_OscConfig+0xba>
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d155      	bne.n	8001d5a <HAL_RCC_OscConfig+0xe6>
 8001cae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001cb2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	e037      	b.n	8001d38 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cc8:	4b9a      	ldr	r3, [pc, #616]	; (8001f34 <HAL_RCC_OscConfig+0x2c0>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001cd0:	d0e7      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd2:	4b98      	ldr	r3, [pc, #608]	; (8001f34 <HAL_RCC_OscConfig+0x2c0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001cda:	d003      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x70>
 8001cdc:	6863      	ldr	r3, [r4, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 81ce 	beq.w	8002080 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce4:	6823      	ldr	r3, [r4, #0]
 8001ce6:	f013 0f02 	tst.w	r3, #2
 8001cea:	d075      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cec:	4b91      	ldr	r3, [pc, #580]	; (8001f34 <HAL_RCC_OscConfig+0x2c0>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f013 0f0c 	tst.w	r3, #12
 8001cf4:	d05f      	beq.n	8001db6 <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cf6:	4b8f      	ldr	r3, [pc, #572]	; (8001f34 <HAL_RCC_OscConfig+0x2c0>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d054      	beq.n	8001dac <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d02:	6923      	ldr	r3, [r4, #16]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 8089 	beq.w	8001e1c <HAL_RCC_OscConfig+0x1a8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d0a:	4b8b      	ldr	r3, [pc, #556]	; (8001f38 <HAL_RCC_OscConfig+0x2c4>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d10:	f7ff fcc2 	bl	8001698 <HAL_GetTick>
 8001d14:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d16:	4e87      	ldr	r6, [pc, #540]	; (8001f34 <HAL_RCC_OscConfig+0x2c0>)
 8001d18:	6833      	ldr	r3, [r6, #0]
 8001d1a:	f013 0f02 	tst.w	r3, #2
 8001d1e:	d174      	bne.n	8001e0a <HAL_RCC_OscConfig+0x196>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d20:	f7ff fcba 	bl	8001698 <HAL_GetTick>
 8001d24:	1b40      	subs	r0, r0, r5
 8001d26:	2802      	cmp	r0, #2
 8001d28:	d9f6      	bls.n	8001d18 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8001d2a:	2003      	movs	r0, #3
 8001d2c:	e1ad      	b.n	800208a <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d2e:	4a81      	ldr	r2, [pc, #516]	; (8001f34 <HAL_RCC_OscConfig+0x2c0>)
 8001d30:	6813      	ldr	r3, [r2, #0]
 8001d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d36:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d38:	6863      	ldr	r3, [r4, #4]
 8001d3a:	b343      	cbz	r3, 8001d8e <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8001d3c:	f7ff fcac 	bl	8001698 <HAL_GetTick>
 8001d40:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d42:	4e7c      	ldr	r6, [pc, #496]	; (8001f34 <HAL_RCC_OscConfig+0x2c0>)
 8001d44:	6833      	ldr	r3, [r6, #0]
 8001d46:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001d4a:	d1cb      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7ff fca4 	bl	8001698 <HAL_GetTick>
 8001d50:	1b40      	subs	r0, r0, r5
 8001d52:	2864      	cmp	r0, #100	; 0x64
 8001d54:	d9f6      	bls.n	8001d44 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8001d56:	2003      	movs	r0, #3
 8001d58:	e197      	b.n	800208a <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d5e:	d009      	beq.n	8001d74 <HAL_RCC_OscConfig+0x100>
 8001d60:	4b74      	ldr	r3, [pc, #464]	; (8001f34 <HAL_RCC_OscConfig+0x2c0>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	e7e1      	b.n	8001d38 <HAL_RCC_OscConfig+0xc4>
 8001d74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d78:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	e7d4      	b.n	8001d38 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8001d8e:	f7ff fc83 	bl	8001698 <HAL_GetTick>
 8001d92:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d94:	4e67      	ldr	r6, [pc, #412]	; (8001f34 <HAL_RCC_OscConfig+0x2c0>)
 8001d96:	6833      	ldr	r3, [r6, #0]
 8001d98:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001d9c:	d0a2      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d9e:	f7ff fc7b 	bl	8001698 <HAL_GetTick>
 8001da2:	1b40      	subs	r0, r0, r5
 8001da4:	2864      	cmp	r0, #100	; 0x64
 8001da6:	d9f6      	bls.n	8001d96 <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8001da8:	2003      	movs	r0, #3
 8001daa:	e16e      	b.n	800208a <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dac:	4b61      	ldr	r3, [pc, #388]	; (8001f34 <HAL_RCC_OscConfig+0x2c0>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001db4:	d1a5      	bne.n	8001d02 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db6:	4b5f      	ldr	r3, [pc, #380]	; (8001f34 <HAL_RCC_OscConfig+0x2c0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f013 0f02 	tst.w	r3, #2
 8001dbe:	d003      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x154>
 8001dc0:	6923      	ldr	r3, [r4, #16]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	f040 815e 	bne.w	8002084 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc8:	4a5a      	ldr	r2, [pc, #360]	; (8001f34 <HAL_RCC_OscConfig+0x2c0>)
 8001dca:	6813      	ldr	r3, [r2, #0]
 8001dcc:	6961      	ldr	r1, [r4, #20]
 8001dce:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001dd2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001dd6:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd8:	6823      	ldr	r3, [r4, #0]
 8001dda:	f013 0f08 	tst.w	r3, #8
 8001dde:	d03c      	beq.n	8001e5a <HAL_RCC_OscConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001de0:	69a3      	ldr	r3, [r4, #24]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d04f      	beq.n	8001e86 <HAL_RCC_OscConfig+0x212>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de6:	4b55      	ldr	r3, [pc, #340]	; (8001f3c <HAL_RCC_OscConfig+0x2c8>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dec:	f7ff fc54 	bl	8001698 <HAL_GetTick>
 8001df0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df2:	4e50      	ldr	r6, [pc, #320]	; (8001f34 <HAL_RCC_OscConfig+0x2c0>)
 8001df4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001df6:	f013 0f02 	tst.w	r3, #2
 8001dfa:	d121      	bne.n	8001e40 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dfc:	f7ff fc4c 	bl	8001698 <HAL_GetTick>
 8001e00:	1b40      	subs	r0, r0, r5
 8001e02:	2802      	cmp	r0, #2
 8001e04:	d9f6      	bls.n	8001df4 <HAL_RCC_OscConfig+0x180>
        {
          return HAL_TIMEOUT;
 8001e06:	2003      	movs	r0, #3
 8001e08:	e13f      	b.n	800208a <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0a:	4a4a      	ldr	r2, [pc, #296]	; (8001f34 <HAL_RCC_OscConfig+0x2c0>)
 8001e0c:	6813      	ldr	r3, [r2, #0]
 8001e0e:	6961      	ldr	r1, [r4, #20]
 8001e10:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e14:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	e7dd      	b.n	8001dd8 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8001e1c:	4b46      	ldr	r3, [pc, #280]	; (8001f38 <HAL_RCC_OscConfig+0x2c4>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e22:	f7ff fc39 	bl	8001698 <HAL_GetTick>
 8001e26:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e28:	4e42      	ldr	r6, [pc, #264]	; (8001f34 <HAL_RCC_OscConfig+0x2c0>)
 8001e2a:	6833      	ldr	r3, [r6, #0]
 8001e2c:	f013 0f02 	tst.w	r3, #2
 8001e30:	d0d2      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e32:	f7ff fc31 	bl	8001698 <HAL_GetTick>
 8001e36:	1b40      	subs	r0, r0, r5
 8001e38:	2802      	cmp	r0, #2
 8001e3a:	d9f6      	bls.n	8001e2a <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8001e3c:	2003      	movs	r0, #3
 8001e3e:	e124      	b.n	800208a <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e40:	4b3f      	ldr	r3, [pc, #252]	; (8001f40 <HAL_RCC_OscConfig+0x2cc>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a3f      	ldr	r2, [pc, #252]	; (8001f44 <HAL_RCC_OscConfig+0x2d0>)
 8001e46:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4a:	0a5b      	lsrs	r3, r3, #9
 8001e4c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001e4e:	bf00      	nop
  }
  while (Delay --);
 8001e50:	9b01      	ldr	r3, [sp, #4]
 8001e52:	1e5a      	subs	r2, r3, #1
 8001e54:	9201      	str	r2, [sp, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f9      	bne.n	8001e4e <HAL_RCC_OscConfig+0x1da>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e5a:	6823      	ldr	r3, [r4, #0]
 8001e5c:	f013 0f04 	tst.w	r3, #4
 8001e60:	f000 809c 	beq.w	8001f9c <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e64:	4b33      	ldr	r3, [pc, #204]	; (8001f34 <HAL_RCC_OscConfig+0x2c0>)
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001e6c:	d11d      	bne.n	8001eaa <HAL_RCC_OscConfig+0x236>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6e:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <HAL_RCC_OscConfig+0x2c0>)
 8001e70:	69da      	ldr	r2, [r3, #28]
 8001e72:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e76:	61da      	str	r2, [r3, #28]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8001e82:	2501      	movs	r5, #1
 8001e84:	e012      	b.n	8001eac <HAL_RCC_OscConfig+0x238>
      __HAL_RCC_LSI_DISABLE();
 8001e86:	4b2d      	ldr	r3, [pc, #180]	; (8001f3c <HAL_RCC_OscConfig+0x2c8>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001e8c:	f7ff fc04 	bl	8001698 <HAL_GetTick>
 8001e90:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e92:	4e28      	ldr	r6, [pc, #160]	; (8001f34 <HAL_RCC_OscConfig+0x2c0>)
 8001e94:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001e96:	f013 0f02 	tst.w	r3, #2
 8001e9a:	d0de      	beq.n	8001e5a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9c:	f7ff fbfc 	bl	8001698 <HAL_GetTick>
 8001ea0:	1b40      	subs	r0, r0, r5
 8001ea2:	2802      	cmp	r0, #2
 8001ea4:	d9f6      	bls.n	8001e94 <HAL_RCC_OscConfig+0x220>
          return HAL_TIMEOUT;
 8001ea6:	2003      	movs	r0, #3
 8001ea8:	e0ef      	b.n	800208a <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8001eaa:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	4b26      	ldr	r3, [pc, #152]	; (8001f48 <HAL_RCC_OscConfig+0x2d4>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001eb4:	d011      	beq.n	8001eda <HAL_RCC_OscConfig+0x266>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb6:	68e3      	ldr	r3, [r4, #12]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d022      	beq.n	8001f02 <HAL_RCC_OscConfig+0x28e>
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d145      	bne.n	8001f4c <HAL_RCC_OscConfig+0x2d8>
 8001ec0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ec4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001ec8:	6a1a      	ldr	r2, [r3, #32]
 8001eca:	f022 0201 	bic.w	r2, r2, #1
 8001ece:	621a      	str	r2, [r3, #32]
 8001ed0:	6a1a      	ldr	r2, [r3, #32]
 8001ed2:	f022 0204 	bic.w	r2, r2, #4
 8001ed6:	621a      	str	r2, [r3, #32]
 8001ed8:	e018      	b.n	8001f0c <HAL_RCC_OscConfig+0x298>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eda:	4a1b      	ldr	r2, [pc, #108]	; (8001f48 <HAL_RCC_OscConfig+0x2d4>)
 8001edc:	6813      	ldr	r3, [r2, #0]
 8001ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001ee4:	f7ff fbd8 	bl	8001698 <HAL_GetTick>
 8001ee8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eea:	4f17      	ldr	r7, [pc, #92]	; (8001f48 <HAL_RCC_OscConfig+0x2d4>)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001ef2:	d1e0      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x242>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef4:	f7ff fbd0 	bl	8001698 <HAL_GetTick>
 8001ef8:	1b80      	subs	r0, r0, r6
 8001efa:	2864      	cmp	r0, #100	; 0x64
 8001efc:	d9f6      	bls.n	8001eec <HAL_RCC_OscConfig+0x278>
          return HAL_TIMEOUT;
 8001efe:	2003      	movs	r0, #3
 8001f00:	e0c3      	b.n	800208a <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f02:	4a0c      	ldr	r2, [pc, #48]	; (8001f34 <HAL_RCC_OscConfig+0x2c0>)
 8001f04:	6a13      	ldr	r3, [r2, #32]
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f0c:	68e3      	ldr	r3, [r4, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d032      	beq.n	8001f78 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8001f12:	f7ff fbc1 	bl	8001698 <HAL_GetTick>
 8001f16:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f18:	4f06      	ldr	r7, [pc, #24]	; (8001f34 <HAL_RCC_OscConfig+0x2c0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1a:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	f013 0f02 	tst.w	r3, #2
 8001f24:	d139      	bne.n	8001f9a <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f26:	f7ff fbb7 	bl	8001698 <HAL_GetTick>
 8001f2a:	1b80      	subs	r0, r0, r6
 8001f2c:	4540      	cmp	r0, r8
 8001f2e:	d9f6      	bls.n	8001f1e <HAL_RCC_OscConfig+0x2aa>
          return HAL_TIMEOUT;
 8001f30:	2003      	movs	r0, #3
 8001f32:	e0aa      	b.n	800208a <HAL_RCC_OscConfig+0x416>
 8001f34:	40021000 	.word	0x40021000
 8001f38:	42420000 	.word	0x42420000
 8001f3c:	42420480 	.word	0x42420480
 8001f40:	20000000 	.word	0x20000000
 8001f44:	10624dd3 	.word	0x10624dd3
 8001f48:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f4c:	2b05      	cmp	r3, #5
 8001f4e:	d009      	beq.n	8001f64 <HAL_RCC_OscConfig+0x2f0>
 8001f50:	4b51      	ldr	r3, [pc, #324]	; (8002098 <HAL_RCC_OscConfig+0x424>)
 8001f52:	6a1a      	ldr	r2, [r3, #32]
 8001f54:	f022 0201 	bic.w	r2, r2, #1
 8001f58:	621a      	str	r2, [r3, #32]
 8001f5a:	6a1a      	ldr	r2, [r3, #32]
 8001f5c:	f022 0204 	bic.w	r2, r2, #4
 8001f60:	621a      	str	r2, [r3, #32]
 8001f62:	e7d3      	b.n	8001f0c <HAL_RCC_OscConfig+0x298>
 8001f64:	4b4c      	ldr	r3, [pc, #304]	; (8002098 <HAL_RCC_OscConfig+0x424>)
 8001f66:	6a1a      	ldr	r2, [r3, #32]
 8001f68:	f042 0204 	orr.w	r2, r2, #4
 8001f6c:	621a      	str	r2, [r3, #32]
 8001f6e:	6a1a      	ldr	r2, [r3, #32]
 8001f70:	f042 0201 	orr.w	r2, r2, #1
 8001f74:	621a      	str	r2, [r3, #32]
 8001f76:	e7c9      	b.n	8001f0c <HAL_RCC_OscConfig+0x298>
      tickstart = HAL_GetTick();
 8001f78:	f7ff fb8e 	bl	8001698 <HAL_GetTick>
 8001f7c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7e:	4f46      	ldr	r7, [pc, #280]	; (8002098 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f80:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f84:	6a3b      	ldr	r3, [r7, #32]
 8001f86:	f013 0f02 	tst.w	r3, #2
 8001f8a:	d006      	beq.n	8001f9a <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8c:	f7ff fb84 	bl	8001698 <HAL_GetTick>
 8001f90:	1b80      	subs	r0, r0, r6
 8001f92:	4540      	cmp	r0, r8
 8001f94:	d9f6      	bls.n	8001f84 <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 8001f96:	2003      	movs	r0, #3
 8001f98:	e077      	b.n	800208a <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 8001f9a:	b9e5      	cbnz	r5, 8001fd6 <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f9c:	69e3      	ldr	r3, [r4, #28]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d072      	beq.n	8002088 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fa2:	4a3d      	ldr	r2, [pc, #244]	; (8002098 <HAL_RCC_OscConfig+0x424>)
 8001fa4:	6852      	ldr	r2, [r2, #4]
 8001fa6:	f002 020c 	and.w	r2, r2, #12
 8001faa:	2a08      	cmp	r2, #8
 8001fac:	d056      	beq.n	800205c <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d017      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 8001fb2:	4b3a      	ldr	r3, [pc, #232]	; (800209c <HAL_RCC_OscConfig+0x428>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fb6e 	bl	8001698 <HAL_GetTick>
 8001fbc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fbe:	4d36      	ldr	r5, [pc, #216]	; (8002098 <HAL_RCC_OscConfig+0x424>)
 8001fc0:	682b      	ldr	r3, [r5, #0]
 8001fc2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001fc6:	d047      	beq.n	8002058 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7ff fb66 	bl	8001698 <HAL_GetTick>
 8001fcc:	1b00      	subs	r0, r0, r4
 8001fce:	2802      	cmp	r0, #2
 8001fd0:	d9f6      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 8001fd2:	2003      	movs	r0, #3
 8001fd4:	e059      	b.n	800208a <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd6:	4a30      	ldr	r2, [pc, #192]	; (8002098 <HAL_RCC_OscConfig+0x424>)
 8001fd8:	69d3      	ldr	r3, [r2, #28]
 8001fda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fde:	61d3      	str	r3, [r2, #28]
 8001fe0:	e7dc      	b.n	8001f9c <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 8001fe2:	4b2e      	ldr	r3, [pc, #184]	; (800209c <HAL_RCC_OscConfig+0x428>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001fe8:	f7ff fb56 	bl	8001698 <HAL_GetTick>
 8001fec:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fee:	4e2a      	ldr	r6, [pc, #168]	; (8002098 <HAL_RCC_OscConfig+0x424>)
 8001ff0:	6833      	ldr	r3, [r6, #0]
 8001ff2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001ff6:	d006      	beq.n	8002006 <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff8:	f7ff fb4e 	bl	8001698 <HAL_GetTick>
 8001ffc:	1b40      	subs	r0, r0, r5
 8001ffe:	2802      	cmp	r0, #2
 8002000:	d9f6      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 8002002:	2003      	movs	r0, #3
 8002004:	e041      	b.n	800208a <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002006:	6a23      	ldr	r3, [r4, #32]
 8002008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200c:	d01a      	beq.n	8002044 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800200e:	4922      	ldr	r1, [pc, #136]	; (8002098 <HAL_RCC_OscConfig+0x424>)
 8002010:	684a      	ldr	r2, [r1, #4]
 8002012:	6a23      	ldr	r3, [r4, #32]
 8002014:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002016:	4303      	orrs	r3, r0
 8002018:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800201c:	4313      	orrs	r3, r2
 800201e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8002020:	4b1e      	ldr	r3, [pc, #120]	; (800209c <HAL_RCC_OscConfig+0x428>)
 8002022:	2201      	movs	r2, #1
 8002024:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002026:	f7ff fb37 	bl	8001698 <HAL_GetTick>
 800202a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800202c:	4d1a      	ldr	r5, [pc, #104]	; (8002098 <HAL_RCC_OscConfig+0x424>)
 800202e:	682b      	ldr	r3, [r5, #0]
 8002030:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002034:	d10e      	bne.n	8002054 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002036:	f7ff fb2f 	bl	8001698 <HAL_GetTick>
 800203a:	1b00      	subs	r0, r0, r4
 800203c:	2802      	cmp	r0, #2
 800203e:	d9f6      	bls.n	800202e <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8002040:	2003      	movs	r0, #3
 8002042:	e022      	b.n	800208a <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002044:	4a14      	ldr	r2, [pc, #80]	; (8002098 <HAL_RCC_OscConfig+0x424>)
 8002046:	6853      	ldr	r3, [r2, #4]
 8002048:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800204c:	68a1      	ldr	r1, [r4, #8]
 800204e:	430b      	orrs	r3, r1
 8002050:	6053      	str	r3, [r2, #4]
 8002052:	e7dc      	b.n	800200e <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8002054:	2000      	movs	r0, #0
 8002056:	e018      	b.n	800208a <HAL_RCC_OscConfig+0x416>
 8002058:	2000      	movs	r0, #0
 800205a:	e016      	b.n	800208a <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800205c:	2b01      	cmp	r3, #1
 800205e:	d017      	beq.n	8002090 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 8002060:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <HAL_RCC_OscConfig+0x424>)
 8002062:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002064:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002068:	6a22      	ldr	r2, [r4, #32]
 800206a:	4291      	cmp	r1, r2
 800206c:	d112      	bne.n	8002094 <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800206e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002072:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 8002074:	1a18      	subs	r0, r3, r0
 8002076:	bf18      	it	ne
 8002078:	2001      	movne	r0, #1
 800207a:	e006      	b.n	800208a <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 800207c:	2001      	movs	r0, #1
}
 800207e:	4770      	bx	lr
        return HAL_ERROR;
 8002080:	2001      	movs	r0, #1
 8002082:	e002      	b.n	800208a <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8002084:	2001      	movs	r0, #1
 8002086:	e000      	b.n	800208a <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8002088:	2000      	movs	r0, #0
}
 800208a:	b002      	add	sp, #8
 800208c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8002090:	2001      	movs	r0, #1
 8002092:	e7fa      	b.n	800208a <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8002094:	2001      	movs	r0, #1
 8002096:	e7f8      	b.n	800208a <HAL_RCC_OscConfig+0x416>
 8002098:	40021000 	.word	0x40021000
 800209c:	42420060 	.word	0x42420060

080020a0 <HAL_RCC_GetSysClockFreq>:
{
 80020a0:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020a2:	4b16      	ldr	r3, [pc, #88]	; (80020fc <HAL_RCC_GetSysClockFreq+0x5c>)
 80020a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020a6:	f10d 0c18 	add.w	ip, sp, #24
 80020aa:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020ae:	f240 2301 	movw	r3, #513	; 0x201
 80020b2:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80020b6:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_RCC_GetSysClockFreq+0x60>)
 80020b8:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80020ba:	f003 020c 	and.w	r2, r3, #12
 80020be:	2a08      	cmp	r2, #8
 80020c0:	d002      	beq.n	80020c8 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 80020c2:	4810      	ldr	r0, [pc, #64]	; (8002104 <HAL_RCC_GetSysClockFreq+0x64>)
}
 80020c4:	b006      	add	sp, #24
 80020c6:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020c8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80020cc:	4462      	add	r2, ip
 80020ce:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020d2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80020d6:	d00c      	beq.n	80020f2 <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020d8:	4b09      	ldr	r3, [pc, #36]	; (8002100 <HAL_RCC_GetSysClockFreq+0x60>)
 80020da:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020dc:	4809      	ldr	r0, [pc, #36]	; (8002104 <HAL_RCC_GetSysClockFreq+0x64>)
 80020de:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020e2:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80020e6:	4463      	add	r3, ip
 80020e8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80020f0:	e7e8      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020f2:	4805      	ldr	r0, [pc, #20]	; (8002108 <HAL_RCC_GetSysClockFreq+0x68>)
 80020f4:	fb00 f002 	mul.w	r0, r0, r2
 80020f8:	e7e4      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x24>
 80020fa:	bf00      	nop
 80020fc:	08005d30 	.word	0x08005d30
 8002100:	40021000 	.word	0x40021000
 8002104:	007a1200 	.word	0x007a1200
 8002108:	003d0900 	.word	0x003d0900

0800210c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800210c:	2800      	cmp	r0, #0
 800210e:	f000 80a2 	beq.w	8002256 <HAL_RCC_ClockConfig+0x14a>
{
 8002112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002116:	460d      	mov	r5, r1
 8002118:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800211a:	4b53      	ldr	r3, [pc, #332]	; (8002268 <HAL_RCC_ClockConfig+0x15c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	428b      	cmp	r3, r1
 8002124:	d20b      	bcs.n	800213e <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002126:	4a50      	ldr	r2, [pc, #320]	; (8002268 <HAL_RCC_ClockConfig+0x15c>)
 8002128:	6813      	ldr	r3, [r2, #0]
 800212a:	f023 0307 	bic.w	r3, r3, #7
 800212e:	430b      	orrs	r3, r1
 8002130:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002132:	6813      	ldr	r3, [r2, #0]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	428b      	cmp	r3, r1
 800213a:	f040 808e 	bne.w	800225a <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800213e:	6823      	ldr	r3, [r4, #0]
 8002140:	f013 0f02 	tst.w	r3, #2
 8002144:	d017      	beq.n	8002176 <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002146:	f013 0f04 	tst.w	r3, #4
 800214a:	d004      	beq.n	8002156 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800214c:	4a47      	ldr	r2, [pc, #284]	; (800226c <HAL_RCC_ClockConfig+0x160>)
 800214e:	6853      	ldr	r3, [r2, #4]
 8002150:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002154:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002156:	6823      	ldr	r3, [r4, #0]
 8002158:	f013 0f08 	tst.w	r3, #8
 800215c:	d004      	beq.n	8002168 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800215e:	4a43      	ldr	r2, [pc, #268]	; (800226c <HAL_RCC_ClockConfig+0x160>)
 8002160:	6853      	ldr	r3, [r2, #4]
 8002162:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002166:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002168:	4a40      	ldr	r2, [pc, #256]	; (800226c <HAL_RCC_ClockConfig+0x160>)
 800216a:	6853      	ldr	r3, [r2, #4]
 800216c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002170:	68a1      	ldr	r1, [r4, #8]
 8002172:	430b      	orrs	r3, r1
 8002174:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002176:	6823      	ldr	r3, [r4, #0]
 8002178:	f013 0f01 	tst.w	r3, #1
 800217c:	d031      	beq.n	80021e2 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800217e:	6862      	ldr	r2, [r4, #4]
 8002180:	2a01      	cmp	r2, #1
 8002182:	d020      	beq.n	80021c6 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002184:	2a02      	cmp	r2, #2
 8002186:	d025      	beq.n	80021d4 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002188:	4b38      	ldr	r3, [pc, #224]	; (800226c <HAL_RCC_ClockConfig+0x160>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f013 0f02 	tst.w	r3, #2
 8002190:	d065      	beq.n	800225e <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002192:	4936      	ldr	r1, [pc, #216]	; (800226c <HAL_RCC_ClockConfig+0x160>)
 8002194:	684b      	ldr	r3, [r1, #4]
 8002196:	f023 0303 	bic.w	r3, r3, #3
 800219a:	4313      	orrs	r3, r2
 800219c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800219e:	f7ff fa7b 	bl	8001698 <HAL_GetTick>
 80021a2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a4:	4f31      	ldr	r7, [pc, #196]	; (800226c <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a6:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f003 030c 	and.w	r3, r3, #12
 80021b0:	6862      	ldr	r2, [r4, #4]
 80021b2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80021b6:	d014      	beq.n	80021e2 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b8:	f7ff fa6e 	bl	8001698 <HAL_GetTick>
 80021bc:	1b80      	subs	r0, r0, r6
 80021be:	4540      	cmp	r0, r8
 80021c0:	d9f3      	bls.n	80021aa <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 80021c2:	2003      	movs	r0, #3
 80021c4:	e045      	b.n	8002252 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	4b29      	ldr	r3, [pc, #164]	; (800226c <HAL_RCC_ClockConfig+0x160>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80021ce:	d1e0      	bne.n	8002192 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80021d0:	2001      	movs	r0, #1
 80021d2:	e03e      	b.n	8002252 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d4:	4b25      	ldr	r3, [pc, #148]	; (800226c <HAL_RCC_ClockConfig+0x160>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80021dc:	d1d9      	bne.n	8002192 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80021de:	2001      	movs	r0, #1
 80021e0:	e037      	b.n	8002252 <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021e2:	4b21      	ldr	r3, [pc, #132]	; (8002268 <HAL_RCC_ClockConfig+0x15c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	42ab      	cmp	r3, r5
 80021ec:	d90a      	bls.n	8002204 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4a1e      	ldr	r2, [pc, #120]	; (8002268 <HAL_RCC_ClockConfig+0x15c>)
 80021f0:	6813      	ldr	r3, [r2, #0]
 80021f2:	f023 0307 	bic.w	r3, r3, #7
 80021f6:	432b      	orrs	r3, r5
 80021f8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fa:	6813      	ldr	r3, [r2, #0]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	42ab      	cmp	r3, r5
 8002202:	d12e      	bne.n	8002262 <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002204:	6823      	ldr	r3, [r4, #0]
 8002206:	f013 0f04 	tst.w	r3, #4
 800220a:	d006      	beq.n	800221a <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800220c:	4a17      	ldr	r2, [pc, #92]	; (800226c <HAL_RCC_ClockConfig+0x160>)
 800220e:	6853      	ldr	r3, [r2, #4]
 8002210:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002214:	68e1      	ldr	r1, [r4, #12]
 8002216:	430b      	orrs	r3, r1
 8002218:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221a:	6823      	ldr	r3, [r4, #0]
 800221c:	f013 0f08 	tst.w	r3, #8
 8002220:	d007      	beq.n	8002232 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002222:	4a12      	ldr	r2, [pc, #72]	; (800226c <HAL_RCC_ClockConfig+0x160>)
 8002224:	6853      	ldr	r3, [r2, #4]
 8002226:	6921      	ldr	r1, [r4, #16]
 8002228:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800222c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002230:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002232:	f7ff ff35 	bl	80020a0 <HAL_RCC_GetSysClockFreq>
 8002236:	4b0d      	ldr	r3, [pc, #52]	; (800226c <HAL_RCC_ClockConfig+0x160>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800223e:	4a0c      	ldr	r2, [pc, #48]	; (8002270 <HAL_RCC_ClockConfig+0x164>)
 8002240:	5cd3      	ldrb	r3, [r2, r3]
 8002242:	40d8      	lsrs	r0, r3
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_RCC_ClockConfig+0x168>)
 8002246:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HAL_RCC_ClockConfig+0x16c>)
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	f7ff f9e0 	bl	8001610 <HAL_InitTick>
  return HAL_OK;
 8002250:	2000      	movs	r0, #0
}
 8002252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8002256:	2001      	movs	r0, #1
}
 8002258:	4770      	bx	lr
    return HAL_ERROR;
 800225a:	2001      	movs	r0, #1
 800225c:	e7f9      	b.n	8002252 <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 800225e:	2001      	movs	r0, #1
 8002260:	e7f7      	b.n	8002252 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8002262:	2001      	movs	r0, #1
 8002264:	e7f5      	b.n	8002252 <HAL_RCC_ClockConfig+0x146>
 8002266:	bf00      	nop
 8002268:	40022000 	.word	0x40022000
 800226c:	40021000 	.word	0x40021000
 8002270:	08005d20 	.word	0x08005d20
 8002274:	20000000 	.word	0x20000000
 8002278:	20000008 	.word	0x20000008

0800227c <HAL_RCC_GetHCLKFreq>:
}
 800227c:	4b01      	ldr	r3, [pc, #4]	; (8002284 <HAL_RCC_GetHCLKFreq+0x8>)
 800227e:	6818      	ldr	r0, [r3, #0]
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000000 	.word	0x20000000

08002288 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002290:	6803      	ldr	r3, [r0, #0]
 8002292:	f013 0f01 	tst.w	r3, #1
 8002296:	d034      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002298:	4b3e      	ldr	r3, [pc, #248]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80022a0:	d147      	bne.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a2:	4b3c      	ldr	r3, [pc, #240]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80022a4:	69da      	ldr	r2, [r3, #28]
 80022a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022aa:	61da      	str	r2, [r3, #28]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b2:	9301      	str	r3, [sp, #4]
 80022b4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80022b6:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b8:	4b37      	ldr	r3, [pc, #220]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80022c0:	d039      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022c2:	4b34      	ldr	r3, [pc, #208]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80022c4:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022c6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80022ca:	d011      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80022cc:	6862      	ldr	r2, [r4, #4]
 80022ce:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d00c      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022d6:	4a2f      	ldr	r2, [pc, #188]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80022d8:	6a13      	ldr	r3, [r2, #32]
 80022da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022de:	492f      	ldr	r1, [pc, #188]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80022e0:	2601      	movs	r6, #1
 80022e2:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022e4:	2600      	movs	r6, #0
 80022e6:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022e8:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022ea:	f013 0f01 	tst.w	r3, #1
 80022ee:	d136      	bne.n	800235e <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022f0:	4a28      	ldr	r2, [pc, #160]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80022f2:	6a13      	ldr	r3, [r2, #32]
 80022f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f8:	6861      	ldr	r1, [r4, #4]
 80022fa:	430b      	orrs	r3, r1
 80022fc:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022fe:	2d00      	cmp	r5, #0
 8002300:	d13e      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002302:	6823      	ldr	r3, [r4, #0]
 8002304:	f013 0f02 	tst.w	r3, #2
 8002308:	d006      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800230a:	4a22      	ldr	r2, [pc, #136]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800230c:	6853      	ldr	r3, [r2, #4]
 800230e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002312:	68a1      	ldr	r1, [r4, #8]
 8002314:	430b      	orrs	r3, r1
 8002316:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002318:	6823      	ldr	r3, [r4, #0]
 800231a:	f013 0f10 	tst.w	r3, #16
 800231e:	d034      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002320:	4a1c      	ldr	r2, [pc, #112]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002322:	6853      	ldr	r3, [r2, #4]
 8002324:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002328:	68e1      	ldr	r1, [r4, #12]
 800232a:	430b      	orrs	r3, r1
 800232c:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800232e:	2000      	movs	r0, #0
 8002330:	e02c      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x104>
    FlagStatus pwrclkchanged = RESET;
 8002332:	2500      	movs	r5, #0
 8002334:	e7c0      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002336:	4a18      	ldr	r2, [pc, #96]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002338:	6813      	ldr	r3, [r2, #0]
 800233a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002340:	f7ff f9aa 	bl	8001698 <HAL_GetTick>
 8002344:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002346:	4f14      	ldr	r7, [pc, #80]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800234e:	d1b8      	bne.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002350:	f7ff f9a2 	bl	8001698 <HAL_GetTick>
 8002354:	1b80      	subs	r0, r0, r6
 8002356:	2864      	cmp	r0, #100	; 0x64
 8002358:	d9f6      	bls.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 800235a:	2003      	movs	r0, #3
 800235c:	e016      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x104>
        tickstart = HAL_GetTick();
 800235e:	f7ff f99b 	bl	8001698 <HAL_GetTick>
 8002362:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002364:	4f0b      	ldr	r7, [pc, #44]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002366:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236a:	6a3b      	ldr	r3, [r7, #32]
 800236c:	f013 0f02 	tst.w	r3, #2
 8002370:	d1be      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002372:	f7ff f991 	bl	8001698 <HAL_GetTick>
 8002376:	1b80      	subs	r0, r0, r6
 8002378:	4540      	cmp	r0, r8
 800237a:	d9f6      	bls.n	800236a <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
 800237c:	2003      	movs	r0, #3
 800237e:	e005      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002380:	69d3      	ldr	r3, [r2, #28]
 8002382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002386:	61d3      	str	r3, [r2, #28]
 8002388:	e7bb      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  return HAL_OK;
 800238a:	2000      	movs	r0, #0
}
 800238c:	b002      	add	sp, #8
 800238e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000
 8002398:	40007000 	.word	0x40007000
 800239c:	42420440 	.word	0x42420440

080023a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023a0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023a2:	6a03      	ldr	r3, [r0, #32]
 80023a4:	f023 0301 	bic.w	r3, r3, #1
 80023a8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023aa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023ac:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023ae:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023b0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023b4:	680d      	ldr	r5, [r1, #0]
 80023b6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023b8:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023bc:	688d      	ldr	r5, [r1, #8]
 80023be:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023c0:	4d0b      	ldr	r5, [pc, #44]	; (80023f0 <TIM_OC1_SetConfig+0x50>)
 80023c2:	42a8      	cmp	r0, r5
 80023c4:	d006      	beq.n	80023d4 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023c6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023c8:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023ca:	684a      	ldr	r2, [r1, #4]
 80023cc:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023ce:	6203      	str	r3, [r0, #32]
}
 80023d0:	bc70      	pop	{r4, r5, r6}
 80023d2:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80023d4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80023d8:	68cd      	ldr	r5, [r1, #12]
 80023da:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80023dc:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023e0:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80023e4:	694d      	ldr	r5, [r1, #20]
 80023e6:	698e      	ldr	r6, [r1, #24]
 80023e8:	4335      	orrs	r5, r6
 80023ea:	432c      	orrs	r4, r5
 80023ec:	e7eb      	b.n	80023c6 <TIM_OC1_SetConfig+0x26>
 80023ee:	bf00      	nop
 80023f0:	40012c00 	.word	0x40012c00

080023f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023f4:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023f6:	6a03      	ldr	r3, [r0, #32]
 80023f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023fc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023fe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002400:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002402:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002404:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002408:	680d      	ldr	r5, [r1, #0]
 800240a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800240c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002410:	688d      	ldr	r5, [r1, #8]
 8002412:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002416:	4d0c      	ldr	r5, [pc, #48]	; (8002448 <TIM_OC3_SetConfig+0x54>)
 8002418:	42a8      	cmp	r0, r5
 800241a:	d006      	beq.n	800242a <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800241c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800241e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002420:	684a      	ldr	r2, [r1, #4]
 8002422:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002424:	6203      	str	r3, [r0, #32]
}
 8002426:	bc70      	pop	{r4, r5, r6}
 8002428:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 800242a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800242e:	68cd      	ldr	r5, [r1, #12]
 8002430:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8002434:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002438:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800243c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800243e:	698e      	ldr	r6, [r1, #24]
 8002440:	4335      	orrs	r5, r6
 8002442:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8002446:	e7e9      	b.n	800241c <TIM_OC3_SetConfig+0x28>
 8002448:	40012c00 	.word	0x40012c00

0800244c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800244c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800244e:	6a03      	ldr	r3, [r0, #32]
 8002450:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002454:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002456:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002458:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800245a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800245c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002460:	680d      	ldr	r5, [r1, #0]
 8002462:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002466:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800246a:	688d      	ldr	r5, [r1, #8]
 800246c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002470:	4d07      	ldr	r5, [pc, #28]	; (8002490 <TIM_OC4_SetConfig+0x44>)
 8002472:	42a8      	cmp	r0, r5
 8002474:	d006      	beq.n	8002484 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002476:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002478:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800247a:	684a      	ldr	r2, [r1, #4]
 800247c:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800247e:	6203      	str	r3, [r0, #32]
}
 8002480:	bc30      	pop	{r4, r5}
 8002482:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002484:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002488:	694d      	ldr	r5, [r1, #20]
 800248a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800248e:	e7f2      	b.n	8002476 <TIM_OC4_SetConfig+0x2a>
 8002490:	40012c00 	.word	0x40012c00

08002494 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002494:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b01      	cmp	r3, #1
 800249c:	d123      	bne.n	80024e6 <HAL_TIM_Base_Start_IT+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800249e:	2302      	movs	r3, #2
 80024a0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024a4:	6802      	ldr	r2, [r0, #0]
 80024a6:	68d3      	ldr	r3, [r2, #12]
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024ae:	6803      	ldr	r3, [r0, #0]
 80024b0:	4a0f      	ldr	r2, [pc, #60]	; (80024f0 <HAL_TIM_Base_Start_IT+0x5c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d00c      	beq.n	80024d0 <HAL_TIM_Base_Start_IT+0x3c>
 80024b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ba:	d009      	beq.n	80024d0 <HAL_TIM_Base_Start_IT+0x3c>
 80024bc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d005      	beq.n	80024d0 <HAL_TIM_Base_Start_IT+0x3c>
    __HAL_TIM_ENABLE(htim);
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	f042 0201 	orr.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80024cc:	2000      	movs	r0, #0
 80024ce:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d6:	2a06      	cmp	r2, #6
 80024d8:	d007      	beq.n	80024ea <HAL_TIM_Base_Start_IT+0x56>
      __HAL_TIM_ENABLE(htim);
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	f042 0201 	orr.w	r2, r2, #1
 80024e0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80024e2:	2000      	movs	r0, #0
 80024e4:	4770      	bx	lr
    return HAL_ERROR;
 80024e6:	2001      	movs	r0, #1
 80024e8:	4770      	bx	lr
  return HAL_OK;
 80024ea:	2000      	movs	r0, #0
}
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40012c00 	.word	0x40012c00

080024f4 <HAL_TIM_PWM_MspInit>:
}
 80024f4:	4770      	bx	lr

080024f6 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80024f6:	4770      	bx	lr

080024f8 <HAL_TIM_IC_CaptureCallback>:
}
 80024f8:	4770      	bx	lr

080024fa <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80024fa:	4770      	bx	lr

080024fc <HAL_TIM_TriggerCallback>:
}
 80024fc:	4770      	bx	lr

080024fe <HAL_TIM_IRQHandler>:
{
 80024fe:	b510      	push	{r4, lr}
 8002500:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002502:	6803      	ldr	r3, [r0, #0]
 8002504:	691a      	ldr	r2, [r3, #16]
 8002506:	f012 0f02 	tst.w	r2, #2
 800250a:	d011      	beq.n	8002530 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	f012 0f02 	tst.w	r2, #2
 8002512:	d00d      	beq.n	8002530 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002514:	f06f 0202 	mvn.w	r2, #2
 8002518:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800251a:	2301      	movs	r3, #1
 800251c:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800251e:	6803      	ldr	r3, [r0, #0]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	f013 0f03 	tst.w	r3, #3
 8002526:	d070      	beq.n	800260a <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8002528:	f7ff ffe6 	bl	80024f8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800252c:	2300      	movs	r3, #0
 800252e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002530:	6823      	ldr	r3, [r4, #0]
 8002532:	691a      	ldr	r2, [r3, #16]
 8002534:	f012 0f04 	tst.w	r2, #4
 8002538:	d012      	beq.n	8002560 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	f012 0f04 	tst.w	r2, #4
 8002540:	d00e      	beq.n	8002560 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002542:	f06f 0204 	mvn.w	r2, #4
 8002546:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002548:	2302      	movs	r3, #2
 800254a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800254c:	6823      	ldr	r3, [r4, #0]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002554:	d05f      	beq.n	8002616 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8002556:	4620      	mov	r0, r4
 8002558:	f7ff ffce 	bl	80024f8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255c:	2300      	movs	r3, #0
 800255e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002560:	6823      	ldr	r3, [r4, #0]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	f012 0f08 	tst.w	r2, #8
 8002568:	d012      	beq.n	8002590 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800256a:	68da      	ldr	r2, [r3, #12]
 800256c:	f012 0f08 	tst.w	r2, #8
 8002570:	d00e      	beq.n	8002590 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002572:	f06f 0208 	mvn.w	r2, #8
 8002576:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002578:	2304      	movs	r3, #4
 800257a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800257c:	6823      	ldr	r3, [r4, #0]
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	f013 0f03 	tst.w	r3, #3
 8002584:	d04e      	beq.n	8002624 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8002586:	4620      	mov	r0, r4
 8002588:	f7ff ffb6 	bl	80024f8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800258c:	2300      	movs	r3, #0
 800258e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002590:	6823      	ldr	r3, [r4, #0]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	f012 0f10 	tst.w	r2, #16
 8002598:	d012      	beq.n	80025c0 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	f012 0f10 	tst.w	r2, #16
 80025a0:	d00e      	beq.n	80025c0 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025a2:	f06f 0210 	mvn.w	r2, #16
 80025a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025a8:	2308      	movs	r3, #8
 80025aa:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025ac:	6823      	ldr	r3, [r4, #0]
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80025b4:	d03d      	beq.n	8002632 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80025b6:	4620      	mov	r0, r4
 80025b8:	f7ff ff9e 	bl	80024f8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025bc:	2300      	movs	r3, #0
 80025be:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025c0:	6823      	ldr	r3, [r4, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	f012 0f01 	tst.w	r2, #1
 80025c8:	d003      	beq.n	80025d2 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	f012 0f01 	tst.w	r2, #1
 80025d0:	d136      	bne.n	8002640 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	691a      	ldr	r2, [r3, #16]
 80025d6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80025da:	d003      	beq.n	80025e4 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	f012 0f80 	tst.w	r2, #128	; 0x80
 80025e2:	d134      	bne.n	800264e <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025e4:	6823      	ldr	r3, [r4, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80025ec:	d003      	beq.n	80025f6 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80025f4:	d132      	bne.n	800265c <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025f6:	6823      	ldr	r3, [r4, #0]
 80025f8:	691a      	ldr	r2, [r3, #16]
 80025fa:	f012 0f20 	tst.w	r2, #32
 80025fe:	d003      	beq.n	8002608 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	f012 0f20 	tst.w	r2, #32
 8002606:	d130      	bne.n	800266a <HAL_TIM_IRQHandler+0x16c>
}
 8002608:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800260a:	f7ff ff74 	bl	80024f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800260e:	4620      	mov	r0, r4
 8002610:	f7ff ff73 	bl	80024fa <HAL_TIM_PWM_PulseFinishedCallback>
 8002614:	e78a      	b.n	800252c <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002616:	4620      	mov	r0, r4
 8002618:	f7ff ff6d 	bl	80024f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800261c:	4620      	mov	r0, r4
 800261e:	f7ff ff6c 	bl	80024fa <HAL_TIM_PWM_PulseFinishedCallback>
 8002622:	e79b      	b.n	800255c <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002624:	4620      	mov	r0, r4
 8002626:	f7ff ff66 	bl	80024f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800262a:	4620      	mov	r0, r4
 800262c:	f7ff ff65 	bl	80024fa <HAL_TIM_PWM_PulseFinishedCallback>
 8002630:	e7ac      	b.n	800258c <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002632:	4620      	mov	r0, r4
 8002634:	f7ff ff5f 	bl	80024f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002638:	4620      	mov	r0, r4
 800263a:	f7ff ff5e 	bl	80024fa <HAL_TIM_PWM_PulseFinishedCallback>
 800263e:	e7bd      	b.n	80025bc <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002640:	f06f 0201 	mvn.w	r2, #1
 8002644:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002646:	4620      	mov	r0, r4
 8002648:	f7fe feb8 	bl	80013bc <HAL_TIM_PeriodElapsedCallback>
 800264c:	e7c1      	b.n	80025d2 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800264e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002652:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002654:	4620      	mov	r0, r4
 8002656:	f000 fa4b 	bl	8002af0 <HAL_TIMEx_BreakCallback>
 800265a:	e7c3      	b.n	80025e4 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800265c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002660:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002662:	4620      	mov	r0, r4
 8002664:	f7ff ff4a 	bl	80024fc <HAL_TIM_TriggerCallback>
 8002668:	e7c5      	b.n	80025f6 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800266a:	f06f 0220 	mvn.w	r2, #32
 800266e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002670:	4620      	mov	r0, r4
 8002672:	f000 fa3c 	bl	8002aee <HAL_TIMEx_CommutCallback>
}
 8002676:	e7c7      	b.n	8002608 <HAL_TIM_IRQHandler+0x10a>

08002678 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002678:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800267a:	4a21      	ldr	r2, [pc, #132]	; (8002700 <TIM_Base_SetConfig+0x88>)
 800267c:	4290      	cmp	r0, r2
 800267e:	d015      	beq.n	80026ac <TIM_Base_SetConfig+0x34>
 8002680:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002684:	d027      	beq.n	80026d6 <TIM_Base_SetConfig+0x5e>
 8002686:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800268a:	4290      	cmp	r0, r2
 800268c:	d009      	beq.n	80026a2 <TIM_Base_SetConfig+0x2a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800268e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002692:	694a      	ldr	r2, [r1, #20]
 8002694:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002696:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002698:	688b      	ldr	r3, [r1, #8]
 800269a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800269c:	680b      	ldr	r3, [r1, #0]
 800269e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026a0:	e02a      	b.n	80026f8 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80026a6:	684a      	ldr	r2, [r1, #4]
 80026a8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026aa:	e018      	b.n	80026de <TIM_Base_SetConfig+0x66>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80026b0:	684a      	ldr	r2, [r1, #4]
 80026b2:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80026b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026b8:	68ca      	ldr	r2, [r1, #12]
 80026ba:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026c0:	694a      	ldr	r2, [r1, #20]
 80026c2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80026c4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026c6:	688b      	ldr	r3, [r1, #8]
 80026c8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80026ca:	680b      	ldr	r3, [r1, #0]
 80026cc:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80026ce:	690a      	ldr	r2, [r1, #16]
 80026d0:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <TIM_Base_SetConfig+0x88>)
 80026d2:	631a      	str	r2, [r3, #48]	; 0x30
 80026d4:	e010      	b.n	80026f8 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80026da:	684a      	ldr	r2, [r1, #4]
 80026dc:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80026de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026e2:	68ca      	ldr	r2, [r1, #12]
 80026e4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026ea:	694a      	ldr	r2, [r1, #20]
 80026ec:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80026ee:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026f0:	688b      	ldr	r3, [r1, #8]
 80026f2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80026f4:	680b      	ldr	r3, [r1, #0]
 80026f6:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80026f8:	2301      	movs	r3, #1
 80026fa:	6143      	str	r3, [r0, #20]
}
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40012c00 	.word	0x40012c00

08002704 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002704:	b340      	cbz	r0, 8002758 <HAL_TIM_Base_Init+0x54>
{
 8002706:	b510      	push	{r4, lr}
 8002708:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800270a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800270e:	b1f3      	cbz	r3, 800274e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002710:	2302      	movs	r3, #2
 8002712:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002716:	4621      	mov	r1, r4
 8002718:	f851 0b04 	ldr.w	r0, [r1], #4
 800271c:	f7ff ffac 	bl	8002678 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002720:	2301      	movs	r3, #1
 8002722:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002726:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800272a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800272e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002732:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002736:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800273a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800273e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002742:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002746:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800274a:	2000      	movs	r0, #0
}
 800274c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800274e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002752:	f7fe fe8d 	bl	8001470 <HAL_TIM_Base_MspInit>
 8002756:	e7db      	b.n	8002710 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002758:	2001      	movs	r0, #1
}
 800275a:	4770      	bx	lr

0800275c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800275c:	b340      	cbz	r0, 80027b0 <HAL_TIM_PWM_Init+0x54>
{
 800275e:	b510      	push	{r4, lr}
 8002760:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002762:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002766:	b1f3      	cbz	r3, 80027a6 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002768:	2302      	movs	r3, #2
 800276a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800276e:	4621      	mov	r1, r4
 8002770:	f851 0b04 	ldr.w	r0, [r1], #4
 8002774:	f7ff ff80 	bl	8002678 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002778:	2301      	movs	r3, #1
 800277a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800277e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002782:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002786:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800278a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800278e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002792:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002796:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800279a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800279e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80027a2:	2000      	movs	r0, #0
}
 80027a4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80027a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80027aa:	f7ff fea3 	bl	80024f4 <HAL_TIM_PWM_MspInit>
 80027ae:	e7db      	b.n	8002768 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80027b0:	2001      	movs	r0, #1
}
 80027b2:	4770      	bx	lr

080027b4 <TIM_OC2_SetConfig>:
{
 80027b4:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027b6:	6a03      	ldr	r3, [r0, #32]
 80027b8:	f023 0310 	bic.w	r3, r3, #16
 80027bc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80027be:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80027c0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80027c2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027c4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027c8:	680d      	ldr	r5, [r1, #0]
 80027ca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80027ce:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027d2:	688d      	ldr	r5, [r1, #8]
 80027d4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027d8:	4d0c      	ldr	r5, [pc, #48]	; (800280c <TIM_OC2_SetConfig+0x58>)
 80027da:	42a8      	cmp	r0, r5
 80027dc:	d006      	beq.n	80027ec <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 80027de:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80027e0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80027e2:	684a      	ldr	r2, [r1, #4]
 80027e4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80027e6:	6203      	str	r3, [r0, #32]
}
 80027e8:	bc70      	pop	{r4, r5, r6}
 80027ea:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80027ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027f0:	68cd      	ldr	r5, [r1, #12]
 80027f2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80027f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027fa:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027fe:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002800:	698e      	ldr	r6, [r1, #24]
 8002802:	4335      	orrs	r5, r6
 8002804:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8002808:	e7e9      	b.n	80027de <TIM_OC2_SetConfig+0x2a>
 800280a:	bf00      	nop
 800280c:	40012c00 	.word	0x40012c00

08002810 <HAL_TIM_PWM_ConfigChannel>:
{
 8002810:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002812:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002816:	2b01      	cmp	r3, #1
 8002818:	d060      	beq.n	80028dc <HAL_TIM_PWM_ConfigChannel+0xcc>
 800281a:	4604      	mov	r4, r0
 800281c:	460d      	mov	r5, r1
 800281e:	2301      	movs	r3, #1
 8002820:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8002824:	2a0c      	cmp	r2, #12
 8002826:	d81a      	bhi.n	800285e <HAL_TIM_PWM_ConfigChannel+0x4e>
 8002828:	e8df f002 	tbb	[pc, r2]
 800282c:	19191907 	.word	0x19191907
 8002830:	1919191d 	.word	0x1919191d
 8002834:	19191931 	.word	0x19191931
 8002838:	44          	.byte	0x44
 8002839:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800283a:	6800      	ldr	r0, [r0, #0]
 800283c:	f7ff fdb0 	bl	80023a0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002840:	6822      	ldr	r2, [r4, #0]
 8002842:	6993      	ldr	r3, [r2, #24]
 8002844:	f043 0308 	orr.w	r3, r3, #8
 8002848:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800284a:	6822      	ldr	r2, [r4, #0]
 800284c:	6993      	ldr	r3, [r2, #24]
 800284e:	f023 0304 	bic.w	r3, r3, #4
 8002852:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002854:	6822      	ldr	r2, [r4, #0]
 8002856:	6993      	ldr	r3, [r2, #24]
 8002858:	6929      	ldr	r1, [r5, #16]
 800285a:	430b      	orrs	r3, r1
 800285c:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 800285e:	2000      	movs	r0, #0
 8002860:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002864:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002866:	6800      	ldr	r0, [r0, #0]
 8002868:	f7ff ffa4 	bl	80027b4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800286c:	6822      	ldr	r2, [r4, #0]
 800286e:	6993      	ldr	r3, [r2, #24]
 8002870:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002874:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002876:	6822      	ldr	r2, [r4, #0]
 8002878:	6993      	ldr	r3, [r2, #24]
 800287a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800287e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002880:	6822      	ldr	r2, [r4, #0]
 8002882:	6993      	ldr	r3, [r2, #24]
 8002884:	6929      	ldr	r1, [r5, #16]
 8002886:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800288a:	6193      	str	r3, [r2, #24]
      break;
 800288c:	e7e7      	b.n	800285e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800288e:	6800      	ldr	r0, [r0, #0]
 8002890:	f7ff fdb0 	bl	80023f4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002894:	6822      	ldr	r2, [r4, #0]
 8002896:	69d3      	ldr	r3, [r2, #28]
 8002898:	f043 0308 	orr.w	r3, r3, #8
 800289c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800289e:	6822      	ldr	r2, [r4, #0]
 80028a0:	69d3      	ldr	r3, [r2, #28]
 80028a2:	f023 0304 	bic.w	r3, r3, #4
 80028a6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028a8:	6822      	ldr	r2, [r4, #0]
 80028aa:	69d3      	ldr	r3, [r2, #28]
 80028ac:	6929      	ldr	r1, [r5, #16]
 80028ae:	430b      	orrs	r3, r1
 80028b0:	61d3      	str	r3, [r2, #28]
      break;
 80028b2:	e7d4      	b.n	800285e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028b4:	6800      	ldr	r0, [r0, #0]
 80028b6:	f7ff fdc9 	bl	800244c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028ba:	6822      	ldr	r2, [r4, #0]
 80028bc:	69d3      	ldr	r3, [r2, #28]
 80028be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028c2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028c4:	6822      	ldr	r2, [r4, #0]
 80028c6:	69d3      	ldr	r3, [r2, #28]
 80028c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028cc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028ce:	6822      	ldr	r2, [r4, #0]
 80028d0:	69d3      	ldr	r3, [r2, #28]
 80028d2:	6929      	ldr	r1, [r5, #16]
 80028d4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80028d8:	61d3      	str	r3, [r2, #28]
      break;
 80028da:	e7c0      	b.n	800285e <HAL_TIM_PWM_ConfigChannel+0x4e>
  __HAL_LOCK(htim);
 80028dc:	2002      	movs	r0, #2
 80028de:	e7c1      	b.n	8002864 <HAL_TIM_PWM_ConfigChannel+0x54>

080028e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028e0:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028e2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028e4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028e8:	430a      	orrs	r2, r1
 80028ea:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80028ee:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028f0:	6082      	str	r2, [r0, #8]
}
 80028f2:	bc10      	pop	{r4}
 80028f4:	4770      	bx	lr

080028f6 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80028f6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	f000 809c 	beq.w	8002a38 <HAL_TIM_ConfigClockSource+0x142>
{
 8002900:	b570      	push	{r4, r5, r6, lr}
 8002902:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002904:	2301      	movs	r3, #1
 8002906:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800290a:	2302      	movs	r3, #2
 800290c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002910:	6802      	ldr	r2, [r0, #0]
 8002912:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002914:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002918:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800291c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800291e:	680b      	ldr	r3, [r1, #0]
 8002920:	2b60      	cmp	r3, #96	; 0x60
 8002922:	d054      	beq.n	80029ce <HAL_TIM_ConfigClockSource+0xd8>
 8002924:	d836      	bhi.n	8002994 <HAL_TIM_ConfigClockSource+0x9e>
 8002926:	2b40      	cmp	r3, #64	; 0x40
 8002928:	d06c      	beq.n	8002a04 <HAL_TIM_ConfigClockSource+0x10e>
 800292a:	d91b      	bls.n	8002964 <HAL_TIM_ConfigClockSource+0x6e>
 800292c:	2b50      	cmp	r3, #80	; 0x50
 800292e:	d12a      	bne.n	8002986 <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002930:	6803      	ldr	r3, [r0, #0]
 8002932:	6848      	ldr	r0, [r1, #4]
 8002934:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002936:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002938:	6a1d      	ldr	r5, [r3, #32]
 800293a:	f025 0501 	bic.w	r5, r5, #1
 800293e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002940:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002942:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002946:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800294a:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800294e:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8002950:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002952:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002954:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8002956:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800295c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002960:	6093      	str	r3, [r2, #8]
}
 8002962:	e010      	b.n	8002986 <HAL_TIM_ConfigClockSource+0x90>
  switch (sClockSourceConfig->ClockSource)
 8002964:	2b20      	cmp	r3, #32
 8002966:	d002      	beq.n	800296e <HAL_TIM_ConfigClockSource+0x78>
 8002968:	d90a      	bls.n	8002980 <HAL_TIM_ConfigClockSource+0x8a>
 800296a:	2b30      	cmp	r3, #48	; 0x30
 800296c:	d10b      	bne.n	8002986 <HAL_TIM_ConfigClockSource+0x90>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800296e:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8002970:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002972:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002976:	4313      	orrs	r3, r2
 8002978:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800297c:	608b      	str	r3, [r1, #8]
}
 800297e:	e002      	b.n	8002986 <HAL_TIM_ConfigClockSource+0x90>
  switch (sClockSourceConfig->ClockSource)
 8002980:	f033 0210 	bics.w	r2, r3, #16
 8002984:	d0f3      	beq.n	800296e <HAL_TIM_ConfigClockSource+0x78>
  htim->State = HAL_TIM_STATE_READY;
 8002986:	2301      	movs	r3, #1
 8002988:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800298c:	2000      	movs	r0, #0
 800298e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002992:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002994:	2b70      	cmp	r3, #112	; 0x70
 8002996:	d00e      	beq.n	80029b6 <HAL_TIM_ConfigClockSource+0xc0>
 8002998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800299c:	d1f3      	bne.n	8002986 <HAL_TIM_ConfigClockSource+0x90>
      TIM_ETR_SetConfig(htim->Instance,
 800299e:	68cb      	ldr	r3, [r1, #12]
 80029a0:	684a      	ldr	r2, [r1, #4]
 80029a2:	6889      	ldr	r1, [r1, #8]
 80029a4:	6800      	ldr	r0, [r0, #0]
 80029a6:	f7ff ff9b 	bl	80028e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029aa:	6822      	ldr	r2, [r4, #0]
 80029ac:	6893      	ldr	r3, [r2, #8]
 80029ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b2:	6093      	str	r3, [r2, #8]
      break;
 80029b4:	e7e7      	b.n	8002986 <HAL_TIM_ConfigClockSource+0x90>
      TIM_ETR_SetConfig(htim->Instance,
 80029b6:	68cb      	ldr	r3, [r1, #12]
 80029b8:	684a      	ldr	r2, [r1, #4]
 80029ba:	6889      	ldr	r1, [r1, #8]
 80029bc:	6800      	ldr	r0, [r0, #0]
 80029be:	f7ff ff8f 	bl	80028e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80029c2:	6822      	ldr	r2, [r4, #0]
 80029c4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80029ca:	6093      	str	r3, [r2, #8]
      break;
 80029cc:	e7db      	b.n	8002986 <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029ce:	6803      	ldr	r3, [r0, #0]
 80029d0:	684d      	ldr	r5, [r1, #4]
 80029d2:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029d4:	6a18      	ldr	r0, [r3, #32]
 80029d6:	f020 0010 	bic.w	r0, r0, #16
 80029da:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029dc:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80029de:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029e0:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029e4:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80029ec:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80029f0:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80029f2:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029f4:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80029f6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80029f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029fc:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8002a00:	6093      	str	r3, [r2, #8]
}
 8002a02:	e7c0      	b.n	8002986 <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a04:	6803      	ldr	r3, [r0, #0]
 8002a06:	6848      	ldr	r0, [r1, #4]
 8002a08:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002a0a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a0c:	6a1d      	ldr	r5, [r3, #32]
 8002a0e:	f025 0501 	bic.w	r5, r5, #1
 8002a12:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a14:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a16:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a1a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a1e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8002a22:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8002a24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a26:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a28:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8002a2a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a30:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8002a34:	6093      	str	r3, [r2, #8]
}
 8002a36:	e7a6      	b.n	8002986 <HAL_TIM_ConfigClockSource+0x90>
  __HAL_LOCK(htim);
 8002a38:	2002      	movs	r0, #2
}
 8002a3a:	4770      	bx	lr

08002a3c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a3c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d027      	beq.n	8002a94 <HAL_TIMEx_MasterConfigSynchronization+0x58>
{
 8002a44:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002a46:	2301      	movs	r3, #1
 8002a48:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a52:	6804      	ldr	r4, [r0, #0]
 8002a54:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a56:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a5c:	680d      	ldr	r5, [r1, #0]
 8002a5e:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a60:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a62:	6803      	ldr	r3, [r0, #0]
 8002a64:	4c0c      	ldr	r4, [pc, #48]	; (8002a98 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8002a66:	42a3      	cmp	r3, r4
 8002a68:	d006      	beq.n	8002a78 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6e:	d003      	beq.n	8002a78 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002a70:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8002a74:	42a3      	cmp	r3, r4
 8002a76:	d104      	bne.n	8002a82 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a7c:	6849      	ldr	r1, [r1, #4]
 8002a7e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a82:	2301      	movs	r3, #1
 8002a84:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002a8e:	4618      	mov	r0, r3
}
 8002a90:	bc30      	pop	{r4, r5}
 8002a92:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002a94:	2002      	movs	r0, #2
}
 8002a96:	4770      	bx	lr
 8002a98:	40012c00 	.word	0x40012c00

08002a9c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a9c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d022      	beq.n	8002aea <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002aaa:	68cb      	ldr	r3, [r1, #12]
 8002aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab0:	688a      	ldr	r2, [r1, #8]
 8002ab2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ab4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ab8:	684a      	ldr	r2, [r1, #4]
 8002aba:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002abc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ac0:	680a      	ldr	r2, [r1, #0]
 8002ac2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002ac4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ac8:	690a      	ldr	r2, [r1, #16]
 8002aca:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002acc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ad0:	694a      	ldr	r2, [r1, #20]
 8002ad2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002ad4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ad8:	69ca      	ldr	r2, [r1, #28]
 8002ada:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002adc:	6802      	ldr	r2, [r0, #0]
 8002ade:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002aea:	2002      	movs	r0, #2
}
 8002aec:	4770      	bx	lr

08002aee <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002aee:	4770      	bx	lr

08002af0 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002af0:	4770      	bx	lr
	...

08002af4 <app_menu_main>:
 *
 * Descrição mais detalhada da função exemploFuncao.
 *
 * @param parametro Descrição do parâmetro.
 */
void app_menu_main(app_t * app){
 8002af4:	b510      	push	{r4, lr}
 8002af6:	4604      	mov	r4, r0

	limiter_saturation(app->menu_selection, 1, MENU_NUMBERS-1)
 8002af8:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	dd57      	ble.n	8002bb0 <app_menu_main+0xbc>
 8002b00:	2302      	movs	r3, #2
 8002b02:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c

	lcd16x2_setCursor(0,0);
 8002b06:	2100      	movs	r1, #0
 8002b08:	4608      	mov	r0, r1
 8002b0a:	f000 fc2d 	bl	8003368 <lcd16x2_setCursor>
	lcd16x2_printf(app->menu_name[0]);
 8002b0e:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 8002b12:	f000 fc3f 	bl	8003394 <lcd16x2_printf>
	lcd16x2_setCursor(1,0);
 8002b16:	2100      	movs	r1, #0
 8002b18:	2001      	movs	r0, #1
 8002b1a:	f000 fc25 	bl	8003368 <lcd16x2_setCursor>
	lcd16x2_printf("%d-> ", app->menu_selection);
 8002b1e:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 8002b22:	4825      	ldr	r0, [pc, #148]	; (8002bb8 <app_menu_main+0xc4>)
 8002b24:	f000 fc36 	bl	8003394 <lcd16x2_printf>
	lcd16x2_printf(app->menu_name[app->menu_selection]);
 8002b28:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
 8002b2c:	eb04 1000 	add.w	r0, r4, r0, lsl #4
 8002b30:	f500 708e 	add.w	r0, r0, #284	; 0x11c
 8002b34:	f000 fc2e 	bl	8003394 <lcd16x2_printf>

	if(BT_PRESS(BT_UP)){
 8002b38:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 8002b3c:	b113      	cbz	r3, 8002b44 <app_menu_main+0x50>
 8002b3e:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
 8002b42:	b9ab      	cbnz	r3, 8002b70 <app_menu_main+0x7c>
		BT_RESET(BT_UP);
		app->menu_selection ++;
		lcd16x2_clear();
	}
	if(BT_PRESS(BT_DOWN)){
 8002b44:	f8d4 31e4 	ldr.w	r3, [r4, #484]	; 0x1e4
 8002b48:	b113      	cbz	r3, 8002b50 <app_menu_main+0x5c>
 8002b4a:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 8002b4e:	b9d3      	cbnz	r3, 8002b86 <app_menu_main+0x92>
		BT_RESET(BT_DOWN);
		app->menu_selection --;
		lcd16x2_clear();
	}

	if(BT_PRESS(BT_MENU)){
 8002b50:	f8d4 31ec 	ldr.w	r3, [r4, #492]	; 0x1ec
 8002b54:	b113      	cbz	r3, 8002b5c <app_menu_main+0x68>
 8002b56:	f8d4 31e8 	ldr.w	r3, [r4, #488]	; 0x1e8
 8002b5a:	b9fb      	cbnz	r3, 8002b9c <app_menu_main+0xa8>
		BT_RESET(BT_MENU);
		app->menu_function = app->menu_selection;
		lcd16x2_clear();
	}

	if(BT_PRESS(BT_ENTER)){
 8002b5c:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 8002b60:	b12b      	cbz	r3, 8002b6e <app_menu_main+0x7a>
 8002b62:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 8002b66:	b113      	cbz	r3, 8002b6e <app_menu_main+0x7a>
		BT_RESET(BT_ENTER);
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
	}
}
 8002b6e:	bd10      	pop	{r4, pc}
		BT_RESET(BT_UP);
 8002b70:	2300      	movs	r3, #0
 8002b72:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
		app->menu_selection ++;
 8002b76:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
		lcd16x2_clear();
 8002b80:	f000 fc00 	bl	8003384 <lcd16x2_clear>
 8002b84:	e7de      	b.n	8002b44 <app_menu_main+0x50>
		BT_RESET(BT_DOWN);
 8002b86:	2300      	movs	r3, #0
 8002b88:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
		app->menu_selection --;
 8002b8c:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 8002b90:	3b01      	subs	r3, #1
 8002b92:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
		lcd16x2_clear();
 8002b96:	f000 fbf5 	bl	8003384 <lcd16x2_clear>
 8002b9a:	e7d9      	b.n	8002b50 <app_menu_main+0x5c>
		BT_RESET(BT_MENU);
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8
		app->menu_function = app->menu_selection;
 8002ba2:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 8002ba6:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
		lcd16x2_clear();
 8002baa:	f000 fbeb 	bl	8003384 <lcd16x2_clear>
 8002bae:	e7d5      	b.n	8002b5c <app_menu_main+0x68>
	limiter_saturation(app->menu_selection, 1, MENU_NUMBERS-1)
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8002bb6:	e7a6      	b.n	8002b06 <app_menu_main+0x12>
 8002bb8:	08005d44 	.word	0x08005d44

08002bbc <app_menu_monitor>:
 *
 * Descrição mais detalhada da função exemploFuncao.
 *
 * @param parametro Descrição do parâmetro.
 */
void app_menu_monitor(app_t * app){
 8002bbc:	b538      	push	{r3, r4, r5, lr}
 8002bbe:	4604      	mov	r4, r0

	lcd16x2_setCursor(0,0);
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4608      	mov	r0, r1
 8002bc4:	f000 fbd0 	bl	8003368 <lcd16x2_setCursor>
	lcd16x2_printf("Act Freq = %d", (int) app->modulation_freq);
 8002bc8:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 8002bcc:	f7fe fa6a 	bl	80010a4 <__aeabi_f2iz>
 8002bd0:	4601      	mov	r1, r0
 8002bd2:	482d      	ldr	r0, [pc, #180]	; (8002c88 <app_menu_monitor+0xcc>)
 8002bd4:	f000 fbde 	bl	8003394 <lcd16x2_printf>
	lcd16x2_setCursor(1,0);
 8002bd8:	2100      	movs	r1, #0
 8002bda:	2001      	movs	r0, #1
 8002bdc:	f000 fbc4 	bl	8003368 <lcd16x2_setCursor>
	lcd16x2_printf("Ref Freq = %d", (int) app->ref_freq);
 8002be0:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 8002be4:	f7fe fa5e 	bl	80010a4 <__aeabi_f2iz>
 8002be8:	4601      	mov	r1, r0
 8002bea:	4828      	ldr	r0, [pc, #160]	; (8002c8c <app_menu_monitor+0xd0>)
 8002bec:	f000 fbd2 	bl	8003394 <lcd16x2_printf>

	if(BT_PRESS(BT_MENU)){
 8002bf0:	f8d4 31ec 	ldr.w	r3, [r4, #492]	; 0x1ec
 8002bf4:	b113      	cbz	r3, 8002bfc <app_menu_monitor+0x40>
 8002bf6:	f8d4 31e8 	ldr.w	r3, [r4, #488]	; 0x1e8
 8002bfa:	b9b3      	cbnz	r3, 8002c2a <app_menu_monitor+0x6e>
		BT_RESET(BT_MENU);
		app->menu_function = 0;
		lcd16x2_clear();
	}

	if(BT_PRESS(BT_UP)){
 8002bfc:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 8002c00:	b113      	cbz	r3, 8002c08 <app_menu_monitor+0x4c>
 8002c02:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
 8002c06:	b9c3      	cbnz	r3, 8002c3a <app_menu_monitor+0x7e>
		BT_RESET(BT_UP);
		app->ref_freq = app->ref_freq + 1.0;
		lcd16x2_clear();
	}
	if(BT_PRESS(BT_DOWN)){
 8002c08:	f8d4 31e4 	ldr.w	r3, [r4, #484]	; 0x1e4
 8002c0c:	b113      	cbz	r3, 8002c14 <app_menu_monitor+0x58>
 8002c0e:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 8002c12:	bb03      	cbnz	r3, 8002c56 <app_menu_monitor+0x9a>
		BT_RESET(BT_DOWN);
		app->ref_freq = app->ref_freq - 1.0;
		lcd16x2_clear();
	}
	limiter_saturation(app->ref_freq, 0, 60.0)
 8002c14:	f8d4 50f8 	ldr.w	r5, [r4, #248]	; 0xf8
 8002c18:	491d      	ldr	r1, [pc, #116]	; (8002c90 <app_menu_monitor+0xd4>)
 8002c1a:	4628      	mov	r0, r5
 8002c1c:	f7fe fa2e 	bl	800107c <__aeabi_fcmpge>
 8002c20:	b338      	cbz	r0, 8002c72 <app_menu_monitor+0xb6>
 8002c22:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <app_menu_monitor+0xd4>)
 8002c24:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
}
 8002c28:	bd38      	pop	{r3, r4, r5, pc}
		BT_RESET(BT_MENU);
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8
		app->menu_function = 0;
 8002c30:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
		lcd16x2_clear();
 8002c34:	f000 fba6 	bl	8003384 <lcd16x2_clear>
 8002c38:	e7e0      	b.n	8002bfc <app_menu_monitor+0x40>
		BT_RESET(BT_UP);
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
		app->ref_freq = app->ref_freq + 1.0;
 8002c40:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002c44:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 8002c48:	f7fd ff5e 	bl	8000b08 <__addsf3>
 8002c4c:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
		lcd16x2_clear();
 8002c50:	f000 fb98 	bl	8003384 <lcd16x2_clear>
 8002c54:	e7d8      	b.n	8002c08 <app_menu_monitor+0x4c>
		BT_RESET(BT_DOWN);
 8002c56:	2300      	movs	r3, #0
 8002c58:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
		app->ref_freq = app->ref_freq - 1.0;
 8002c5c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002c60:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 8002c64:	f7fd ff4e 	bl	8000b04 <__aeabi_fsub>
 8002c68:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
		lcd16x2_clear();
 8002c6c:	f000 fb8a 	bl	8003384 <lcd16x2_clear>
 8002c70:	e7d0      	b.n	8002c14 <app_menu_monitor+0x58>
	limiter_saturation(app->ref_freq, 0, 60.0)
 8002c72:	2100      	movs	r1, #0
 8002c74:	4628      	mov	r0, r5
 8002c76:	f7fe f9f7 	bl	8001068 <__aeabi_fcmple>
 8002c7a:	2800      	cmp	r0, #0
 8002c7c:	d0d4      	beq.n	8002c28 <app_menu_monitor+0x6c>
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
}
 8002c84:	e7d0      	b.n	8002c28 <app_menu_monitor+0x6c>
 8002c86:	bf00      	nop
 8002c88:	08005d4c 	.word	0x08005d4c
 8002c8c:	08005d5c 	.word	0x08005d5c
 8002c90:	42700000 	.word	0x42700000

08002c94 <app_menu_parameters>:
 * Os botões UP e DOWN são usados para navegar entre os parâmetros.
 * O botão MENU é usado para sair do modo de ajuste de parâmetros.
 *
 * @param app Ponteiro para a estrutura do aplicativo.
 */
void app_menu_parameters(app_t * app){
 8002c94:	b510      	push	{r4, lr}
 8002c96:	4604      	mov	r4, r0

	limiter_saturation(app->param_index, 0, PARAMETERS_SIZE-1)
 8002c98:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	dd3c      	ble.n	8002d1a <app_menu_parameters+0x86>
 8002ca0:	2305      	movs	r3, #5
 8002ca2:	f8c0 3154 	str.w	r3, [r0, #340]	; 0x154

	lcd16x2_setCursor(0,0);
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	4608      	mov	r0, r1
 8002caa:	f000 fb5d 	bl	8003368 <lcd16x2_setCursor>
	lcd16x2_printf(app->menu_name[app->menu_selection]);
 8002cae:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
 8002cb2:	eb04 1000 	add.w	r0, r4, r0, lsl #4
 8002cb6:	f500 708e 	add.w	r0, r0, #284	; 0x11c
 8002cba:	f000 fb6b 	bl	8003394 <lcd16x2_printf>

	lcd16x2_setCursor(1,0);
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	2001      	movs	r0, #1
 8002cc2:	f000 fb51 	bl	8003368 <lcd16x2_setCursor>
	lcd16x2_printf(app->param_name[app->param_index]);
 8002cc6:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
 8002cca:	3017      	adds	r0, #23
 8002ccc:	eb04 1000 	add.w	r0, r4, r0, lsl #4
 8002cd0:	f000 fb60 	bl	8003394 <lcd16x2_printf>

	lcd16x2_setCursor(1,10);
 8002cd4:	210a      	movs	r1, #10
 8002cd6:	2001      	movs	r0, #1
 8002cd8:	f000 fb46 	bl	8003368 <lcd16x2_setCursor>
	lcd16x2_printf("%d", (int) * app->param_ptr[app->param_index]);
 8002cdc:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8002ce0:	3356      	adds	r3, #86	; 0x56
 8002ce2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	f7fe f9dc 	bl	80010a4 <__aeabi_f2iz>
 8002cec:	4601      	mov	r1, r0
 8002cee:	481d      	ldr	r0, [pc, #116]	; (8002d64 <app_menu_parameters+0xd0>)
 8002cf0:	f000 fb50 	bl	8003394 <lcd16x2_printf>

	if(BT_PRESS(BT_UP)){
 8002cf4:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 8002cf8:	b113      	cbz	r3, 8002d00 <app_menu_parameters+0x6c>
 8002cfa:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
 8002cfe:	b993      	cbnz	r3, 8002d26 <app_menu_parameters+0x92>
		BT_RESET(BT_UP);
		app->param_index ++;
		lcd16x2_clear();
	}
	if(BT_PRESS(BT_DOWN)){
 8002d00:	f8d4 31e4 	ldr.w	r3, [r4, #484]	; 0x1e4
 8002d04:	b113      	cbz	r3, 8002d0c <app_menu_parameters+0x78>
 8002d06:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 8002d0a:	b9bb      	cbnz	r3, 8002d3c <app_menu_parameters+0xa8>
		BT_RESET(BT_DOWN);
		app->param_index --;
		lcd16x2_clear();
	}

	if(BT_PRESS(BT_MENU)){
 8002d0c:	f8d4 31ec 	ldr.w	r3, [r4, #492]	; 0x1ec
 8002d10:	b113      	cbz	r3, 8002d18 <app_menu_parameters+0x84>
 8002d12:	f8d4 31e8 	ldr.w	r3, [r4, #488]	; 0x1e8
 8002d16:	b9e3      	cbnz	r3, 8002d52 <app_menu_parameters+0xbe>
		BT_RESET(BT_MENU);
		app->menu_function = 0;
		lcd16x2_clear();
	}
}
 8002d18:	bd10      	pop	{r4, pc}
	limiter_saturation(app->param_index, 0, PARAMETERS_SIZE-1)
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	bfdc      	itt	le
 8002d1e:	2300      	movle	r3, #0
 8002d20:	f8c0 3154 	strle.w	r3, [r0, #340]	; 0x154
 8002d24:	e7bf      	b.n	8002ca6 <app_menu_parameters+0x12>
		BT_RESET(BT_UP);
 8002d26:	2300      	movs	r3, #0
 8002d28:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
		app->param_index ++;
 8002d2c:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8002d30:	3301      	adds	r3, #1
 8002d32:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		lcd16x2_clear();
 8002d36:	f000 fb25 	bl	8003384 <lcd16x2_clear>
 8002d3a:	e7e1      	b.n	8002d00 <app_menu_parameters+0x6c>
		BT_RESET(BT_DOWN);
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
		app->param_index --;
 8002d42:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8002d46:	3b01      	subs	r3, #1
 8002d48:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		lcd16x2_clear();
 8002d4c:	f000 fb1a 	bl	8003384 <lcd16x2_clear>
 8002d50:	e7dc      	b.n	8002d0c <app_menu_parameters+0x78>
		BT_RESET(BT_MENU);
 8002d52:	2300      	movs	r3, #0
 8002d54:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8
		app->menu_function = 0;
 8002d58:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
		lcd16x2_clear();
 8002d5c:	f000 fb12 	bl	8003384 <lcd16x2_clear>
}
 8002d60:	e7da      	b.n	8002d18 <app_menu_parameters+0x84>
 8002d62:	bf00      	nop
 8002d64:	08005d6c 	.word	0x08005d6c

08002d68 <app_init>:
 * Descrição mais detalhada da função exemploFuncao.
 *
 * @param parametro Descrição do parâmetro.
 * @return void
 */
void app_init(app_t * app) {
 8002d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	4604      	mov	r4, r0

    /** Configs **/

	app->fs = 72000000 / TIM1->ARR ;
 8002d70:	4b59      	ldr	r3, [pc, #356]	; (8002ed8 <app_init+0x170>)
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	4859      	ldr	r0, [pc, #356]	; (8002edc <app_init+0x174>)
 8002d76:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d7a:	f7fd ff75 	bl	8000c68 <__aeabi_ui2f>
 8002d7e:	4605      	mov	r5, r0
 8002d80:	6020      	str	r0, [r4, #0]
	app->ts = 1.0 / app->fs;
 8002d82:	4601      	mov	r1, r0
 8002d84:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002d88:	f7fe f87a 	bl	8000e80 <__aeabi_fdiv>
 8002d8c:	6060      	str	r0, [r4, #4]

    /** Bus voltage **/

	so_filter_initialize(&app->lpo  , app->fs, LPO_FC  , LPO_Q  , LPO_TYPE  , LPO_WARP  );
 8002d8e:	f104 081c 	add.w	r8, r4, #28
 8002d92:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 8002d96:	2600      	movs	r6, #0
 8002d98:	9601      	str	r6, [sp, #4]
 8002d9a:	9600      	str	r6, [sp, #0]
 8002d9c:	463b      	mov	r3, r7
 8002d9e:	4a50      	ldr	r2, [pc, #320]	; (8002ee0 <app_init+0x178>)
 8002da0:	4629      	mov	r1, r5
 8002da2:	4640      	mov	r0, r8
 8002da4:	f000 fc9c 	bl	80036e0 <so_filter_initialize>
	so_filter_update_coeff_lowpass(&app->lpo);
 8002da8:	4640      	mov	r0, r8
 8002daa:	f000 fb7d 	bl	80034a8 <so_filter_update_coeff_lowpass>
	so_filter_initialize(&app->notch, app->fs, NOTCH_FC, NOTCH_Q, NOTCH_TYPE, NOTCH_WARP);
 8002dae:	4625      	mov	r5, r4
 8002db0:	2301      	movs	r3, #1
 8002db2:	9301      	str	r3, [sp, #4]
 8002db4:	2302      	movs	r3, #2
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	4b4a      	ldr	r3, [pc, #296]	; (8002ee4 <app_init+0x17c>)
 8002dba:	4a4b      	ldr	r2, [pc, #300]	; (8002ee8 <app_init+0x180>)
 8002dbc:	f855 1b64 	ldr.w	r1, [r5], #100
 8002dc0:	4628      	mov	r0, r5
 8002dc2:	f000 fc8d 	bl	80036e0 <so_filter_initialize>
	so_filter_update_coeff_notch(&app->notch);
 8002dc6:	4628      	mov	r0, r5
 8002dc8:	f000 fbe0 	bl	800358c <so_filter_update_coeff_notch>

    /** Controle V/F **/

	app->ref_freq = 1.0;
 8002dcc:	f8c4 70f8 	str.w	r7, [r4, #248]	; 0xf8
	app->modulation_amp = 0.0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
	app->modulation_freq = 0.0;
 8002dd6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100

	limiter_initialize(&app->limiter, app->fs, 1.0);
 8002dda:	4620      	mov	r0, r4
 8002ddc:	463a      	mov	r2, r7
 8002dde:	f850 1bd8 	ldr.w	r1, [r0], #216
 8002de2:	f000 fafa 	bl	80033da <limiter_initialize>


	WaveGenerator_update(&app->gerador, app->fs, app->modulation_freq, app->modulation_amp);
 8002de6:	4620      	mov	r0, r4
 8002de8:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8002dec:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 8002df0:	f850 1bac 	ldr.w	r1, [r0], #172
 8002df4:	f000 fc9c 	bl	8003730 <WaveGenerator_update>

    /** Menus **/

	app->menu_selection = 0;
 8002df8:	f8c4 614c 	str.w	r6, [r4, #332]	; 0x14c
	app->menu_vector[0] = &app_menu_main;
 8002dfc:	4b3b      	ldr	r3, [pc, #236]	; (8002eec <app_init+0x184>)
 8002dfe:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
	app->menu_vector[1] = &app_menu_monitor;
 8002e02:	4b3b      	ldr	r3, [pc, #236]	; (8002ef0 <app_init+0x188>)
 8002e04:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	app->menu_vector[2] = &app_menu_parameters;
 8002e08:	4b3a      	ldr	r3, [pc, #232]	; (8002ef4 <app_init+0x18c>)
 8002e0a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118

	strcpy(app->menu_name[0], "Main menu");
 8002e0e:	4b3a      	ldr	r3, [pc, #232]	; (8002ef8 <app_init+0x190>)
 8002e10:	cb03      	ldmia	r3!, {r0, r1}
 8002e12:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
 8002e16:	f8c4 1120 	str.w	r1, [r4, #288]	; 0x120
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	strcpy(app->menu_name[1], "Monitor");
 8002e20:	4b36      	ldr	r3, [pc, #216]	; (8002efc <app_init+0x194>)
 8002e22:	cb03      	ldmia	r3!, {r0, r1}
 8002e24:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
 8002e28:	f8c4 1130 	str.w	r1, [r4, #304]	; 0x130
	strcpy(app->menu_name[2], "Parameters");
 8002e2c:	4b34      	ldr	r3, [pc, #208]	; (8002f00 <app_init+0x198>)
 8002e2e:	cb03      	ldmia	r3!, {r0, r1}
 8002e30:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
 8002e34:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
 8002e38:	881a      	ldrh	r2, [r3, #0]
 8002e3a:	789b      	ldrb	r3, [r3, #2]
 8002e3c:	f8a4 2144 	strh.w	r2, [r4, #324]	; 0x144
 8002e40:	f884 3146 	strb.w	r3, [r4, #326]	; 0x146

    /** Parameters
     * Use 8 Char for name
     * **/

	app->param_ptr[0] = &app->lpo.fc;
 8002e44:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8002e48:	f8c4 1158 	str.w	r1, [r4, #344]	; 0x158
	strcpy(app->param_name[0], "LPO Fc");
 8002e4c:	4b2d      	ldr	r3, [pc, #180]	; (8002f04 <app_init+0x19c>)
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
 8002e54:	889a      	ldrh	r2, [r3, #4]
 8002e56:	799b      	ldrb	r3, [r3, #6]
 8002e58:	f8a4 2174 	strh.w	r2, [r4, #372]	; 0x174
 8002e5c:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176

	app->param_ptr[1] = &app->lpo.Q;
 8002e60:	f104 0224 	add.w	r2, r4, #36	; 0x24
 8002e64:	f8c4 215c 	str.w	r2, [r4, #348]	; 0x15c
	strcpy(app->param_name[1], "LPO Q");
 8002e68:	4b27      	ldr	r3, [pc, #156]	; (8002f08 <app_init+0x1a0>)
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	f8c4 0180 	str.w	r0, [r4, #384]	; 0x180
 8002e70:	889b      	ldrh	r3, [r3, #4]
 8002e72:	f8a4 3184 	strh.w	r3, [r4, #388]	; 0x184

	app->param_ptr[2] = &app->lpo.fc;
 8002e76:	f8c4 1160 	str.w	r1, [r4, #352]	; 0x160
	strcpy(app->param_name[2], "Notch Fc");
 8002e7a:	4b24      	ldr	r3, [pc, #144]	; (8002f0c <app_init+0x1a4>)
 8002e7c:	cb03      	ldmia	r3!, {r0, r1}
 8002e7e:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
 8002e82:	f8c4 1194 	str.w	r1, [r4, #404]	; 0x194
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198

	app->param_ptr[3] = &app->lpo.Q;
 8002e8c:	f8c4 2164 	str.w	r2, [r4, #356]	; 0x164
	strcpy(app->param_name[3], "Notch Q");
 8002e90:	4b1f      	ldr	r3, [pc, #124]	; (8002f10 <app_init+0x1a8>)
 8002e92:	cb03      	ldmia	r3!, {r0, r1}
 8002e94:	f8c4 01a0 	str.w	r0, [r4, #416]	; 0x1a0
 8002e98:	f8c4 11a4 	str.w	r1, [r4, #420]	; 0x1a4

	app->param_ptr[4] = &app->limiter.rate;
 8002e9c:	f104 03e0 	add.w	r3, r4, #224	; 0xe0
 8002ea0:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
	strcpy(app->param_name[4], "Rate Lim");
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	; (8002f14 <app_init+0x1ac>)
 8002ea6:	cb03      	ldmia	r3!, {r0, r1}
 8002ea8:	f8c4 01b0 	str.w	r0, [r4, #432]	; 0x1b0
 8002eac:	f8c4 11b4 	str.w	r1, [r4, #436]	; 0x1b4
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	f884 31b8 	strb.w	r3, [r4, #440]	; 0x1b8

	app->param_ptr[5] = &app->ref_freq;
 8002eb6:	f104 03f8 	add.w	r3, r4, #248	; 0xf8
 8002eba:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
	strcpy(app->param_name[5], "Ref Freq");
 8002ebe:	4b16      	ldr	r3, [pc, #88]	; (8002f18 <app_init+0x1b0>)
 8002ec0:	cb03      	ldmia	r3!, {r0, r1}
 8002ec2:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
 8002ec6:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	f884 31c8 	strb.w	r3, [r4, #456]	; 0x1c8


    /** Buttons **/


}
 8002ed0:	b002      	add	sp, #8
 8002ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40012c00 	.word	0x40012c00
 8002edc:	044aa200 	.word	0x044aa200
 8002ee0:	41f00000 	.word	0x41f00000
 8002ee4:	41400000 	.word	0x41400000
 8002ee8:	42f00000 	.word	0x42f00000
 8002eec:	08002af5 	.word	0x08002af5
 8002ef0:	08002bbd 	.word	0x08002bbd
 8002ef4:	08002c95 	.word	0x08002c95
 8002ef8:	08005d70 	.word	0x08005d70
 8002efc:	08005d7c 	.word	0x08005d7c
 8002f00:	08005d84 	.word	0x08005d84
 8002f04:	08005d90 	.word	0x08005d90
 8002f08:	08005d98 	.word	0x08005d98
 8002f0c:	08005da0 	.word	0x08005da0
 8002f10:	08005dac 	.word	0x08005dac
 8002f14:	08005db4 	.word	0x08005db4
 8002f18:	08005dc0 	.word	0x08005dc0

08002f1c <app_loop>:

void app_loop(app_t * app){
 8002f1c:	b538      	push	{r3, r4, r5, lr}
 8002f1e:	4604      	mov	r4, r0

		app->button[0].state = HAL_GPIO_ReadPin(BT1_GPIO_Port, BT1_Pin);
 8002f20:	4d1b      	ldr	r5, [pc, #108]	; (8002f90 <app_loop+0x74>)
 8002f22:	2110      	movs	r1, #16
 8002f24:	4628      	mov	r0, r5
 8002f26:	f7fe fe99 	bl	8001c5c <HAL_GPIO_ReadPin>
 8002f2a:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
		app->button[1].state = HAL_GPIO_ReadPin(BT2_GPIO_Port, BT2_Pin);
 8002f2e:	2120      	movs	r1, #32
 8002f30:	4628      	mov	r0, r5
 8002f32:	f7fe fe93 	bl	8001c5c <HAL_GPIO_ReadPin>
 8002f36:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
		app->button[2].state = HAL_GPIO_ReadPin(BT3_GPIO_Port, BT3_Pin);
 8002f3a:	2140      	movs	r1, #64	; 0x40
 8002f3c:	4628      	mov	r0, r5
 8002f3e:	f7fe fe8d 	bl	8001c5c <HAL_GPIO_ReadPin>
 8002f42:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
		app->button[3].state = HAL_GPIO_ReadPin(BT4_GPIO_Port, BT4_Pin);
 8002f46:	2180      	movs	r1, #128	; 0x80
 8002f48:	4628      	mov	r0, r5
 8002f4a:	f7fe fe87 	bl	8001c5c <HAL_GPIO_ReadPin>
 8002f4e:	f8c4 01ec 	str.w	r0, [r4, #492]	; 0x1ec

		if(!app->button[0].state) app->button[0].flag = 1;
 8002f52:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 8002f56:	b913      	cbnz	r3, 8002f5e <app_loop+0x42>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if(!app->button[1].state) app->button[1].flag = 1;
 8002f5e:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 8002f62:	b913      	cbnz	r3, 8002f6a <app_loop+0x4e>
 8002f64:	2301      	movs	r3, #1
 8002f66:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
		if(!app->button[2].state) app->button[2].flag = 1;
 8002f6a:	f8d4 31e4 	ldr.w	r3, [r4, #484]	; 0x1e4
 8002f6e:	b913      	cbnz	r3, 8002f76 <app_loop+0x5a>
 8002f70:	2301      	movs	r3, #1
 8002f72:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
		if(!app->button[3].state) app->button[3].flag = 1;
 8002f76:	b910      	cbnz	r0, 8002f7e <app_loop+0x62>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8

		app->menu_vector[app->menu_function](app);
 8002f7e:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8002f82:	3344      	adds	r3, #68	; 0x44
 8002f84:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002f88:	4620      	mov	r0, r4
 8002f8a:	4798      	blx	r3

}
 8002f8c:	bd38      	pop	{r3, r4, r5, pc}
 8002f8e:	bf00      	nop
 8002f90:	40010c00 	.word	0x40010c00

08002f94 <app_isr>:

void app_isr(app_t * app){
 8002f94:	b570      	push	{r4, r5, r6, lr}
 8002f96:	4604      	mov	r4, r0

	app->timer = app->timer + app->ts;
 8002f98:	6841      	ldr	r1, [r0, #4]
 8002f9a:	6880      	ldr	r0, [r0, #8]
 8002f9c:	f7fd fdb4 	bl	8000b08 <__addsf3>
 8002fa0:	60a0      	str	r0, [r4, #8]

	/** Bus voltage **/

	app->vbus.max = fmaxf(app->vbus.raw, app->vbus.max);
 8002fa2:	68e5      	ldr	r5, [r4, #12]
 8002fa4:	6921      	ldr	r1, [r4, #16]
 8002fa6:	4628      	mov	r0, r5
 8002fa8:	f001 f8a8 	bl	80040fc <fmaxf>
 8002fac:	6120      	str	r0, [r4, #16]
	app->vbus.min = fmaxf(app->vbus.raw, app->vbus.min);
 8002fae:	6961      	ldr	r1, [r4, #20]
 8002fb0:	4628      	mov	r0, r5
 8002fb2:	f001 f8a3 	bl	80040fc <fmaxf>
 8002fb6:	6160      	str	r0, [r4, #20]

	so_filter_run(&app->lpo,   app->vbus.raw);
 8002fb8:	4629      	mov	r1, r5
 8002fba:	f104 001c 	add.w	r0, r4, #28
 8002fbe:	f000 fb53 	bl	8003668 <so_filter_run>
	app->vbus.filtered = so_filter_run(&app->notch, app->lpo.states.y0);
 8002fc2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002fc4:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8002fc8:	f000 fb4e 	bl	8003668 <so_filter_run>
 8002fcc:	61a0      	str	r0, [r4, #24]

    /** Controle V/F **/

	limiter_rate_run(&app->limiter, app->ref_freq);
 8002fce:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
 8002fd2:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 8002fd6:	f000 fa0e 	bl	80033f6 <limiter_rate_run>

	app->modulation_freq = app->limiter.output;
 8002fda:	f8d4 60f4 	ldr.w	r6, [r4, #244]	; 0xf4
 8002fde:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
	app->modulation_amp  = app->limiter.output * GENERATOR_NOMINAL_TS;
 8002fe2:	490f      	ldr	r1, [pc, #60]	; (8003020 <app_isr+0x8c>)
 8002fe4:	4630      	mov	r0, r6
 8002fe6:	f7fd ff4b 	bl	8000e80 <__aeabi_fdiv>
 8002fea:	4603      	mov	r3, r0
 8002fec:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc

	WaveGenerator_update(&app->gerador, app->fs, app->modulation_freq, app->modulation_amp);
 8002ff0:	4625      	mov	r5, r4
 8002ff2:	4632      	mov	r2, r6
 8002ff4:	f855 1bac 	ldr.w	r1, [r5], #172
 8002ff8:	4628      	mov	r0, r5
 8002ffa:	f000 fb99 	bl	8003730 <WaveGenerator_update>
	WaveGenerator_sine_single_run(&app->gerador);
 8002ffe:	4628      	mov	r0, r5
 8003000:	f000 fbba 	bl	8003778 <WaveGenerator_sine_single_run>

	app->sa = app->gerador.a;
 8003004:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8003008:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	app->sb = app->gerador.b;
 800300c:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 8003010:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	app->sc = app->gerador.c;
 8003014:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8003018:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c

    /** PWM **/


}
 800301c:	bd70      	pop	{r4, r5, r6, pc}
 800301e:	bf00      	nop
 8003020:	42700000 	.word	0x42700000

08003024 <DWT_Delay_Init>:
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8003024:	4b0d      	ldr	r3, [pc, #52]	; (800305c <DWT_Delay_Init+0x38>)
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800302c:	60da      	str	r2, [r3, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003034:	60da      	str	r2, [r3, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8003036:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <DWT_Delay_Init+0x3c>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8003048:	2200      	movs	r2, #0
 800304a:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 800304c:	bf00      	nop
  __NOP();
 800304e:	bf00      	nop
  __NOP();
 8003050:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 8003052:	6858      	ldr	r0, [r3, #4]
  }
  else
  {
    return 1;
  }
}
 8003054:	fab0 f080 	clz	r0, r0
 8003058:	0940      	lsrs	r0, r0, #5
 800305a:	4770      	bx	lr
 800305c:	e000edf0 	.word	0xe000edf0
 8003060:	e0001000 	.word	0xe0001000

08003064 <lcd16x2_rs>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 8003064:	b508      	push	{r3, lr}
 8003066:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8003068:	4b03      	ldr	r3, [pc, #12]	; (8003078 <lcd16x2_rs+0x14>)
 800306a:	8819      	ldrh	r1, [r3, #0]
 800306c:	4b03      	ldr	r3, [pc, #12]	; (800307c <lcd16x2_rs+0x18>)
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	f7fe fdfa 	bl	8001c68 <HAL_GPIO_WritePin>
}
 8003074:	bd08      	pop	{r3, pc}
 8003076:	bf00      	nop
 8003078:	200000a6 	.word	0x200000a6
 800307c:	200000b0 	.word	0x200000b0

08003080 <lcd16x2_enablePulse>:
{
 8003080:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8003082:	2201      	movs	r2, #1
 8003084:	4b16      	ldr	r3, [pc, #88]	; (80030e0 <lcd16x2_enablePulse+0x60>)
 8003086:	8819      	ldrh	r1, [r3, #0]
 8003088:	4b16      	ldr	r3, [pc, #88]	; (80030e4 <lcd16x2_enablePulse+0x64>)
 800308a:	6818      	ldr	r0, [r3, #0]
 800308c:	f7fe fdec 	bl	8001c68 <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 8003090:	2414      	movs	r4, #20
 uint32_t clk_cycle_start = DWT->CYCCNT;
 8003092:	4b15      	ldr	r3, [pc, #84]	; (80030e8 <lcd16x2_enablePulse+0x68>)
 8003094:	685d      	ldr	r5, [r3, #4]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8003096:	f7ff f8f1 	bl	800227c <HAL_RCC_GetHCLKFreq>
 800309a:	4b14      	ldr	r3, [pc, #80]	; (80030ec <lcd16x2_enablePulse+0x6c>)
 800309c:	fba3 3000 	umull	r3, r0, r3, r0
 80030a0:	0c80      	lsrs	r0, r0, #18
 80030a2:	fb04 f400 	mul.w	r4, r4, r0
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 80030a6:	4a10      	ldr	r2, [pc, #64]	; (80030e8 <lcd16x2_enablePulse+0x68>)
 80030a8:	6853      	ldr	r3, [r2, #4]
 80030aa:	1b5b      	subs	r3, r3, r5
 80030ac:	42a3      	cmp	r3, r4
 80030ae:	d3fb      	bcc.n	80030a8 <lcd16x2_enablePulse+0x28>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 80030b0:	2200      	movs	r2, #0
 80030b2:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <lcd16x2_enablePulse+0x60>)
 80030b4:	8819      	ldrh	r1, [r3, #0]
 80030b6:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <lcd16x2_enablePulse+0x64>)
 80030b8:	6818      	ldr	r0, [r3, #0]
 80030ba:	f7fe fdd5 	bl	8001c68 <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 80030be:	243c      	movs	r4, #60	; 0x3c
 uint32_t clk_cycle_start = DWT->CYCCNT;
 80030c0:	4b09      	ldr	r3, [pc, #36]	; (80030e8 <lcd16x2_enablePulse+0x68>)
 80030c2:	685d      	ldr	r5, [r3, #4]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80030c4:	f7ff f8da 	bl	800227c <HAL_RCC_GetHCLKFreq>
 80030c8:	4b08      	ldr	r3, [pc, #32]	; (80030ec <lcd16x2_enablePulse+0x6c>)
 80030ca:	fba3 3000 	umull	r3, r0, r3, r0
 80030ce:	0c80      	lsrs	r0, r0, #18
 80030d0:	fb04 f400 	mul.w	r4, r4, r0
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 80030d4:	4a04      	ldr	r2, [pc, #16]	; (80030e8 <lcd16x2_enablePulse+0x68>)
 80030d6:	6853      	ldr	r3, [r2, #4]
 80030d8:	1b5b      	subs	r3, r3, r5
 80030da:	42a3      	cmp	r3, r4
 80030dc:	d3fb      	bcc.n	80030d6 <lcd16x2_enablePulse+0x56>
}
 80030de:	bd38      	pop	{r3, r4, r5, pc}
 80030e0:	200000a4 	.word	0x200000a4
 80030e4:	200000b0 	.word	0x200000b0
 80030e8:	e0001000 	.word	0xe0001000
 80030ec:	431bde83 	.word	0x431bde83

080030f0 <lcd16x2_write>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 80030f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030f4:	4604      	mov	r4, r0
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 80030f6:	0906      	lsrs	r6, r0, #4
  if(is8BitsMode)
 80030f8:	4b42      	ldr	r3, [pc, #264]	; (8003204 <lcd16x2_write+0x114>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d03d      	beq.n	800317c <lcd16x2_write+0x8c>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8003100:	4d41      	ldr	r5, [pc, #260]	; (8003208 <lcd16x2_write+0x118>)
 8003102:	f000 0201 	and.w	r2, r0, #1
 8003106:	4b41      	ldr	r3, [pc, #260]	; (800320c <lcd16x2_write+0x11c>)
 8003108:	8819      	ldrh	r1, [r3, #0]
 800310a:	6828      	ldr	r0, [r5, #0]
 800310c:	f7fe fdac 	bl	8001c68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8003110:	f004 0202 	and.w	r2, r4, #2
 8003114:	4b3e      	ldr	r3, [pc, #248]	; (8003210 <lcd16x2_write+0x120>)
 8003116:	8819      	ldrh	r1, [r3, #0]
 8003118:	6828      	ldr	r0, [r5, #0]
 800311a:	f7fe fda5 	bl	8001c68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 800311e:	f004 0204 	and.w	r2, r4, #4
 8003122:	4b3c      	ldr	r3, [pc, #240]	; (8003214 <lcd16x2_write+0x124>)
 8003124:	8819      	ldrh	r1, [r3, #0]
 8003126:	6828      	ldr	r0, [r5, #0]
 8003128:	f7fe fd9e 	bl	8001c68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 800312c:	f004 0208 	and.w	r2, r4, #8
 8003130:	4b39      	ldr	r3, [pc, #228]	; (8003218 <lcd16x2_write+0x128>)
 8003132:	8819      	ldrh	r1, [r3, #0]
 8003134:	6828      	ldr	r0, [r5, #0]
 8003136:	f7fe fd97 	bl	8001c68 <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 800313a:	4c38      	ldr	r4, [pc, #224]	; (800321c <lcd16x2_write+0x12c>)
 800313c:	f006 0201 	and.w	r2, r6, #1
 8003140:	4b37      	ldr	r3, [pc, #220]	; (8003220 <lcd16x2_write+0x130>)
 8003142:	8819      	ldrh	r1, [r3, #0]
 8003144:	6820      	ldr	r0, [r4, #0]
 8003146:	f7fe fd8f 	bl	8001c68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 800314a:	f006 0202 	and.w	r2, r6, #2
 800314e:	4b35      	ldr	r3, [pc, #212]	; (8003224 <lcd16x2_write+0x134>)
 8003150:	8819      	ldrh	r1, [r3, #0]
 8003152:	6820      	ldr	r0, [r4, #0]
 8003154:	f7fe fd88 	bl	8001c68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8003158:	f006 0204 	and.w	r2, r6, #4
 800315c:	4b32      	ldr	r3, [pc, #200]	; (8003228 <lcd16x2_write+0x138>)
 800315e:	8819      	ldrh	r1, [r3, #0]
 8003160:	6820      	ldr	r0, [r4, #0]
 8003162:	f7fe fd81 	bl	8001c68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8003166:	f006 0208 	and.w	r2, r6, #8
 800316a:	4b30      	ldr	r3, [pc, #192]	; (800322c <lcd16x2_write+0x13c>)
 800316c:	8819      	ldrh	r1, [r3, #0]
 800316e:	6820      	ldr	r0, [r4, #0]
 8003170:	f7fe fd7a 	bl	8001c68 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8003174:	f7ff ff84 	bl	8003080 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 8003178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 800317c:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8003220 <lcd16x2_write+0x130>
 8003180:	4d26      	ldr	r5, [pc, #152]	; (800321c <lcd16x2_write+0x12c>)
 8003182:	f006 0201 	and.w	r2, r6, #1
 8003186:	f8ba 1000 	ldrh.w	r1, [sl]
 800318a:	6828      	ldr	r0, [r5, #0]
 800318c:	f7fe fd6c 	bl	8001c68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8003190:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8003224 <lcd16x2_write+0x134>
 8003194:	f006 0202 	and.w	r2, r6, #2
 8003198:	f8b9 1000 	ldrh.w	r1, [r9]
 800319c:	6828      	ldr	r0, [r5, #0]
 800319e:	f7fe fd63 	bl	8001c68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 80031a2:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8003228 <lcd16x2_write+0x138>
 80031a6:	f006 0204 	and.w	r2, r6, #4
 80031aa:	f8b8 1000 	ldrh.w	r1, [r8]
 80031ae:	6828      	ldr	r0, [r5, #0]
 80031b0:	f7fe fd5a 	bl	8001c68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80031b4:	4f1d      	ldr	r7, [pc, #116]	; (800322c <lcd16x2_write+0x13c>)
 80031b6:	f006 0208 	and.w	r2, r6, #8
 80031ba:	8839      	ldrh	r1, [r7, #0]
 80031bc:	6828      	ldr	r0, [r5, #0]
 80031be:	f7fe fd53 	bl	8001c68 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 80031c2:	f7ff ff5d 	bl	8003080 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80031c6:	f004 0201 	and.w	r2, r4, #1
 80031ca:	f8ba 1000 	ldrh.w	r1, [sl]
 80031ce:	6828      	ldr	r0, [r5, #0]
 80031d0:	f7fe fd4a 	bl	8001c68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80031d4:	f004 0202 	and.w	r2, r4, #2
 80031d8:	f8b9 1000 	ldrh.w	r1, [r9]
 80031dc:	6828      	ldr	r0, [r5, #0]
 80031de:	f7fe fd43 	bl	8001c68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 80031e2:	f004 0204 	and.w	r2, r4, #4
 80031e6:	f8b8 1000 	ldrh.w	r1, [r8]
 80031ea:	6828      	ldr	r0, [r5, #0]
 80031ec:	f7fe fd3c 	bl	8001c68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 80031f0:	f004 0208 	and.w	r2, r4, #8
 80031f4:	8839      	ldrh	r1, [r7, #0]
 80031f6:	6828      	ldr	r0, [r5, #0]
 80031f8:	f7fe fd36 	bl	8001c68 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 80031fc:	f7ff ff40 	bl	8003080 <lcd16x2_enablePulse>
}
 8003200:	e7ba      	b.n	8003178 <lcd16x2_write+0x88>
 8003202:	bf00      	nop
 8003204:	2000000d 	.word	0x2000000d
 8003208:	200000a8 	.word	0x200000a8
 800320c:	20000094 	.word	0x20000094
 8003210:	20000096 	.word	0x20000096
 8003214:	20000098 	.word	0x20000098
 8003218:	2000009a 	.word	0x2000009a
 800321c:	200000ac 	.word	0x200000ac
 8003220:	2000009c 	.word	0x2000009c
 8003224:	2000009e 	.word	0x2000009e
 8003228:	200000a0 	.word	0x200000a0
 800322c:	200000a2 	.word	0x200000a2

08003230 <lcd16x2_writeCommand>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 8003230:	b510      	push	{r4, lr}
 8003232:	4604      	mov	r4, r0
  lcd16x2_rs(false);
 8003234:	2000      	movs	r0, #0
 8003236:	f7ff ff15 	bl	8003064 <lcd16x2_rs>
  lcd16x2_write(cmd);
 800323a:	4620      	mov	r0, r4
 800323c:	f7ff ff58 	bl	80030f0 <lcd16x2_write>
}
 8003240:	bd10      	pop	{r4, pc}
	...

08003244 <lcd16x2_write4>:

/**
 * @brief 4-bits write
 */
static void lcd16x2_write4(uint8_t nib)
{
 8003244:	b538      	push	{r3, r4, r5, lr}
 8003246:	4604      	mov	r4, r0
  nib &= 0xF;
  lcd16x2_rs(false);
 8003248:	2000      	movs	r0, #0
 800324a:	f7ff ff0b 	bl	8003064 <lcd16x2_rs>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 800324e:	4d10      	ldr	r5, [pc, #64]	; (8003290 <lcd16x2_write4+0x4c>)
 8003250:	f004 0201 	and.w	r2, r4, #1
 8003254:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <lcd16x2_write4+0x50>)
 8003256:	8819      	ldrh	r1, [r3, #0]
 8003258:	6828      	ldr	r0, [r5, #0]
 800325a:	f7fe fd05 	bl	8001c68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 800325e:	f004 0202 	and.w	r2, r4, #2
 8003262:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <lcd16x2_write4+0x54>)
 8003264:	8819      	ldrh	r1, [r3, #0]
 8003266:	6828      	ldr	r0, [r5, #0]
 8003268:	f7fe fcfe 	bl	8001c68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 800326c:	f004 0204 	and.w	r2, r4, #4
 8003270:	4b0a      	ldr	r3, [pc, #40]	; (800329c <lcd16x2_write4+0x58>)
 8003272:	8819      	ldrh	r1, [r3, #0]
 8003274:	6828      	ldr	r0, [r5, #0]
 8003276:	f7fe fcf7 	bl	8001c68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 800327a:	f004 0208 	and.w	r2, r4, #8
 800327e:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <lcd16x2_write4+0x5c>)
 8003280:	8819      	ldrh	r1, [r3, #0]
 8003282:	6828      	ldr	r0, [r5, #0]
 8003284:	f7fe fcf0 	bl	8001c68 <HAL_GPIO_WritePin>
  lcd16x2_enablePulse();
 8003288:	f7ff fefa 	bl	8003080 <lcd16x2_enablePulse>
}
 800328c:	bd38      	pop	{r3, r4, r5, pc}
 800328e:	bf00      	nop
 8003290:	200000ac 	.word	0x200000ac
 8003294:	2000009c 	.word	0x2000009c
 8003298:	2000009e 	.word	0x2000009e
 800329c:	200000a0 	.word	0x200000a0
 80032a0:	200000a2 	.word	0x200000a2

080032a4 <lcd16x2_init_4bits>:
 * @param[in] x_pin GPIO pin (e.g. GPIO_PIN_1)
 */
void lcd16x2_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 80032a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032a6:	4607      	mov	r7, r0
 80032a8:	460e      	mov	r6, r1
 80032aa:	4615      	mov	r5, r2
 80032ac:	461c      	mov	r4, r3
  DWT_Delay_Init();
 80032ae:	f7ff feb9 	bl	8003024 <DWT_Delay_Init>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 80032b2:	4b23      	ldr	r3, [pc, #140]	; (8003340 <lcd16x2_init_4bits+0x9c>)
 80032b4:	601f      	str	r7, [r3, #0]
  PIN_RS = rs_pin;
 80032b6:	4b23      	ldr	r3, [pc, #140]	; (8003344 <lcd16x2_init_4bits+0xa0>)
 80032b8:	801e      	strh	r6, [r3, #0]
  PIN_E = e_pin;
 80032ba:	4b23      	ldr	r3, [pc, #140]	; (8003348 <lcd16x2_init_4bits+0xa4>)
 80032bc:	801d      	strh	r5, [r3, #0]
  PORT_MSB = port_4_7;
 80032be:	4b23      	ldr	r3, [pc, #140]	; (800334c <lcd16x2_init_4bits+0xa8>)
 80032c0:	601c      	str	r4, [r3, #0]
  D4_PIN = d4_pin;
 80032c2:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 80032c6:	4b22      	ldr	r3, [pc, #136]	; (8003350 <lcd16x2_init_4bits+0xac>)
 80032c8:	801a      	strh	r2, [r3, #0]
  D5_PIN = d5_pin;
 80032ca:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80032ce:	4b21      	ldr	r3, [pc, #132]	; (8003354 <lcd16x2_init_4bits+0xb0>)
 80032d0:	801a      	strh	r2, [r3, #0]
  D6_PIN = d6_pin;
 80032d2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80032d6:	4b20      	ldr	r3, [pc, #128]	; (8003358 <lcd16x2_init_4bits+0xb4>)
 80032d8:	801a      	strh	r2, [r3, #0]
  D7_PIN = d7_pin;
 80032da:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80032de:	4b1f      	ldr	r3, [pc, #124]	; (800335c <lcd16x2_init_4bits+0xb8>)
 80032e0:	801a      	strh	r2, [r3, #0]
  is8BitsMode = false;
 80032e2:	4b1f      	ldr	r3, [pc, #124]	; (8003360 <lcd16x2_init_4bits+0xbc>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 80032e8:	2428      	movs	r4, #40	; 0x28
 80032ea:	4b1e      	ldr	r3, [pc, #120]	; (8003364 <lcd16x2_init_4bits+0xc0>)
 80032ec:	701c      	strb	r4, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 80032ee:	2014      	movs	r0, #20
 80032f0:	f7fe f9d8 	bl	80016a4 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_write4(0x3);
 80032f4:	2003      	movs	r0, #3
 80032f6:	f7ff ffa5 	bl	8003244 <lcd16x2_write4>
  LCD_MS_DELAY(5);
 80032fa:	2005      	movs	r0, #5
 80032fc:	f7fe f9d2 	bl	80016a4 <HAL_Delay>
  lcd16x2_write4(0x3);
 8003300:	2003      	movs	r0, #3
 8003302:	f7ff ff9f 	bl	8003244 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8003306:	2001      	movs	r0, #1
 8003308:	f7fe f9cc 	bl	80016a4 <HAL_Delay>
  lcd16x2_write4(0x3);
 800330c:	2003      	movs	r0, #3
 800330e:	f7ff ff99 	bl	8003244 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8003312:	2001      	movs	r0, #1
 8003314:	f7fe f9c6 	bl	80016a4 <HAL_Delay>
  lcd16x2_write4(0x2);  //4 bit mode
 8003318:	2002      	movs	r0, #2
 800331a:	f7ff ff93 	bl	8003244 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 800331e:	2001      	movs	r0, #1
 8003320:	f7fe f9c0 	bl	80016a4 <HAL_Delay>
  //4. Function set; Enable 2 lines, Data length to 4 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8003324:	4620      	mov	r0, r4
 8003326:	f7ff ff83 	bl	8003230 <lcd16x2_writeCommand>
  //3. Display control (Display ON, Cursor ON, blink cursor)
  //lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
  //3. Display control (Display ON, Cursor OFF, blink cursor OFF)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D );
 800332a:	200c      	movs	r0, #12
 800332c:	f7ff ff80 	bl	8003230 <lcd16x2_writeCommand>
  //4. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8003330:	2001      	movs	r0, #1
 8003332:	f7ff ff7d 	bl	8003230 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 8003336:	2003      	movs	r0, #3
 8003338:	f7fe f9b4 	bl	80016a4 <HAL_Delay>
}
 800333c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800333e:	bf00      	nop
 8003340:	200000b0 	.word	0x200000b0
 8003344:	200000a6 	.word	0x200000a6
 8003348:	200000a4 	.word	0x200000a4
 800334c:	200000ac 	.word	0x200000ac
 8003350:	2000009c 	.word	0x2000009c
 8003354:	2000009e 	.word	0x2000009e
 8003358:	200000a0 	.word	0x200000a0
 800335c:	200000a2 	.word	0x200000a2
 8003360:	2000000d 	.word	0x2000000d
 8003364:	2000000c 	.word	0x2000000c

08003368 <lcd16x2_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_setCursor(uint8_t row, uint8_t col)
{
 8003368:	b508      	push	{r3, lr}
  uint8_t maskData;
  maskData = (col)&0x0F;
 800336a:	f001 010f 	and.w	r1, r1, #15
  if(row==0)
 800336e:	b920      	cbnz	r0, 800337a <lcd16x2_setCursor+0x12>
  {
    maskData |= (0x80);
    lcd16x2_writeCommand(maskData);
 8003370:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 8003374:	f7ff ff5c 	bl	8003230 <lcd16x2_writeCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_writeCommand(maskData);
  }
}
 8003378:	bd08      	pop	{r3, pc}
    lcd16x2_writeCommand(maskData);
 800337a:	f041 00c0 	orr.w	r0, r1, #192	; 0xc0
 800337e:	f7ff ff57 	bl	8003230 <lcd16x2_writeCommand>
}
 8003382:	e7f9      	b.n	8003378 <lcd16x2_setCursor+0x10>

08003384 <lcd16x2_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_clear(void)
{
 8003384:	b508      	push	{r3, lr}
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8003386:	2001      	movs	r0, #1
 8003388:	f7ff ff52 	bl	8003230 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 800338c:	2003      	movs	r0, #3
 800338e:	f7fe f989 	bl	80016a4 <HAL_Delay>
}
 8003392:	bd08      	pop	{r3, pc}

08003394 <lcd16x2_printf>:

/**
 * @brief Print to display any datatype (e.g. lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 8003394:	b40f      	push	{r0, r1, r2, r3}
 8003396:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003398:	b087      	sub	sp, #28
 800339a:	aa0c      	add	r2, sp, #48	; 0x30
 800339c:	f852 1b04 	ldr.w	r1, [r2], #4
  char stringArray[20];
  va_list args;
  va_start(args, str);
 80033a0:	9200      	str	r2, [sp, #0]
  vsprintf(stringArray, str, args);
 80033a2:	a801      	add	r0, sp, #4
 80033a4:	f000 fa5c 	bl	8003860 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80033a8:	ad01      	add	r5, sp, #4
 80033aa:	2400      	movs	r4, #0
  lcd16x2_rs(true);
 80033ac:	2701      	movs	r7, #1
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80033ae:	a801      	add	r0, sp, #4
 80033b0:	f7fc fece 	bl	8000150 <strlen>
 80033b4:	42a0      	cmp	r0, r4
 80033b6:	d90b      	bls.n	80033d0 <lcd16x2_printf+0x3c>
 80033b8:	3401      	adds	r4, #1
 80033ba:	2c11      	cmp	r4, #17
 80033bc:	d008      	beq.n	80033d0 <lcd16x2_printf+0x3c>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 80033be:	f815 6b01 	ldrb.w	r6, [r5], #1
  lcd16x2_rs(true);
 80033c2:	4638      	mov	r0, r7
 80033c4:	f7ff fe4e 	bl	8003064 <lcd16x2_rs>
  lcd16x2_write(data);
 80033c8:	4630      	mov	r0, r6
 80033ca:	f7ff fe91 	bl	80030f0 <lcd16x2_write>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80033ce:	e7ee      	b.n	80033ae <lcd16x2_printf+0x1a>
  }
}
 80033d0:	b007      	add	sp, #28
 80033d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80033d6:	b004      	add	sp, #16
 80033d8:	4770      	bx	lr

080033da <limiter_initialize>:
 *
 * @param limiter  Ponteiro para a estrutura do limiter
 * @param fs    Frequencia de atualizacao do limiter
 */
void limiter_initialize(limiter_t *limiter, float fs, float rate)
{
 80033da:	b538      	push	{r3, r4, r5, lr}
 80033dc:	4604      	mov	r4, r0
 80033de:	4615      	mov	r5, r2
    limiter->fs = fs;
 80033e0:	6001      	str	r1, [r0, #0]
    limiter->ts = 1.0 / fs;
 80033e2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80033e6:	f7fd fd4b 	bl	8000e80 <__aeabi_fdiv>
 80033ea:	6060      	str	r0, [r4, #4]
    limiter->input = 0.0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	6163      	str	r3, [r4, #20]
    limiter->output = 0.0;
 80033f0:	61e3      	str	r3, [r4, #28]
    limiter->rate = rate;
 80033f2:	60a5      	str	r5, [r4, #8]
}
 80033f4:	bd38      	pop	{r3, r4, r5, pc}

080033f6 <limiter_rate_run>:
 * @param[in] limiter Ponteiro para a estrutura do limiter.
 * @param[in] input Entrada para o limitador de taxa.
 * @return Saída limitada pelo limite de taxa.
 */
float limiter_rate_run(limiter_t *limiter, float input)
{
 80033f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033fa:	4605      	mov	r5, r0
 80033fc:	460c      	mov	r4, r1
    float delta    = input - limiter->output;
 80033fe:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8003402:	4641      	mov	r1, r8
 8003404:	4620      	mov	r0, r4
 8003406:	f7fd fb7d 	bl	8000b04 <__aeabi_fsub>
 800340a:	4607      	mov	r7, r0
    float maxDelta = limiter->rate * limiter->ts;
 800340c:	6869      	ldr	r1, [r5, #4]
 800340e:	68a8      	ldr	r0, [r5, #8]
 8003410:	f7fd fc82 	bl	8000d18 <__aeabi_fmul>
 8003414:	4606      	mov	r6, r0

    if (delta > maxDelta) {
 8003416:	4601      	mov	r1, r0
 8003418:	4638      	mov	r0, r7
 800341a:	f7fd fe39 	bl	8001090 <__aeabi_fcmpgt>
 800341e:	b130      	cbz	r0, 800342e <limiter_rate_run+0x38>
        input = limiter->output + maxDelta;
 8003420:	4631      	mov	r1, r6
 8003422:	4640      	mov	r0, r8
 8003424:	f7fd fb70 	bl	8000b08 <__addsf3>
    } else if (delta < -maxDelta) {
        input = limiter->output - maxDelta;
    }

    limiter->output = input;
 8003428:	61e8      	str	r0, [r5, #28]
    return limiter->output;
}
 800342a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (delta < -maxDelta) {
 800342e:	f106 4000 	add.w	r0, r6, #2147483648	; 0x80000000
 8003432:	4639      	mov	r1, r7
 8003434:	f7fd fe2c 	bl	8001090 <__aeabi_fcmpgt>
 8003438:	b120      	cbz	r0, 8003444 <limiter_rate_run+0x4e>
        input = limiter->output - maxDelta;
 800343a:	4631      	mov	r1, r6
 800343c:	4640      	mov	r0, r8
 800343e:	f7fd fb61 	bl	8000b04 <__aeabi_fsub>
 8003442:	e7f1      	b.n	8003428 <limiter_rate_run+0x32>
 8003444:	4620      	mov	r0, r4
 8003446:	e7ef      	b.n	8003428 <limiter_rate_run+0x32>

08003448 <so_filter_prewarp_frequency>:
 *
 * @param   fc              Frequencia de atualizacao do so_filter em Hz
 * @return  wp              Retorna a frequencia de corte pre distorcida em radianos
 */
void so_filter_prewarp_frequency(so_filter_t * so_filter, float fc)
{
 8003448:	b5d0      	push	{r4, r6, r7, lr}
 800344a:	4604      	mov	r4, r0
 800344c:	4608      	mov	r0, r1
    so_filter->fc = fc;
 800344e:	6161      	str	r1, [r4, #20]
    so_filter->wc = 2.0 * so_filter->fs * tan( 3.1415926535897932384626433832795 * fc * so_filter->ts );
 8003450:	f7fc ffea 	bl	8000428 <__aeabi_f2d>
 8003454:	a312      	add	r3, pc, #72	; (adr r3, 80034a0 <so_filter_prewarp_frequency+0x58>)
 8003456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345a:	f7fd f83d 	bl	80004d8 <__aeabi_dmul>
 800345e:	4606      	mov	r6, r0
 8003460:	460f      	mov	r7, r1
 8003462:	6920      	ldr	r0, [r4, #16]
 8003464:	f7fc ffe0 	bl	8000428 <__aeabi_f2d>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4630      	mov	r0, r6
 800346e:	4639      	mov	r1, r7
 8003470:	f7fd f832 	bl	80004d8 <__aeabi_dmul>
 8003474:	f000 fe18 	bl	80040a8 <tan>
 8003478:	4606      	mov	r6, r0
 800347a:	460f      	mov	r7, r1
 800347c:	68e0      	ldr	r0, [r4, #12]
 800347e:	f7fc ffd3 	bl	8000428 <__aeabi_f2d>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	f7fc fe71 	bl	800016c <__adddf3>
 800348a:	4632      	mov	r2, r6
 800348c:	463b      	mov	r3, r7
 800348e:	f7fd f823 	bl	80004d8 <__aeabi_dmul>
 8003492:	f7fd fae3 	bl	8000a5c <__aeabi_d2f>
 8003496:	61a0      	str	r0, [r4, #24]
}
 8003498:	bdd0      	pop	{r4, r6, r7, pc}
 800349a:	bf00      	nop
 800349c:	f3af 8000 	nop.w
 80034a0:	54442d18 	.word	0x54442d18
 80034a4:	400921fb 	.word	0x400921fb

080034a8 <so_filter_update_coeff_lowpass>:
 * @param fs            Frequencia de atualizacao do so_filter em Hz
 * @param Q             Fator de qualidade do filtro
 * @param fc            Frequencia de corte em Hertz
 */
void so_filter_update_coeff_lowpass(so_filter_t * so_filter)
{
 80034a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034ac:	4604      	mov	r4, r0
    //!< Variaveis auxiliares para minimizar processamento
    float a = so_filter->ts * so_filter->ts * so_filter->wc *  so_filter->wc;   //!< (ts*wc)^2
 80034ae:	6906      	ldr	r6, [r0, #16]
 80034b0:	f8d0 8018 	ldr.w	r8, [r0, #24]
 80034b4:	4631      	mov	r1, r6
 80034b6:	4630      	mov	r0, r6
 80034b8:	f7fd fc2e 	bl	8000d18 <__aeabi_fmul>
 80034bc:	4641      	mov	r1, r8
 80034be:	f7fd fc2b 	bl	8000d18 <__aeabi_fmul>
 80034c2:	4641      	mov	r1, r8
 80034c4:	f7fd fc28 	bl	8000d18 <__aeabi_fmul>
 80034c8:	4605      	mov	r5, r0
    float b = (2.0 * so_filter->ts * so_filter->wc) / so_filter->Q;             //!< 2*ts*wc/Q
 80034ca:	4630      	mov	r0, r6
 80034cc:	f7fc ffac 	bl	8000428 <__aeabi_f2d>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	f7fc fe4a 	bl	800016c <__adddf3>
 80034d8:	4606      	mov	r6, r0
 80034da:	460f      	mov	r7, r1
 80034dc:	4640      	mov	r0, r8
 80034de:	f7fc ffa3 	bl	8000428 <__aeabi_f2d>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4630      	mov	r0, r6
 80034e8:	4639      	mov	r1, r7
 80034ea:	f7fc fff5 	bl	80004d8 <__aeabi_dmul>
 80034ee:	4606      	mov	r6, r0
 80034f0:	460f      	mov	r7, r1
 80034f2:	68a0      	ldr	r0, [r4, #8]
 80034f4:	f7fc ff98 	bl	8000428 <__aeabi_f2d>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	4630      	mov	r0, r6
 80034fe:	4639      	mov	r1, r7
 8003500:	f7fd f914 	bl	800072c <__aeabi_ddiv>
 8003504:	f7fd faaa 	bl	8000a5c <__aeabi_d2f>
 8003508:	4607      	mov	r7, r0
    float aux_div = 1.0 / ( 4 + b + a );                                        //!< 1 / (4 + 2*ts*wc/Q + (ts*wc)^2)
 800350a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800350e:	f7fd fafb 	bl	8000b08 <__addsf3>
 8003512:	4629      	mov	r1, r5
 8003514:	f7fd faf8 	bl	8000b08 <__addsf3>
 8003518:	4601      	mov	r1, r0
 800351a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800351e:	f7fd fcaf 	bl	8000e80 <__aeabi_fdiv>
 8003522:	4606      	mov	r6, r0

    //!< Coeficientes do filtro de eixo direto
    so_filter->coeffs.a1 = ( (2.0 * a) - 8) * aux_div;
 8003524:	4628      	mov	r0, r5
 8003526:	f7fc ff7f 	bl	8000428 <__aeabi_f2d>
 800352a:	4602      	mov	r2, r0
 800352c:	460b      	mov	r3, r1
 800352e:	f7fc fe1d 	bl	800016c <__adddf3>
 8003532:	2200      	movs	r2, #0
 8003534:	4b14      	ldr	r3, [pc, #80]	; (8003588 <so_filter_update_coeff_lowpass+0xe0>)
 8003536:	f7fc fe17 	bl	8000168 <__aeabi_dsub>
 800353a:	4680      	mov	r8, r0
 800353c:	4689      	mov	r9, r1
 800353e:	4630      	mov	r0, r6
 8003540:	f7fc ff72 	bl	8000428 <__aeabi_f2d>
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	4640      	mov	r0, r8
 800354a:	4649      	mov	r1, r9
 800354c:	f7fc ffc4 	bl	80004d8 <__aeabi_dmul>
 8003550:	f7fd fa84 	bl	8000a5c <__aeabi_d2f>
 8003554:	61e0      	str	r0, [r4, #28]
    so_filter->coeffs.a2 = (a - b + 4)      * aux_div;
 8003556:	4639      	mov	r1, r7
 8003558:	4628      	mov	r0, r5
 800355a:	f7fd fad3 	bl	8000b04 <__aeabi_fsub>
 800355e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8003562:	f7fd fad1 	bl	8000b08 <__addsf3>
 8003566:	4631      	mov	r1, r6
 8003568:	f7fd fbd6 	bl	8000d18 <__aeabi_fmul>
 800356c:	6220      	str	r0, [r4, #32]
    so_filter->coeffs.b0 = a                * aux_div;
 800356e:	4631      	mov	r1, r6
 8003570:	4628      	mov	r0, r5
 8003572:	f7fd fbd1 	bl	8000d18 <__aeabi_fmul>
 8003576:	4605      	mov	r5, r0
 8003578:	6260      	str	r0, [r4, #36]	; 0x24
    so_filter->coeffs.b1 = 2.0 * so_filter->coeffs.b0;
 800357a:	4601      	mov	r1, r0
 800357c:	f7fd fac4 	bl	8000b08 <__addsf3>
 8003580:	62a0      	str	r0, [r4, #40]	; 0x28
    so_filter->coeffs.b2 = so_filter->coeffs.b0;
 8003582:	62e5      	str	r5, [r4, #44]	; 0x2c
}
 8003584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003588:	40200000 	.word	0x40200000

0800358c <so_filter_update_coeff_notch>:
 * @param fs            Frequencia de atualizacao do so_filter em Hz
 * @param Q             Fator de qualidade do filtro
 * @param fc            Frequencia de corte em Hertz
 */
void so_filter_update_coeff_notch(so_filter_t * so_filter)
{
 800358c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003590:	4604      	mov	r4, r0
    //!< Variaveis auxiliares para minimizar processamento
    float a = so_filter->ts * so_filter->ts * so_filter->wc *  so_filter->wc;   //!< (ts*wc)^2
 8003592:	6906      	ldr	r6, [r0, #16]
 8003594:	6985      	ldr	r5, [r0, #24]
 8003596:	4631      	mov	r1, r6
 8003598:	4630      	mov	r0, r6
 800359a:	f7fd fbbd 	bl	8000d18 <__aeabi_fmul>
 800359e:	4629      	mov	r1, r5
 80035a0:	f7fd fbba 	bl	8000d18 <__aeabi_fmul>
 80035a4:	4629      	mov	r1, r5
 80035a6:	f7fd fbb7 	bl	8000d18 <__aeabi_fmul>
 80035aa:	4607      	mov	r7, r0
    float b = 2.0 * so_filter->ts * so_filter->wc / so_filter->Q;               //!< 2*ts*wc/Q
 80035ac:	4630      	mov	r0, r6
 80035ae:	f7fc ff3b 	bl	8000428 <__aeabi_f2d>
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	f7fc fdd9 	bl	800016c <__adddf3>
 80035ba:	4680      	mov	r8, r0
 80035bc:	4689      	mov	r9, r1
 80035be:	4628      	mov	r0, r5
 80035c0:	f7fc ff32 	bl	8000428 <__aeabi_f2d>
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4640      	mov	r0, r8
 80035ca:	4649      	mov	r1, r9
 80035cc:	f7fc ff84 	bl	80004d8 <__aeabi_dmul>
 80035d0:	4680      	mov	r8, r0
 80035d2:	4689      	mov	r9, r1
 80035d4:	68a0      	ldr	r0, [r4, #8]
 80035d6:	f7fc ff27 	bl	8000428 <__aeabi_f2d>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4640      	mov	r0, r8
 80035e0:	4649      	mov	r1, r9
 80035e2:	f7fd f8a3 	bl	800072c <__aeabi_ddiv>
 80035e6:	f7fd fa39 	bl	8000a5c <__aeabi_d2f>
 80035ea:	4682      	mov	sl, r0
    float c = a + 4;                                                            //!< (ts*wc)^2 + 4
 80035ec:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80035f0:	4638      	mov	r0, r7
 80035f2:	f7fd fa89 	bl	8000b08 <__addsf3>
 80035f6:	4605      	mov	r5, r0
    float aux_div = 1.0 / ( b + c );                                            //!< 1 / (4 + 2*ts*wc/Q + (ts*wc)^2)
 80035f8:	4601      	mov	r1, r0
 80035fa:	4650      	mov	r0, sl
 80035fc:	f7fd fa84 	bl	8000b08 <__addsf3>
 8003600:	4601      	mov	r1, r0
 8003602:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003606:	f7fd fc3b 	bl	8000e80 <__aeabi_fdiv>
 800360a:	4606      	mov	r6, r0

    //!< Coeficientes do filtro de eixo direto
    so_filter->coeffs.a1 = (2.0 * a - 8)    * aux_div;
 800360c:	4638      	mov	r0, r7
 800360e:	f7fc ff0b 	bl	8000428 <__aeabi_f2d>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	f7fc fda9 	bl	800016c <__adddf3>
 800361a:	2200      	movs	r2, #0
 800361c:	4b11      	ldr	r3, [pc, #68]	; (8003664 <so_filter_update_coeff_notch+0xd8>)
 800361e:	f7fc fda3 	bl	8000168 <__aeabi_dsub>
 8003622:	4680      	mov	r8, r0
 8003624:	4689      	mov	r9, r1
 8003626:	4630      	mov	r0, r6
 8003628:	f7fc fefe 	bl	8000428 <__aeabi_f2d>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4640      	mov	r0, r8
 8003632:	4649      	mov	r1, r9
 8003634:	f7fc ff50 	bl	80004d8 <__aeabi_dmul>
 8003638:	f7fd fa10 	bl	8000a5c <__aeabi_d2f>
 800363c:	4607      	mov	r7, r0
 800363e:	61e0      	str	r0, [r4, #28]
    so_filter->coeffs.a2 = (c - b)          * aux_div;
 8003640:	4651      	mov	r1, sl
 8003642:	4628      	mov	r0, r5
 8003644:	f7fd fa5e 	bl	8000b04 <__aeabi_fsub>
 8003648:	4631      	mov	r1, r6
 800364a:	f7fd fb65 	bl	8000d18 <__aeabi_fmul>
 800364e:	6220      	str	r0, [r4, #32]
    so_filter->coeffs.b0 = c                * aux_div;
 8003650:	4631      	mov	r1, r6
 8003652:	4628      	mov	r0, r5
 8003654:	f7fd fb60 	bl	8000d18 <__aeabi_fmul>
 8003658:	6260      	str	r0, [r4, #36]	; 0x24
    so_filter->coeffs.b1 = so_filter->coeffs.a1;
 800365a:	62a7      	str	r7, [r4, #40]	; 0x28
    so_filter->coeffs.b2 = so_filter->coeffs.b0;
 800365c:	62e0      	str	r0, [r4, #44]	; 0x2c
}
 800365e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003662:	bf00      	nop
 8003664:	40200000 	.word	0x40200000

08003668 <so_filter_run>:
 * @brief Roda a estrutura do filtro SO
 *
 * @param so_filter Ponteiro para a estrutura do filtro
 * @param input     Entrada do filtro
 */
float so_filter_run(so_filter_t * so_filter, float input){
 8003668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800366c:	4604      	mov	r4, r0
 800366e:	4608      	mov	r0, r1
    so_filter->states.u2 = so_filter->states.u1;
 8003670:	f8d4 8034 	ldr.w	r8, [r4, #52]	; 0x34
 8003674:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    so_filter->states.u1 = so_filter->states.u0;
 8003678:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 800367c:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    so_filter->states.u0 = input;
 8003680:	6321      	str	r1, [r4, #48]	; 0x30
    so_filter->states.y2 = so_filter->states.y1;
 8003682:	6c27      	ldr	r7, [r4, #64]	; 0x40
 8003684:	6467      	str	r7, [r4, #68]	; 0x44
    so_filter->states.y1 = so_filter->states.y0;
 8003686:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8003688:	6426      	str	r6, [r4, #64]	; 0x40
    so_filter->states.y0 =  so_filter->states.u0 * so_filter->coeffs.b0 +
 800368a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800368c:	f7fd fb44 	bl	8000d18 <__aeabi_fmul>
 8003690:	4605      	mov	r5, r0
                            so_filter->states.u1 * so_filter->coeffs.b1 +
 8003692:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003694:	4648      	mov	r0, r9
 8003696:	f7fd fb3f 	bl	8000d18 <__aeabi_fmul>
 800369a:	4601      	mov	r1, r0
    so_filter->states.y0 =  so_filter->states.u0 * so_filter->coeffs.b0 +
 800369c:	4628      	mov	r0, r5
 800369e:	f7fd fa33 	bl	8000b08 <__addsf3>
 80036a2:	4605      	mov	r5, r0
                            so_filter->states.u2 * so_filter->coeffs.b2 -
 80036a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80036a6:	4640      	mov	r0, r8
 80036a8:	f7fd fb36 	bl	8000d18 <__aeabi_fmul>
 80036ac:	4601      	mov	r1, r0
                            so_filter->states.u1 * so_filter->coeffs.b1 +
 80036ae:	4628      	mov	r0, r5
 80036b0:	f7fd fa2a 	bl	8000b08 <__addsf3>
 80036b4:	4605      	mov	r5, r0
                            so_filter->states.y2 * so_filter->coeffs.a2 -
 80036b6:	6a21      	ldr	r1, [r4, #32]
 80036b8:	4638      	mov	r0, r7
 80036ba:	f7fd fb2d 	bl	8000d18 <__aeabi_fmul>
 80036be:	4601      	mov	r1, r0
                            so_filter->states.u2 * so_filter->coeffs.b2 -
 80036c0:	4628      	mov	r0, r5
 80036c2:	f7fd fa1f 	bl	8000b04 <__aeabi_fsub>
 80036c6:	4605      	mov	r5, r0
                            so_filter->states.y1 * so_filter->coeffs.a1;
 80036c8:	69e1      	ldr	r1, [r4, #28]
 80036ca:	4630      	mov	r0, r6
 80036cc:	f7fd fb24 	bl	8000d18 <__aeabi_fmul>
 80036d0:	4601      	mov	r1, r0
                            so_filter->states.y2 * so_filter->coeffs.a2 -
 80036d2:	4628      	mov	r0, r5
 80036d4:	f7fd fa16 	bl	8000b04 <__aeabi_fsub>
    so_filter->states.y0 =  so_filter->states.u0 * so_filter->coeffs.b0 +
 80036d8:	63e0      	str	r0, [r4, #60]	; 0x3c
    return so_filter->states.y0;
}
 80036da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080036e0 <so_filter_initialize>:
 * @param Q             Fator de qualidade do filtro
 * @param fc            Frequencia de corte em Hertz
 * @param Type          Tipo do filtro: 0 lowpass, 1 bandpass, 2 notch e 3 highpass
 */
void so_filter_initialize(so_filter_t * so_filter, float fs, float fc, float Q, int type, int is_prewarped)
{
 80036e0:	b570      	push	{r4, r5, r6, lr}
 80036e2:	4604      	mov	r4, r0
 80036e4:	4615      	mov	r5, r2
 80036e6:	9e05      	ldr	r6, [sp, #20]
    //!< Atualiza os parametros usado no filtro
    so_filter->type = type;
 80036e8:	9a04      	ldr	r2, [sp, #16]
 80036ea:	6002      	str	r2, [r0, #0]
    so_filter->Q  = Q;
 80036ec:	6083      	str	r3, [r0, #8]
    so_filter->fs = fs;
 80036ee:	60c1      	str	r1, [r0, #12]
    so_filter->ts = 1.0 / fs;
 80036f0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80036f4:	f7fd fbc4 	bl	8000e80 <__aeabi_fdiv>
 80036f8:	6120      	str	r0, [r4, #16]
    so_filter->fc = fc;
 80036fa:	6165      	str	r5, [r4, #20]
    so_filter->is_prewarped = is_prewarped;
 80036fc:	6066      	str	r6, [r4, #4]

    if (is_prewarped){
 80036fe:	b95e      	cbnz	r6, 8003718 <so_filter_initialize+0x38>
        so_filter_prewarp_frequency(so_filter, fc);
    }else{
        so_filter->wc = 6.28318530717958647692528676655900 * fc;
 8003700:	4628      	mov	r0, r5
 8003702:	f7fc fe91 	bl	8000428 <__aeabi_f2d>
 8003706:	a308      	add	r3, pc, #32	; (adr r3, 8003728 <so_filter_initialize+0x48>)
 8003708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370c:	f7fc fee4 	bl	80004d8 <__aeabi_dmul>
 8003710:	f7fd f9a4 	bl	8000a5c <__aeabi_d2f>
 8003714:	61a0      	str	r0, [r4, #24]
    }
}
 8003716:	bd70      	pop	{r4, r5, r6, pc}
        so_filter_prewarp_frequency(so_filter, fc);
 8003718:	4629      	mov	r1, r5
 800371a:	4620      	mov	r0, r4
 800371c:	f7ff fe94 	bl	8003448 <so_filter_prewarp_frequency>
 8003720:	e7f9      	b.n	8003716 <so_filter_initialize+0x36>
 8003722:	bf00      	nop
 8003724:	f3af 8000 	nop.w
 8003728:	54442d18 	.word	0x54442d18
 800372c:	401921fb 	.word	0x401921fb

08003730 <WaveGenerator_update>:
 * @param SineWave Ponteiro para estrutura WaveGenerator
 *
 * @warning
 */
void WaveGenerator_update(WaveGenerator_t * SineWave, float Fs, float Fg, float A)
{
 8003730:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8003734:	4604      	mov	r4, r0
 8003736:	4615      	mov	r5, r2
 8003738:	461e      	mov	r6, r3
    //!< Atualiza frequencia da integra��o do gerador
    //SineWave->Fs = Fs;
    //!< Atualiza periodo da integra��o do gerador
    //SineWave->Ts = 1.0 / Fs;
    //!< Atualiza Passo de integra��o
    SineWave->Delta = TWOPI * Fg * SineWave->Ts;
 800373a:	4610      	mov	r0, r2
 800373c:	f7fc fe74 	bl	8000428 <__aeabi_f2d>
 8003740:	a30b      	add	r3, pc, #44	; (adr r3, 8003770 <WaveGenerator_update+0x40>)
 8003742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003746:	f7fc fec7 	bl	80004d8 <__aeabi_dmul>
 800374a:	4680      	mov	r8, r0
 800374c:	4689      	mov	r9, r1
 800374e:	6860      	ldr	r0, [r4, #4]
 8003750:	f7fc fe6a 	bl	8000428 <__aeabi_f2d>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4640      	mov	r0, r8
 800375a:	4649      	mov	r1, r9
 800375c:	f7fc febc 	bl	80004d8 <__aeabi_dmul>
 8003760:	f7fd f97c 	bl	8000a5c <__aeabi_d2f>
 8003764:	60a0      	str	r0, [r4, #8]
    //!< Atualiza frequencia fundamental da gera��o
    SineWave->Fg = Fg;
 8003766:	6125      	str	r5, [r4, #16]
    //!< Atualiza amplitude do sinal de gera��o
    SineWave->A = A;
 8003768:	6166      	str	r6, [r4, #20]

}
 800376a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800376e:	bf00      	nop
 8003770:	54442d18 	.word	0x54442d18
 8003774:	401921fb 	.word	0x401921fb

08003778 <WaveGenerator_sine_single_run>:
 * @param SineWave Ponteiro para estrutura WaveGenerator
 *
 * @warning
 */
void WaveGenerator_sine_single_run(WaveGenerator_t * SineWave)
{
 8003778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377a:	4604      	mov	r4, r0
    //!< Atualiza tempo
    SineWave->t = SineWave->t + SineWave->Delta;
 800377c:	6881      	ldr	r1, [r0, #8]
 800377e:	68c0      	ldr	r0, [r0, #12]
 8003780:	f7fd f9c2 	bl	8000b08 <__addsf3>
 8003784:	4605      	mov	r5, r0

    //!< Reseta quando complar um ciclo
    if (SineWave->t >= TWOPI){
 8003786:	f7fc fe4f 	bl	8000428 <__aeabi_f2d>
 800378a:	4606      	mov	r6, r0
 800378c:	460f      	mov	r7, r1
 800378e:	a30e      	add	r3, pc, #56	; (adr r3, 80037c8 <WaveGenerator_sine_single_run+0x50>)
 8003790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003794:	f7fd f926 	bl	80009e4 <__aeabi_dcmpge>
 8003798:	b908      	cbnz	r0, 800379e <WaveGenerator_sine_single_run+0x26>
    SineWave->t = SineWave->t + SineWave->Delta;
 800379a:	60e5      	str	r5, [r4, #12]
 800379c:	e009      	b.n	80037b2 <WaveGenerator_sine_single_run+0x3a>
        SineWave->t -= TWOPI;
 800379e:	a30a      	add	r3, pc, #40	; (adr r3, 80037c8 <WaveGenerator_sine_single_run+0x50>)
 80037a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a4:	4630      	mov	r0, r6
 80037a6:	4639      	mov	r1, r7
 80037a8:	f7fc fcde 	bl	8000168 <__aeabi_dsub>
 80037ac:	f7fd f956 	bl	8000a5c <__aeabi_d2f>
 80037b0:	60e0      	str	r0, [r4, #12]
    }

    //!< Atualiza as saidas
    SineWave->a = SineWave->A * sinf(SineWave->t + THETA_A);
 80037b2:	68e0      	ldr	r0, [r4, #12]
 80037b4:	f000 fcce 	bl	8004154 <sinf>
 80037b8:	4601      	mov	r1, r0
 80037ba:	6960      	ldr	r0, [r4, #20]
 80037bc:	f7fd faac 	bl	8000d18 <__aeabi_fmul>
 80037c0:	6220      	str	r0, [r4, #32]

}
 80037c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037c4:	f3af 8000 	nop.w
 80037c8:	54442d18 	.word	0x54442d18
 80037cc:	401921fb 	.word	0x401921fb

080037d0 <__errno>:
 80037d0:	4b01      	ldr	r3, [pc, #4]	; (80037d8 <__errno+0x8>)
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	20000010 	.word	0x20000010

080037dc <__libc_init_array>:
 80037dc:	b570      	push	{r4, r5, r6, lr}
 80037de:	2600      	movs	r6, #0
 80037e0:	4d0c      	ldr	r5, [pc, #48]	; (8003814 <__libc_init_array+0x38>)
 80037e2:	4c0d      	ldr	r4, [pc, #52]	; (8003818 <__libc_init_array+0x3c>)
 80037e4:	1b64      	subs	r4, r4, r5
 80037e6:	10a4      	asrs	r4, r4, #2
 80037e8:	42a6      	cmp	r6, r4
 80037ea:	d109      	bne.n	8003800 <__libc_init_array+0x24>
 80037ec:	f002 fa8c 	bl	8005d08 <_init>
 80037f0:	2600      	movs	r6, #0
 80037f2:	4d0a      	ldr	r5, [pc, #40]	; (800381c <__libc_init_array+0x40>)
 80037f4:	4c0a      	ldr	r4, [pc, #40]	; (8003820 <__libc_init_array+0x44>)
 80037f6:	1b64      	subs	r4, r4, r5
 80037f8:	10a4      	asrs	r4, r4, #2
 80037fa:	42a6      	cmp	r6, r4
 80037fc:	d105      	bne.n	800380a <__libc_init_array+0x2e>
 80037fe:	bd70      	pop	{r4, r5, r6, pc}
 8003800:	f855 3b04 	ldr.w	r3, [r5], #4
 8003804:	4798      	blx	r3
 8003806:	3601      	adds	r6, #1
 8003808:	e7ee      	b.n	80037e8 <__libc_init_array+0xc>
 800380a:	f855 3b04 	ldr.w	r3, [r5], #4
 800380e:	4798      	blx	r3
 8003810:	3601      	adds	r6, #1
 8003812:	e7f2      	b.n	80037fa <__libc_init_array+0x1e>
 8003814:	080063a8 	.word	0x080063a8
 8003818:	080063a8 	.word	0x080063a8
 800381c:	080063a8 	.word	0x080063a8
 8003820:	080063ac 	.word	0x080063ac

08003824 <memset>:
 8003824:	4603      	mov	r3, r0
 8003826:	4402      	add	r2, r0
 8003828:	4293      	cmp	r3, r2
 800382a:	d100      	bne.n	800382e <memset+0xa>
 800382c:	4770      	bx	lr
 800382e:	f803 1b01 	strb.w	r1, [r3], #1
 8003832:	e7f9      	b.n	8003828 <memset+0x4>

08003834 <_vsiprintf_r>:
 8003834:	b500      	push	{lr}
 8003836:	b09b      	sub	sp, #108	; 0x6c
 8003838:	9100      	str	r1, [sp, #0]
 800383a:	9104      	str	r1, [sp, #16]
 800383c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003840:	9105      	str	r1, [sp, #20]
 8003842:	9102      	str	r1, [sp, #8]
 8003844:	4905      	ldr	r1, [pc, #20]	; (800385c <_vsiprintf_r+0x28>)
 8003846:	9103      	str	r1, [sp, #12]
 8003848:	4669      	mov	r1, sp
 800384a:	f000 f86f 	bl	800392c <_svfiprintf_r>
 800384e:	2200      	movs	r2, #0
 8003850:	9b00      	ldr	r3, [sp, #0]
 8003852:	701a      	strb	r2, [r3, #0]
 8003854:	b01b      	add	sp, #108	; 0x6c
 8003856:	f85d fb04 	ldr.w	pc, [sp], #4
 800385a:	bf00      	nop
 800385c:	ffff0208 	.word	0xffff0208

08003860 <vsiprintf>:
 8003860:	4613      	mov	r3, r2
 8003862:	460a      	mov	r2, r1
 8003864:	4601      	mov	r1, r0
 8003866:	4802      	ldr	r0, [pc, #8]	; (8003870 <vsiprintf+0x10>)
 8003868:	6800      	ldr	r0, [r0, #0]
 800386a:	f7ff bfe3 	b.w	8003834 <_vsiprintf_r>
 800386e:	bf00      	nop
 8003870:	20000010 	.word	0x20000010

08003874 <__ssputs_r>:
 8003874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003878:	688e      	ldr	r6, [r1, #8]
 800387a:	4682      	mov	sl, r0
 800387c:	429e      	cmp	r6, r3
 800387e:	460c      	mov	r4, r1
 8003880:	4690      	mov	r8, r2
 8003882:	461f      	mov	r7, r3
 8003884:	d838      	bhi.n	80038f8 <__ssputs_r+0x84>
 8003886:	898a      	ldrh	r2, [r1, #12]
 8003888:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800388c:	d032      	beq.n	80038f4 <__ssputs_r+0x80>
 800388e:	6825      	ldr	r5, [r4, #0]
 8003890:	6909      	ldr	r1, [r1, #16]
 8003892:	3301      	adds	r3, #1
 8003894:	eba5 0901 	sub.w	r9, r5, r1
 8003898:	6965      	ldr	r5, [r4, #20]
 800389a:	444b      	add	r3, r9
 800389c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038a4:	106d      	asrs	r5, r5, #1
 80038a6:	429d      	cmp	r5, r3
 80038a8:	bf38      	it	cc
 80038aa:	461d      	movcc	r5, r3
 80038ac:	0553      	lsls	r3, r2, #21
 80038ae:	d531      	bpl.n	8003914 <__ssputs_r+0xa0>
 80038b0:	4629      	mov	r1, r5
 80038b2:	f000 fb53 	bl	8003f5c <_malloc_r>
 80038b6:	4606      	mov	r6, r0
 80038b8:	b950      	cbnz	r0, 80038d0 <__ssputs_r+0x5c>
 80038ba:	230c      	movs	r3, #12
 80038bc:	f04f 30ff 	mov.w	r0, #4294967295
 80038c0:	f8ca 3000 	str.w	r3, [sl]
 80038c4:	89a3      	ldrh	r3, [r4, #12]
 80038c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038ca:	81a3      	strh	r3, [r4, #12]
 80038cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038d0:	464a      	mov	r2, r9
 80038d2:	6921      	ldr	r1, [r4, #16]
 80038d4:	f000 face 	bl	8003e74 <memcpy>
 80038d8:	89a3      	ldrh	r3, [r4, #12]
 80038da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038e2:	81a3      	strh	r3, [r4, #12]
 80038e4:	6126      	str	r6, [r4, #16]
 80038e6:	444e      	add	r6, r9
 80038e8:	6026      	str	r6, [r4, #0]
 80038ea:	463e      	mov	r6, r7
 80038ec:	6165      	str	r5, [r4, #20]
 80038ee:	eba5 0509 	sub.w	r5, r5, r9
 80038f2:	60a5      	str	r5, [r4, #8]
 80038f4:	42be      	cmp	r6, r7
 80038f6:	d900      	bls.n	80038fa <__ssputs_r+0x86>
 80038f8:	463e      	mov	r6, r7
 80038fa:	4632      	mov	r2, r6
 80038fc:	4641      	mov	r1, r8
 80038fe:	6820      	ldr	r0, [r4, #0]
 8003900:	f000 fac6 	bl	8003e90 <memmove>
 8003904:	68a3      	ldr	r3, [r4, #8]
 8003906:	6822      	ldr	r2, [r4, #0]
 8003908:	1b9b      	subs	r3, r3, r6
 800390a:	4432      	add	r2, r6
 800390c:	2000      	movs	r0, #0
 800390e:	60a3      	str	r3, [r4, #8]
 8003910:	6022      	str	r2, [r4, #0]
 8003912:	e7db      	b.n	80038cc <__ssputs_r+0x58>
 8003914:	462a      	mov	r2, r5
 8003916:	f000 fb7b 	bl	8004010 <_realloc_r>
 800391a:	4606      	mov	r6, r0
 800391c:	2800      	cmp	r0, #0
 800391e:	d1e1      	bne.n	80038e4 <__ssputs_r+0x70>
 8003920:	4650      	mov	r0, sl
 8003922:	6921      	ldr	r1, [r4, #16]
 8003924:	f000 face 	bl	8003ec4 <_free_r>
 8003928:	e7c7      	b.n	80038ba <__ssputs_r+0x46>
	...

0800392c <_svfiprintf_r>:
 800392c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003930:	4698      	mov	r8, r3
 8003932:	898b      	ldrh	r3, [r1, #12]
 8003934:	4607      	mov	r7, r0
 8003936:	061b      	lsls	r3, r3, #24
 8003938:	460d      	mov	r5, r1
 800393a:	4614      	mov	r4, r2
 800393c:	b09d      	sub	sp, #116	; 0x74
 800393e:	d50e      	bpl.n	800395e <_svfiprintf_r+0x32>
 8003940:	690b      	ldr	r3, [r1, #16]
 8003942:	b963      	cbnz	r3, 800395e <_svfiprintf_r+0x32>
 8003944:	2140      	movs	r1, #64	; 0x40
 8003946:	f000 fb09 	bl	8003f5c <_malloc_r>
 800394a:	6028      	str	r0, [r5, #0]
 800394c:	6128      	str	r0, [r5, #16]
 800394e:	b920      	cbnz	r0, 800395a <_svfiprintf_r+0x2e>
 8003950:	230c      	movs	r3, #12
 8003952:	603b      	str	r3, [r7, #0]
 8003954:	f04f 30ff 	mov.w	r0, #4294967295
 8003958:	e0d1      	b.n	8003afe <_svfiprintf_r+0x1d2>
 800395a:	2340      	movs	r3, #64	; 0x40
 800395c:	616b      	str	r3, [r5, #20]
 800395e:	2300      	movs	r3, #0
 8003960:	9309      	str	r3, [sp, #36]	; 0x24
 8003962:	2320      	movs	r3, #32
 8003964:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003968:	2330      	movs	r3, #48	; 0x30
 800396a:	f04f 0901 	mov.w	r9, #1
 800396e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003972:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003b18 <_svfiprintf_r+0x1ec>
 8003976:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800397a:	4623      	mov	r3, r4
 800397c:	469a      	mov	sl, r3
 800397e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003982:	b10a      	cbz	r2, 8003988 <_svfiprintf_r+0x5c>
 8003984:	2a25      	cmp	r2, #37	; 0x25
 8003986:	d1f9      	bne.n	800397c <_svfiprintf_r+0x50>
 8003988:	ebba 0b04 	subs.w	fp, sl, r4
 800398c:	d00b      	beq.n	80039a6 <_svfiprintf_r+0x7a>
 800398e:	465b      	mov	r3, fp
 8003990:	4622      	mov	r2, r4
 8003992:	4629      	mov	r1, r5
 8003994:	4638      	mov	r0, r7
 8003996:	f7ff ff6d 	bl	8003874 <__ssputs_r>
 800399a:	3001      	adds	r0, #1
 800399c:	f000 80aa 	beq.w	8003af4 <_svfiprintf_r+0x1c8>
 80039a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039a2:	445a      	add	r2, fp
 80039a4:	9209      	str	r2, [sp, #36]	; 0x24
 80039a6:	f89a 3000 	ldrb.w	r3, [sl]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 80a2 	beq.w	8003af4 <_svfiprintf_r+0x1c8>
 80039b0:	2300      	movs	r3, #0
 80039b2:	f04f 32ff 	mov.w	r2, #4294967295
 80039b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039ba:	f10a 0a01 	add.w	sl, sl, #1
 80039be:	9304      	str	r3, [sp, #16]
 80039c0:	9307      	str	r3, [sp, #28]
 80039c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039c6:	931a      	str	r3, [sp, #104]	; 0x68
 80039c8:	4654      	mov	r4, sl
 80039ca:	2205      	movs	r2, #5
 80039cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039d0:	4851      	ldr	r0, [pc, #324]	; (8003b18 <_svfiprintf_r+0x1ec>)
 80039d2:	f000 fa41 	bl	8003e58 <memchr>
 80039d6:	9a04      	ldr	r2, [sp, #16]
 80039d8:	b9d8      	cbnz	r0, 8003a12 <_svfiprintf_r+0xe6>
 80039da:	06d0      	lsls	r0, r2, #27
 80039dc:	bf44      	itt	mi
 80039de:	2320      	movmi	r3, #32
 80039e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039e4:	0711      	lsls	r1, r2, #28
 80039e6:	bf44      	itt	mi
 80039e8:	232b      	movmi	r3, #43	; 0x2b
 80039ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039ee:	f89a 3000 	ldrb.w	r3, [sl]
 80039f2:	2b2a      	cmp	r3, #42	; 0x2a
 80039f4:	d015      	beq.n	8003a22 <_svfiprintf_r+0xf6>
 80039f6:	4654      	mov	r4, sl
 80039f8:	2000      	movs	r0, #0
 80039fa:	f04f 0c0a 	mov.w	ip, #10
 80039fe:	9a07      	ldr	r2, [sp, #28]
 8003a00:	4621      	mov	r1, r4
 8003a02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a06:	3b30      	subs	r3, #48	; 0x30
 8003a08:	2b09      	cmp	r3, #9
 8003a0a:	d94e      	bls.n	8003aaa <_svfiprintf_r+0x17e>
 8003a0c:	b1b0      	cbz	r0, 8003a3c <_svfiprintf_r+0x110>
 8003a0e:	9207      	str	r2, [sp, #28]
 8003a10:	e014      	b.n	8003a3c <_svfiprintf_r+0x110>
 8003a12:	eba0 0308 	sub.w	r3, r0, r8
 8003a16:	fa09 f303 	lsl.w	r3, r9, r3
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	46a2      	mov	sl, r4
 8003a1e:	9304      	str	r3, [sp, #16]
 8003a20:	e7d2      	b.n	80039c8 <_svfiprintf_r+0x9c>
 8003a22:	9b03      	ldr	r3, [sp, #12]
 8003a24:	1d19      	adds	r1, r3, #4
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	9103      	str	r1, [sp, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	bfbb      	ittet	lt
 8003a2e:	425b      	neglt	r3, r3
 8003a30:	f042 0202 	orrlt.w	r2, r2, #2
 8003a34:	9307      	strge	r3, [sp, #28]
 8003a36:	9307      	strlt	r3, [sp, #28]
 8003a38:	bfb8      	it	lt
 8003a3a:	9204      	strlt	r2, [sp, #16]
 8003a3c:	7823      	ldrb	r3, [r4, #0]
 8003a3e:	2b2e      	cmp	r3, #46	; 0x2e
 8003a40:	d10c      	bne.n	8003a5c <_svfiprintf_r+0x130>
 8003a42:	7863      	ldrb	r3, [r4, #1]
 8003a44:	2b2a      	cmp	r3, #42	; 0x2a
 8003a46:	d135      	bne.n	8003ab4 <_svfiprintf_r+0x188>
 8003a48:	9b03      	ldr	r3, [sp, #12]
 8003a4a:	3402      	adds	r4, #2
 8003a4c:	1d1a      	adds	r2, r3, #4
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	9203      	str	r2, [sp, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	bfb8      	it	lt
 8003a56:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a5a:	9305      	str	r3, [sp, #20]
 8003a5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003b28 <_svfiprintf_r+0x1fc>
 8003a60:	2203      	movs	r2, #3
 8003a62:	4650      	mov	r0, sl
 8003a64:	7821      	ldrb	r1, [r4, #0]
 8003a66:	f000 f9f7 	bl	8003e58 <memchr>
 8003a6a:	b140      	cbz	r0, 8003a7e <_svfiprintf_r+0x152>
 8003a6c:	2340      	movs	r3, #64	; 0x40
 8003a6e:	eba0 000a 	sub.w	r0, r0, sl
 8003a72:	fa03 f000 	lsl.w	r0, r3, r0
 8003a76:	9b04      	ldr	r3, [sp, #16]
 8003a78:	3401      	adds	r4, #1
 8003a7a:	4303      	orrs	r3, r0
 8003a7c:	9304      	str	r3, [sp, #16]
 8003a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a82:	2206      	movs	r2, #6
 8003a84:	4825      	ldr	r0, [pc, #148]	; (8003b1c <_svfiprintf_r+0x1f0>)
 8003a86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a8a:	f000 f9e5 	bl	8003e58 <memchr>
 8003a8e:	2800      	cmp	r0, #0
 8003a90:	d038      	beq.n	8003b04 <_svfiprintf_r+0x1d8>
 8003a92:	4b23      	ldr	r3, [pc, #140]	; (8003b20 <_svfiprintf_r+0x1f4>)
 8003a94:	bb1b      	cbnz	r3, 8003ade <_svfiprintf_r+0x1b2>
 8003a96:	9b03      	ldr	r3, [sp, #12]
 8003a98:	3307      	adds	r3, #7
 8003a9a:	f023 0307 	bic.w	r3, r3, #7
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	9303      	str	r3, [sp, #12]
 8003aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aa4:	4433      	add	r3, r6
 8003aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8003aa8:	e767      	b.n	800397a <_svfiprintf_r+0x4e>
 8003aaa:	460c      	mov	r4, r1
 8003aac:	2001      	movs	r0, #1
 8003aae:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ab2:	e7a5      	b.n	8003a00 <_svfiprintf_r+0xd4>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f04f 0c0a 	mov.w	ip, #10
 8003aba:	4619      	mov	r1, r3
 8003abc:	3401      	adds	r4, #1
 8003abe:	9305      	str	r3, [sp, #20]
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ac6:	3a30      	subs	r2, #48	; 0x30
 8003ac8:	2a09      	cmp	r2, #9
 8003aca:	d903      	bls.n	8003ad4 <_svfiprintf_r+0x1a8>
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0c5      	beq.n	8003a5c <_svfiprintf_r+0x130>
 8003ad0:	9105      	str	r1, [sp, #20]
 8003ad2:	e7c3      	b.n	8003a5c <_svfiprintf_r+0x130>
 8003ad4:	4604      	mov	r4, r0
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003adc:	e7f0      	b.n	8003ac0 <_svfiprintf_r+0x194>
 8003ade:	ab03      	add	r3, sp, #12
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	462a      	mov	r2, r5
 8003ae4:	4638      	mov	r0, r7
 8003ae6:	4b0f      	ldr	r3, [pc, #60]	; (8003b24 <_svfiprintf_r+0x1f8>)
 8003ae8:	a904      	add	r1, sp, #16
 8003aea:	f3af 8000 	nop.w
 8003aee:	1c42      	adds	r2, r0, #1
 8003af0:	4606      	mov	r6, r0
 8003af2:	d1d6      	bne.n	8003aa2 <_svfiprintf_r+0x176>
 8003af4:	89ab      	ldrh	r3, [r5, #12]
 8003af6:	065b      	lsls	r3, r3, #25
 8003af8:	f53f af2c 	bmi.w	8003954 <_svfiprintf_r+0x28>
 8003afc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003afe:	b01d      	add	sp, #116	; 0x74
 8003b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b04:	ab03      	add	r3, sp, #12
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	462a      	mov	r2, r5
 8003b0a:	4638      	mov	r0, r7
 8003b0c:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <_svfiprintf_r+0x1f8>)
 8003b0e:	a904      	add	r1, sp, #16
 8003b10:	f000 f87c 	bl	8003c0c <_printf_i>
 8003b14:	e7eb      	b.n	8003aee <_svfiprintf_r+0x1c2>
 8003b16:	bf00      	nop
 8003b18:	08005dc9 	.word	0x08005dc9
 8003b1c:	08005dd3 	.word	0x08005dd3
 8003b20:	00000000 	.word	0x00000000
 8003b24:	08003875 	.word	0x08003875
 8003b28:	08005dcf 	.word	0x08005dcf

08003b2c <_printf_common>:
 8003b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b30:	4616      	mov	r6, r2
 8003b32:	4699      	mov	r9, r3
 8003b34:	688a      	ldr	r2, [r1, #8]
 8003b36:	690b      	ldr	r3, [r1, #16]
 8003b38:	4607      	mov	r7, r0
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	bfb8      	it	lt
 8003b3e:	4613      	movlt	r3, r2
 8003b40:	6033      	str	r3, [r6, #0]
 8003b42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b46:	460c      	mov	r4, r1
 8003b48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b4c:	b10a      	cbz	r2, 8003b52 <_printf_common+0x26>
 8003b4e:	3301      	adds	r3, #1
 8003b50:	6033      	str	r3, [r6, #0]
 8003b52:	6823      	ldr	r3, [r4, #0]
 8003b54:	0699      	lsls	r1, r3, #26
 8003b56:	bf42      	ittt	mi
 8003b58:	6833      	ldrmi	r3, [r6, #0]
 8003b5a:	3302      	addmi	r3, #2
 8003b5c:	6033      	strmi	r3, [r6, #0]
 8003b5e:	6825      	ldr	r5, [r4, #0]
 8003b60:	f015 0506 	ands.w	r5, r5, #6
 8003b64:	d106      	bne.n	8003b74 <_printf_common+0x48>
 8003b66:	f104 0a19 	add.w	sl, r4, #25
 8003b6a:	68e3      	ldr	r3, [r4, #12]
 8003b6c:	6832      	ldr	r2, [r6, #0]
 8003b6e:	1a9b      	subs	r3, r3, r2
 8003b70:	42ab      	cmp	r3, r5
 8003b72:	dc28      	bgt.n	8003bc6 <_printf_common+0x9a>
 8003b74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b78:	1e13      	subs	r3, r2, #0
 8003b7a:	6822      	ldr	r2, [r4, #0]
 8003b7c:	bf18      	it	ne
 8003b7e:	2301      	movne	r3, #1
 8003b80:	0692      	lsls	r2, r2, #26
 8003b82:	d42d      	bmi.n	8003be0 <_printf_common+0xb4>
 8003b84:	4649      	mov	r1, r9
 8003b86:	4638      	mov	r0, r7
 8003b88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b8c:	47c0      	blx	r8
 8003b8e:	3001      	adds	r0, #1
 8003b90:	d020      	beq.n	8003bd4 <_printf_common+0xa8>
 8003b92:	6823      	ldr	r3, [r4, #0]
 8003b94:	68e5      	ldr	r5, [r4, #12]
 8003b96:	f003 0306 	and.w	r3, r3, #6
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	bf18      	it	ne
 8003b9e:	2500      	movne	r5, #0
 8003ba0:	6832      	ldr	r2, [r6, #0]
 8003ba2:	f04f 0600 	mov.w	r6, #0
 8003ba6:	68a3      	ldr	r3, [r4, #8]
 8003ba8:	bf08      	it	eq
 8003baa:	1aad      	subeq	r5, r5, r2
 8003bac:	6922      	ldr	r2, [r4, #16]
 8003bae:	bf08      	it	eq
 8003bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	bfc4      	itt	gt
 8003bb8:	1a9b      	subgt	r3, r3, r2
 8003bba:	18ed      	addgt	r5, r5, r3
 8003bbc:	341a      	adds	r4, #26
 8003bbe:	42b5      	cmp	r5, r6
 8003bc0:	d11a      	bne.n	8003bf8 <_printf_common+0xcc>
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	e008      	b.n	8003bd8 <_printf_common+0xac>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	4652      	mov	r2, sl
 8003bca:	4649      	mov	r1, r9
 8003bcc:	4638      	mov	r0, r7
 8003bce:	47c0      	blx	r8
 8003bd0:	3001      	adds	r0, #1
 8003bd2:	d103      	bne.n	8003bdc <_printf_common+0xb0>
 8003bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bdc:	3501      	adds	r5, #1
 8003bde:	e7c4      	b.n	8003b6a <_printf_common+0x3e>
 8003be0:	2030      	movs	r0, #48	; 0x30
 8003be2:	18e1      	adds	r1, r4, r3
 8003be4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bee:	4422      	add	r2, r4
 8003bf0:	3302      	adds	r3, #2
 8003bf2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bf6:	e7c5      	b.n	8003b84 <_printf_common+0x58>
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	4622      	mov	r2, r4
 8003bfc:	4649      	mov	r1, r9
 8003bfe:	4638      	mov	r0, r7
 8003c00:	47c0      	blx	r8
 8003c02:	3001      	adds	r0, #1
 8003c04:	d0e6      	beq.n	8003bd4 <_printf_common+0xa8>
 8003c06:	3601      	adds	r6, #1
 8003c08:	e7d9      	b.n	8003bbe <_printf_common+0x92>
	...

08003c0c <_printf_i>:
 8003c0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c10:	460c      	mov	r4, r1
 8003c12:	7e27      	ldrb	r7, [r4, #24]
 8003c14:	4691      	mov	r9, r2
 8003c16:	2f78      	cmp	r7, #120	; 0x78
 8003c18:	4680      	mov	r8, r0
 8003c1a:	469a      	mov	sl, r3
 8003c1c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003c1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c22:	d807      	bhi.n	8003c34 <_printf_i+0x28>
 8003c24:	2f62      	cmp	r7, #98	; 0x62
 8003c26:	d80a      	bhi.n	8003c3e <_printf_i+0x32>
 8003c28:	2f00      	cmp	r7, #0
 8003c2a:	f000 80d9 	beq.w	8003de0 <_printf_i+0x1d4>
 8003c2e:	2f58      	cmp	r7, #88	; 0x58
 8003c30:	f000 80a4 	beq.w	8003d7c <_printf_i+0x170>
 8003c34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c3c:	e03a      	b.n	8003cb4 <_printf_i+0xa8>
 8003c3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c42:	2b15      	cmp	r3, #21
 8003c44:	d8f6      	bhi.n	8003c34 <_printf_i+0x28>
 8003c46:	a001      	add	r0, pc, #4	; (adr r0, 8003c4c <_printf_i+0x40>)
 8003c48:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003c4c:	08003ca5 	.word	0x08003ca5
 8003c50:	08003cb9 	.word	0x08003cb9
 8003c54:	08003c35 	.word	0x08003c35
 8003c58:	08003c35 	.word	0x08003c35
 8003c5c:	08003c35 	.word	0x08003c35
 8003c60:	08003c35 	.word	0x08003c35
 8003c64:	08003cb9 	.word	0x08003cb9
 8003c68:	08003c35 	.word	0x08003c35
 8003c6c:	08003c35 	.word	0x08003c35
 8003c70:	08003c35 	.word	0x08003c35
 8003c74:	08003c35 	.word	0x08003c35
 8003c78:	08003dc7 	.word	0x08003dc7
 8003c7c:	08003ce9 	.word	0x08003ce9
 8003c80:	08003da9 	.word	0x08003da9
 8003c84:	08003c35 	.word	0x08003c35
 8003c88:	08003c35 	.word	0x08003c35
 8003c8c:	08003de9 	.word	0x08003de9
 8003c90:	08003c35 	.word	0x08003c35
 8003c94:	08003ce9 	.word	0x08003ce9
 8003c98:	08003c35 	.word	0x08003c35
 8003c9c:	08003c35 	.word	0x08003c35
 8003ca0:	08003db1 	.word	0x08003db1
 8003ca4:	680b      	ldr	r3, [r1, #0]
 8003ca6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003caa:	1d1a      	adds	r2, r3, #4
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	600a      	str	r2, [r1, #0]
 8003cb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0a4      	b.n	8003e02 <_printf_i+0x1f6>
 8003cb8:	6825      	ldr	r5, [r4, #0]
 8003cba:	6808      	ldr	r0, [r1, #0]
 8003cbc:	062e      	lsls	r6, r5, #24
 8003cbe:	f100 0304 	add.w	r3, r0, #4
 8003cc2:	d50a      	bpl.n	8003cda <_printf_i+0xce>
 8003cc4:	6805      	ldr	r5, [r0, #0]
 8003cc6:	600b      	str	r3, [r1, #0]
 8003cc8:	2d00      	cmp	r5, #0
 8003cca:	da03      	bge.n	8003cd4 <_printf_i+0xc8>
 8003ccc:	232d      	movs	r3, #45	; 0x2d
 8003cce:	426d      	negs	r5, r5
 8003cd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cd4:	230a      	movs	r3, #10
 8003cd6:	485e      	ldr	r0, [pc, #376]	; (8003e50 <_printf_i+0x244>)
 8003cd8:	e019      	b.n	8003d0e <_printf_i+0x102>
 8003cda:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003cde:	6805      	ldr	r5, [r0, #0]
 8003ce0:	600b      	str	r3, [r1, #0]
 8003ce2:	bf18      	it	ne
 8003ce4:	b22d      	sxthne	r5, r5
 8003ce6:	e7ef      	b.n	8003cc8 <_printf_i+0xbc>
 8003ce8:	680b      	ldr	r3, [r1, #0]
 8003cea:	6825      	ldr	r5, [r4, #0]
 8003cec:	1d18      	adds	r0, r3, #4
 8003cee:	6008      	str	r0, [r1, #0]
 8003cf0:	0628      	lsls	r0, r5, #24
 8003cf2:	d501      	bpl.n	8003cf8 <_printf_i+0xec>
 8003cf4:	681d      	ldr	r5, [r3, #0]
 8003cf6:	e002      	b.n	8003cfe <_printf_i+0xf2>
 8003cf8:	0669      	lsls	r1, r5, #25
 8003cfa:	d5fb      	bpl.n	8003cf4 <_printf_i+0xe8>
 8003cfc:	881d      	ldrh	r5, [r3, #0]
 8003cfe:	2f6f      	cmp	r7, #111	; 0x6f
 8003d00:	bf0c      	ite	eq
 8003d02:	2308      	moveq	r3, #8
 8003d04:	230a      	movne	r3, #10
 8003d06:	4852      	ldr	r0, [pc, #328]	; (8003e50 <_printf_i+0x244>)
 8003d08:	2100      	movs	r1, #0
 8003d0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d0e:	6866      	ldr	r6, [r4, #4]
 8003d10:	2e00      	cmp	r6, #0
 8003d12:	bfa8      	it	ge
 8003d14:	6821      	ldrge	r1, [r4, #0]
 8003d16:	60a6      	str	r6, [r4, #8]
 8003d18:	bfa4      	itt	ge
 8003d1a:	f021 0104 	bicge.w	r1, r1, #4
 8003d1e:	6021      	strge	r1, [r4, #0]
 8003d20:	b90d      	cbnz	r5, 8003d26 <_printf_i+0x11a>
 8003d22:	2e00      	cmp	r6, #0
 8003d24:	d04d      	beq.n	8003dc2 <_printf_i+0x1b6>
 8003d26:	4616      	mov	r6, r2
 8003d28:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d2c:	fb03 5711 	mls	r7, r3, r1, r5
 8003d30:	5dc7      	ldrb	r7, [r0, r7]
 8003d32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d36:	462f      	mov	r7, r5
 8003d38:	42bb      	cmp	r3, r7
 8003d3a:	460d      	mov	r5, r1
 8003d3c:	d9f4      	bls.n	8003d28 <_printf_i+0x11c>
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d10b      	bne.n	8003d5a <_printf_i+0x14e>
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	07df      	lsls	r7, r3, #31
 8003d46:	d508      	bpl.n	8003d5a <_printf_i+0x14e>
 8003d48:	6923      	ldr	r3, [r4, #16]
 8003d4a:	6861      	ldr	r1, [r4, #4]
 8003d4c:	4299      	cmp	r1, r3
 8003d4e:	bfde      	ittt	le
 8003d50:	2330      	movle	r3, #48	; 0x30
 8003d52:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d56:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d5a:	1b92      	subs	r2, r2, r6
 8003d5c:	6122      	str	r2, [r4, #16]
 8003d5e:	464b      	mov	r3, r9
 8003d60:	4621      	mov	r1, r4
 8003d62:	4640      	mov	r0, r8
 8003d64:	f8cd a000 	str.w	sl, [sp]
 8003d68:	aa03      	add	r2, sp, #12
 8003d6a:	f7ff fedf 	bl	8003b2c <_printf_common>
 8003d6e:	3001      	adds	r0, #1
 8003d70:	d14c      	bne.n	8003e0c <_printf_i+0x200>
 8003d72:	f04f 30ff 	mov.w	r0, #4294967295
 8003d76:	b004      	add	sp, #16
 8003d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d7c:	4834      	ldr	r0, [pc, #208]	; (8003e50 <_printf_i+0x244>)
 8003d7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d82:	680e      	ldr	r6, [r1, #0]
 8003d84:	6823      	ldr	r3, [r4, #0]
 8003d86:	f856 5b04 	ldr.w	r5, [r6], #4
 8003d8a:	061f      	lsls	r7, r3, #24
 8003d8c:	600e      	str	r6, [r1, #0]
 8003d8e:	d514      	bpl.n	8003dba <_printf_i+0x1ae>
 8003d90:	07d9      	lsls	r1, r3, #31
 8003d92:	bf44      	itt	mi
 8003d94:	f043 0320 	orrmi.w	r3, r3, #32
 8003d98:	6023      	strmi	r3, [r4, #0]
 8003d9a:	b91d      	cbnz	r5, 8003da4 <_printf_i+0x198>
 8003d9c:	6823      	ldr	r3, [r4, #0]
 8003d9e:	f023 0320 	bic.w	r3, r3, #32
 8003da2:	6023      	str	r3, [r4, #0]
 8003da4:	2310      	movs	r3, #16
 8003da6:	e7af      	b.n	8003d08 <_printf_i+0xfc>
 8003da8:	6823      	ldr	r3, [r4, #0]
 8003daa:	f043 0320 	orr.w	r3, r3, #32
 8003dae:	6023      	str	r3, [r4, #0]
 8003db0:	2378      	movs	r3, #120	; 0x78
 8003db2:	4828      	ldr	r0, [pc, #160]	; (8003e54 <_printf_i+0x248>)
 8003db4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003db8:	e7e3      	b.n	8003d82 <_printf_i+0x176>
 8003dba:	065e      	lsls	r6, r3, #25
 8003dbc:	bf48      	it	mi
 8003dbe:	b2ad      	uxthmi	r5, r5
 8003dc0:	e7e6      	b.n	8003d90 <_printf_i+0x184>
 8003dc2:	4616      	mov	r6, r2
 8003dc4:	e7bb      	b.n	8003d3e <_printf_i+0x132>
 8003dc6:	680b      	ldr	r3, [r1, #0]
 8003dc8:	6826      	ldr	r6, [r4, #0]
 8003dca:	1d1d      	adds	r5, r3, #4
 8003dcc:	6960      	ldr	r0, [r4, #20]
 8003dce:	600d      	str	r5, [r1, #0]
 8003dd0:	0635      	lsls	r5, r6, #24
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	d501      	bpl.n	8003dda <_printf_i+0x1ce>
 8003dd6:	6018      	str	r0, [r3, #0]
 8003dd8:	e002      	b.n	8003de0 <_printf_i+0x1d4>
 8003dda:	0671      	lsls	r1, r6, #25
 8003ddc:	d5fb      	bpl.n	8003dd6 <_printf_i+0x1ca>
 8003dde:	8018      	strh	r0, [r3, #0]
 8003de0:	2300      	movs	r3, #0
 8003de2:	4616      	mov	r6, r2
 8003de4:	6123      	str	r3, [r4, #16]
 8003de6:	e7ba      	b.n	8003d5e <_printf_i+0x152>
 8003de8:	680b      	ldr	r3, [r1, #0]
 8003dea:	1d1a      	adds	r2, r3, #4
 8003dec:	600a      	str	r2, [r1, #0]
 8003dee:	681e      	ldr	r6, [r3, #0]
 8003df0:	2100      	movs	r1, #0
 8003df2:	4630      	mov	r0, r6
 8003df4:	6862      	ldr	r2, [r4, #4]
 8003df6:	f000 f82f 	bl	8003e58 <memchr>
 8003dfa:	b108      	cbz	r0, 8003e00 <_printf_i+0x1f4>
 8003dfc:	1b80      	subs	r0, r0, r6
 8003dfe:	6060      	str	r0, [r4, #4]
 8003e00:	6863      	ldr	r3, [r4, #4]
 8003e02:	6123      	str	r3, [r4, #16]
 8003e04:	2300      	movs	r3, #0
 8003e06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e0a:	e7a8      	b.n	8003d5e <_printf_i+0x152>
 8003e0c:	4632      	mov	r2, r6
 8003e0e:	4649      	mov	r1, r9
 8003e10:	4640      	mov	r0, r8
 8003e12:	6923      	ldr	r3, [r4, #16]
 8003e14:	47d0      	blx	sl
 8003e16:	3001      	adds	r0, #1
 8003e18:	d0ab      	beq.n	8003d72 <_printf_i+0x166>
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	079b      	lsls	r3, r3, #30
 8003e1e:	d413      	bmi.n	8003e48 <_printf_i+0x23c>
 8003e20:	68e0      	ldr	r0, [r4, #12]
 8003e22:	9b03      	ldr	r3, [sp, #12]
 8003e24:	4298      	cmp	r0, r3
 8003e26:	bfb8      	it	lt
 8003e28:	4618      	movlt	r0, r3
 8003e2a:	e7a4      	b.n	8003d76 <_printf_i+0x16a>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	4632      	mov	r2, r6
 8003e30:	4649      	mov	r1, r9
 8003e32:	4640      	mov	r0, r8
 8003e34:	47d0      	blx	sl
 8003e36:	3001      	adds	r0, #1
 8003e38:	d09b      	beq.n	8003d72 <_printf_i+0x166>
 8003e3a:	3501      	adds	r5, #1
 8003e3c:	68e3      	ldr	r3, [r4, #12]
 8003e3e:	9903      	ldr	r1, [sp, #12]
 8003e40:	1a5b      	subs	r3, r3, r1
 8003e42:	42ab      	cmp	r3, r5
 8003e44:	dcf2      	bgt.n	8003e2c <_printf_i+0x220>
 8003e46:	e7eb      	b.n	8003e20 <_printf_i+0x214>
 8003e48:	2500      	movs	r5, #0
 8003e4a:	f104 0619 	add.w	r6, r4, #25
 8003e4e:	e7f5      	b.n	8003e3c <_printf_i+0x230>
 8003e50:	08005dda 	.word	0x08005dda
 8003e54:	08005deb 	.word	0x08005deb

08003e58 <memchr>:
 8003e58:	4603      	mov	r3, r0
 8003e5a:	b510      	push	{r4, lr}
 8003e5c:	b2c9      	uxtb	r1, r1
 8003e5e:	4402      	add	r2, r0
 8003e60:	4293      	cmp	r3, r2
 8003e62:	4618      	mov	r0, r3
 8003e64:	d101      	bne.n	8003e6a <memchr+0x12>
 8003e66:	2000      	movs	r0, #0
 8003e68:	e003      	b.n	8003e72 <memchr+0x1a>
 8003e6a:	7804      	ldrb	r4, [r0, #0]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	428c      	cmp	r4, r1
 8003e70:	d1f6      	bne.n	8003e60 <memchr+0x8>
 8003e72:	bd10      	pop	{r4, pc}

08003e74 <memcpy>:
 8003e74:	440a      	add	r2, r1
 8003e76:	4291      	cmp	r1, r2
 8003e78:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e7c:	d100      	bne.n	8003e80 <memcpy+0xc>
 8003e7e:	4770      	bx	lr
 8003e80:	b510      	push	{r4, lr}
 8003e82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e86:	4291      	cmp	r1, r2
 8003e88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e8c:	d1f9      	bne.n	8003e82 <memcpy+0xe>
 8003e8e:	bd10      	pop	{r4, pc}

08003e90 <memmove>:
 8003e90:	4288      	cmp	r0, r1
 8003e92:	b510      	push	{r4, lr}
 8003e94:	eb01 0402 	add.w	r4, r1, r2
 8003e98:	d902      	bls.n	8003ea0 <memmove+0x10>
 8003e9a:	4284      	cmp	r4, r0
 8003e9c:	4623      	mov	r3, r4
 8003e9e:	d807      	bhi.n	8003eb0 <memmove+0x20>
 8003ea0:	1e43      	subs	r3, r0, #1
 8003ea2:	42a1      	cmp	r1, r4
 8003ea4:	d008      	beq.n	8003eb8 <memmove+0x28>
 8003ea6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003eaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003eae:	e7f8      	b.n	8003ea2 <memmove+0x12>
 8003eb0:	4601      	mov	r1, r0
 8003eb2:	4402      	add	r2, r0
 8003eb4:	428a      	cmp	r2, r1
 8003eb6:	d100      	bne.n	8003eba <memmove+0x2a>
 8003eb8:	bd10      	pop	{r4, pc}
 8003eba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ebe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ec2:	e7f7      	b.n	8003eb4 <memmove+0x24>

08003ec4 <_free_r>:
 8003ec4:	b538      	push	{r3, r4, r5, lr}
 8003ec6:	4605      	mov	r5, r0
 8003ec8:	2900      	cmp	r1, #0
 8003eca:	d043      	beq.n	8003f54 <_free_r+0x90>
 8003ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ed0:	1f0c      	subs	r4, r1, #4
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	bfb8      	it	lt
 8003ed6:	18e4      	addlt	r4, r4, r3
 8003ed8:	f000 f8d0 	bl	800407c <__malloc_lock>
 8003edc:	4a1e      	ldr	r2, [pc, #120]	; (8003f58 <_free_r+0x94>)
 8003ede:	6813      	ldr	r3, [r2, #0]
 8003ee0:	4610      	mov	r0, r2
 8003ee2:	b933      	cbnz	r3, 8003ef2 <_free_r+0x2e>
 8003ee4:	6063      	str	r3, [r4, #4]
 8003ee6:	6014      	str	r4, [r2, #0]
 8003ee8:	4628      	mov	r0, r5
 8003eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003eee:	f000 b8cb 	b.w	8004088 <__malloc_unlock>
 8003ef2:	42a3      	cmp	r3, r4
 8003ef4:	d90a      	bls.n	8003f0c <_free_r+0x48>
 8003ef6:	6821      	ldr	r1, [r4, #0]
 8003ef8:	1862      	adds	r2, r4, r1
 8003efa:	4293      	cmp	r3, r2
 8003efc:	bf01      	itttt	eq
 8003efe:	681a      	ldreq	r2, [r3, #0]
 8003f00:	685b      	ldreq	r3, [r3, #4]
 8003f02:	1852      	addeq	r2, r2, r1
 8003f04:	6022      	streq	r2, [r4, #0]
 8003f06:	6063      	str	r3, [r4, #4]
 8003f08:	6004      	str	r4, [r0, #0]
 8003f0a:	e7ed      	b.n	8003ee8 <_free_r+0x24>
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	b10b      	cbz	r3, 8003f16 <_free_r+0x52>
 8003f12:	42a3      	cmp	r3, r4
 8003f14:	d9fa      	bls.n	8003f0c <_free_r+0x48>
 8003f16:	6811      	ldr	r1, [r2, #0]
 8003f18:	1850      	adds	r0, r2, r1
 8003f1a:	42a0      	cmp	r0, r4
 8003f1c:	d10b      	bne.n	8003f36 <_free_r+0x72>
 8003f1e:	6820      	ldr	r0, [r4, #0]
 8003f20:	4401      	add	r1, r0
 8003f22:	1850      	adds	r0, r2, r1
 8003f24:	4283      	cmp	r3, r0
 8003f26:	6011      	str	r1, [r2, #0]
 8003f28:	d1de      	bne.n	8003ee8 <_free_r+0x24>
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	4401      	add	r1, r0
 8003f30:	6011      	str	r1, [r2, #0]
 8003f32:	6053      	str	r3, [r2, #4]
 8003f34:	e7d8      	b.n	8003ee8 <_free_r+0x24>
 8003f36:	d902      	bls.n	8003f3e <_free_r+0x7a>
 8003f38:	230c      	movs	r3, #12
 8003f3a:	602b      	str	r3, [r5, #0]
 8003f3c:	e7d4      	b.n	8003ee8 <_free_r+0x24>
 8003f3e:	6820      	ldr	r0, [r4, #0]
 8003f40:	1821      	adds	r1, r4, r0
 8003f42:	428b      	cmp	r3, r1
 8003f44:	bf01      	itttt	eq
 8003f46:	6819      	ldreq	r1, [r3, #0]
 8003f48:	685b      	ldreq	r3, [r3, #4]
 8003f4a:	1809      	addeq	r1, r1, r0
 8003f4c:	6021      	streq	r1, [r4, #0]
 8003f4e:	6063      	str	r3, [r4, #4]
 8003f50:	6054      	str	r4, [r2, #4]
 8003f52:	e7c9      	b.n	8003ee8 <_free_r+0x24>
 8003f54:	bd38      	pop	{r3, r4, r5, pc}
 8003f56:	bf00      	nop
 8003f58:	200000b4 	.word	0x200000b4

08003f5c <_malloc_r>:
 8003f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5e:	1ccd      	adds	r5, r1, #3
 8003f60:	f025 0503 	bic.w	r5, r5, #3
 8003f64:	3508      	adds	r5, #8
 8003f66:	2d0c      	cmp	r5, #12
 8003f68:	bf38      	it	cc
 8003f6a:	250c      	movcc	r5, #12
 8003f6c:	2d00      	cmp	r5, #0
 8003f6e:	4606      	mov	r6, r0
 8003f70:	db01      	blt.n	8003f76 <_malloc_r+0x1a>
 8003f72:	42a9      	cmp	r1, r5
 8003f74:	d903      	bls.n	8003f7e <_malloc_r+0x22>
 8003f76:	230c      	movs	r3, #12
 8003f78:	6033      	str	r3, [r6, #0]
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f7e:	f000 f87d 	bl	800407c <__malloc_lock>
 8003f82:	4921      	ldr	r1, [pc, #132]	; (8004008 <_malloc_r+0xac>)
 8003f84:	680a      	ldr	r2, [r1, #0]
 8003f86:	4614      	mov	r4, r2
 8003f88:	b99c      	cbnz	r4, 8003fb2 <_malloc_r+0x56>
 8003f8a:	4f20      	ldr	r7, [pc, #128]	; (800400c <_malloc_r+0xb0>)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	b923      	cbnz	r3, 8003f9a <_malloc_r+0x3e>
 8003f90:	4621      	mov	r1, r4
 8003f92:	4630      	mov	r0, r6
 8003f94:	f000 f862 	bl	800405c <_sbrk_r>
 8003f98:	6038      	str	r0, [r7, #0]
 8003f9a:	4629      	mov	r1, r5
 8003f9c:	4630      	mov	r0, r6
 8003f9e:	f000 f85d 	bl	800405c <_sbrk_r>
 8003fa2:	1c43      	adds	r3, r0, #1
 8003fa4:	d123      	bne.n	8003fee <_malloc_r+0x92>
 8003fa6:	230c      	movs	r3, #12
 8003fa8:	4630      	mov	r0, r6
 8003faa:	6033      	str	r3, [r6, #0]
 8003fac:	f000 f86c 	bl	8004088 <__malloc_unlock>
 8003fb0:	e7e3      	b.n	8003f7a <_malloc_r+0x1e>
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	1b5b      	subs	r3, r3, r5
 8003fb6:	d417      	bmi.n	8003fe8 <_malloc_r+0x8c>
 8003fb8:	2b0b      	cmp	r3, #11
 8003fba:	d903      	bls.n	8003fc4 <_malloc_r+0x68>
 8003fbc:	6023      	str	r3, [r4, #0]
 8003fbe:	441c      	add	r4, r3
 8003fc0:	6025      	str	r5, [r4, #0]
 8003fc2:	e004      	b.n	8003fce <_malloc_r+0x72>
 8003fc4:	6863      	ldr	r3, [r4, #4]
 8003fc6:	42a2      	cmp	r2, r4
 8003fc8:	bf0c      	ite	eq
 8003fca:	600b      	streq	r3, [r1, #0]
 8003fcc:	6053      	strne	r3, [r2, #4]
 8003fce:	4630      	mov	r0, r6
 8003fd0:	f000 f85a 	bl	8004088 <__malloc_unlock>
 8003fd4:	f104 000b 	add.w	r0, r4, #11
 8003fd8:	1d23      	adds	r3, r4, #4
 8003fda:	f020 0007 	bic.w	r0, r0, #7
 8003fde:	1ac2      	subs	r2, r0, r3
 8003fe0:	d0cc      	beq.n	8003f7c <_malloc_r+0x20>
 8003fe2:	1a1b      	subs	r3, r3, r0
 8003fe4:	50a3      	str	r3, [r4, r2]
 8003fe6:	e7c9      	b.n	8003f7c <_malloc_r+0x20>
 8003fe8:	4622      	mov	r2, r4
 8003fea:	6864      	ldr	r4, [r4, #4]
 8003fec:	e7cc      	b.n	8003f88 <_malloc_r+0x2c>
 8003fee:	1cc4      	adds	r4, r0, #3
 8003ff0:	f024 0403 	bic.w	r4, r4, #3
 8003ff4:	42a0      	cmp	r0, r4
 8003ff6:	d0e3      	beq.n	8003fc0 <_malloc_r+0x64>
 8003ff8:	1a21      	subs	r1, r4, r0
 8003ffa:	4630      	mov	r0, r6
 8003ffc:	f000 f82e 	bl	800405c <_sbrk_r>
 8004000:	3001      	adds	r0, #1
 8004002:	d1dd      	bne.n	8003fc0 <_malloc_r+0x64>
 8004004:	e7cf      	b.n	8003fa6 <_malloc_r+0x4a>
 8004006:	bf00      	nop
 8004008:	200000b4 	.word	0x200000b4
 800400c:	200000b8 	.word	0x200000b8

08004010 <_realloc_r>:
 8004010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004012:	4607      	mov	r7, r0
 8004014:	4614      	mov	r4, r2
 8004016:	460e      	mov	r6, r1
 8004018:	b921      	cbnz	r1, 8004024 <_realloc_r+0x14>
 800401a:	4611      	mov	r1, r2
 800401c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004020:	f7ff bf9c 	b.w	8003f5c <_malloc_r>
 8004024:	b922      	cbnz	r2, 8004030 <_realloc_r+0x20>
 8004026:	f7ff ff4d 	bl	8003ec4 <_free_r>
 800402a:	4625      	mov	r5, r4
 800402c:	4628      	mov	r0, r5
 800402e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004030:	f000 f830 	bl	8004094 <_malloc_usable_size_r>
 8004034:	42a0      	cmp	r0, r4
 8004036:	d20f      	bcs.n	8004058 <_realloc_r+0x48>
 8004038:	4621      	mov	r1, r4
 800403a:	4638      	mov	r0, r7
 800403c:	f7ff ff8e 	bl	8003f5c <_malloc_r>
 8004040:	4605      	mov	r5, r0
 8004042:	2800      	cmp	r0, #0
 8004044:	d0f2      	beq.n	800402c <_realloc_r+0x1c>
 8004046:	4631      	mov	r1, r6
 8004048:	4622      	mov	r2, r4
 800404a:	f7ff ff13 	bl	8003e74 <memcpy>
 800404e:	4631      	mov	r1, r6
 8004050:	4638      	mov	r0, r7
 8004052:	f7ff ff37 	bl	8003ec4 <_free_r>
 8004056:	e7e9      	b.n	800402c <_realloc_r+0x1c>
 8004058:	4635      	mov	r5, r6
 800405a:	e7e7      	b.n	800402c <_realloc_r+0x1c>

0800405c <_sbrk_r>:
 800405c:	b538      	push	{r3, r4, r5, lr}
 800405e:	2300      	movs	r3, #0
 8004060:	4d05      	ldr	r5, [pc, #20]	; (8004078 <_sbrk_r+0x1c>)
 8004062:	4604      	mov	r4, r0
 8004064:	4608      	mov	r0, r1
 8004066:	602b      	str	r3, [r5, #0]
 8004068:	f7fd fa86 	bl	8001578 <_sbrk>
 800406c:	1c43      	adds	r3, r0, #1
 800406e:	d102      	bne.n	8004076 <_sbrk_r+0x1a>
 8004070:	682b      	ldr	r3, [r5, #0]
 8004072:	b103      	cbz	r3, 8004076 <_sbrk_r+0x1a>
 8004074:	6023      	str	r3, [r4, #0]
 8004076:	bd38      	pop	{r3, r4, r5, pc}
 8004078:	20000328 	.word	0x20000328

0800407c <__malloc_lock>:
 800407c:	4801      	ldr	r0, [pc, #4]	; (8004084 <__malloc_lock+0x8>)
 800407e:	f000 b811 	b.w	80040a4 <__retarget_lock_acquire_recursive>
 8004082:	bf00      	nop
 8004084:	20000330 	.word	0x20000330

08004088 <__malloc_unlock>:
 8004088:	4801      	ldr	r0, [pc, #4]	; (8004090 <__malloc_unlock+0x8>)
 800408a:	f000 b80c 	b.w	80040a6 <__retarget_lock_release_recursive>
 800408e:	bf00      	nop
 8004090:	20000330 	.word	0x20000330

08004094 <_malloc_usable_size_r>:
 8004094:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004098:	1f18      	subs	r0, r3, #4
 800409a:	2b00      	cmp	r3, #0
 800409c:	bfbc      	itt	lt
 800409e:	580b      	ldrlt	r3, [r1, r0]
 80040a0:	18c0      	addlt	r0, r0, r3
 80040a2:	4770      	bx	lr

080040a4 <__retarget_lock_acquire_recursive>:
 80040a4:	4770      	bx	lr

080040a6 <__retarget_lock_release_recursive>:
 80040a6:	4770      	bx	lr

080040a8 <tan>:
 80040a8:	b530      	push	{r4, r5, lr}
 80040aa:	4a12      	ldr	r2, [pc, #72]	; (80040f4 <tan+0x4c>)
 80040ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80040b0:	4293      	cmp	r3, r2
 80040b2:	b087      	sub	sp, #28
 80040b4:	dc06      	bgt.n	80040c4 <tan+0x1c>
 80040b6:	2301      	movs	r3, #1
 80040b8:	2200      	movs	r2, #0
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	2300      	movs	r3, #0
 80040be:	f000 ff17 	bl	8004ef0 <__kernel_tan>
 80040c2:	e006      	b.n	80040d2 <tan+0x2a>
 80040c4:	4a0c      	ldr	r2, [pc, #48]	; (80040f8 <tan+0x50>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	dd05      	ble.n	80040d6 <tan+0x2e>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	f7fc f84b 	bl	8000168 <__aeabi_dsub>
 80040d2:	b007      	add	sp, #28
 80040d4:	bd30      	pop	{r4, r5, pc}
 80040d6:	aa02      	add	r2, sp, #8
 80040d8:	f000 f872 	bl	80041c0 <__ieee754_rem_pio2>
 80040dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040e0:	0040      	lsls	r0, r0, #1
 80040e2:	f000 0002 	and.w	r0, r0, #2
 80040e6:	f1c0 0001 	rsb	r0, r0, #1
 80040ea:	9000      	str	r0, [sp, #0]
 80040ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040f0:	e7e5      	b.n	80040be <tan+0x16>
 80040f2:	bf00      	nop
 80040f4:	3fe921fb 	.word	0x3fe921fb
 80040f8:	7fefffff 	.word	0x7fefffff

080040fc <fmaxf>:
 80040fc:	b538      	push	{r3, r4, r5, lr}
 80040fe:	4604      	mov	r4, r0
 8004100:	460d      	mov	r5, r1
 8004102:	f000 f80d 	bl	8004120 <__fpclassifyf>
 8004106:	b140      	cbz	r0, 800411a <fmaxf+0x1e>
 8004108:	4628      	mov	r0, r5
 800410a:	f000 f809 	bl	8004120 <__fpclassifyf>
 800410e:	b128      	cbz	r0, 800411c <fmaxf+0x20>
 8004110:	4629      	mov	r1, r5
 8004112:	4620      	mov	r0, r4
 8004114:	f7fc ffbc 	bl	8001090 <__aeabi_fcmpgt>
 8004118:	b900      	cbnz	r0, 800411c <fmaxf+0x20>
 800411a:	462c      	mov	r4, r5
 800411c:	4620      	mov	r0, r4
 800411e:	bd38      	pop	{r3, r4, r5, pc}

08004120 <__fpclassifyf>:
 8004120:	f030 4000 	bics.w	r0, r0, #2147483648	; 0x80000000
 8004124:	d00d      	beq.n	8004142 <__fpclassifyf+0x22>
 8004126:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800412a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800412e:	d30a      	bcc.n	8004146 <__fpclassifyf+0x26>
 8004130:	4b07      	ldr	r3, [pc, #28]	; (8004150 <__fpclassifyf+0x30>)
 8004132:	1e42      	subs	r2, r0, #1
 8004134:	429a      	cmp	r2, r3
 8004136:	d908      	bls.n	800414a <__fpclassifyf+0x2a>
 8004138:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800413c:	4258      	negs	r0, r3
 800413e:	4158      	adcs	r0, r3
 8004140:	4770      	bx	lr
 8004142:	2002      	movs	r0, #2
 8004144:	4770      	bx	lr
 8004146:	2004      	movs	r0, #4
 8004148:	4770      	bx	lr
 800414a:	2003      	movs	r0, #3
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	007ffffe 	.word	0x007ffffe

08004154 <sinf>:
 8004154:	b507      	push	{r0, r1, r2, lr}
 8004156:	4a19      	ldr	r2, [pc, #100]	; (80041bc <sinf+0x68>)
 8004158:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800415c:	4293      	cmp	r3, r2
 800415e:	4601      	mov	r1, r0
 8004160:	dc04      	bgt.n	800416c <sinf+0x18>
 8004162:	2200      	movs	r2, #0
 8004164:	2100      	movs	r1, #0
 8004166:	f001 fbbd 	bl	80058e4 <__kernel_sinf>
 800416a:	e004      	b.n	8004176 <sinf+0x22>
 800416c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004170:	db04      	blt.n	800417c <sinf+0x28>
 8004172:	f7fc fcc7 	bl	8000b04 <__aeabi_fsub>
 8004176:	b003      	add	sp, #12
 8004178:	f85d fb04 	ldr.w	pc, [sp], #4
 800417c:	4669      	mov	r1, sp
 800417e:	f000 fa0f 	bl	80045a0 <__ieee754_rem_pio2f>
 8004182:	f000 0003 	and.w	r0, r0, #3
 8004186:	2801      	cmp	r0, #1
 8004188:	d006      	beq.n	8004198 <sinf+0x44>
 800418a:	2802      	cmp	r0, #2
 800418c:	d009      	beq.n	80041a2 <sinf+0x4e>
 800418e:	b980      	cbnz	r0, 80041b2 <sinf+0x5e>
 8004190:	2201      	movs	r2, #1
 8004192:	9901      	ldr	r1, [sp, #4]
 8004194:	9800      	ldr	r0, [sp, #0]
 8004196:	e7e6      	b.n	8004166 <sinf+0x12>
 8004198:	9901      	ldr	r1, [sp, #4]
 800419a:	9800      	ldr	r0, [sp, #0]
 800419c:	f001 f86c 	bl	8005278 <__kernel_cosf>
 80041a0:	e7e9      	b.n	8004176 <sinf+0x22>
 80041a2:	2201      	movs	r2, #1
 80041a4:	9901      	ldr	r1, [sp, #4]
 80041a6:	9800      	ldr	r0, [sp, #0]
 80041a8:	f001 fb9c 	bl	80058e4 <__kernel_sinf>
 80041ac:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80041b0:	e7e1      	b.n	8004176 <sinf+0x22>
 80041b2:	9901      	ldr	r1, [sp, #4]
 80041b4:	9800      	ldr	r0, [sp, #0]
 80041b6:	f001 f85f 	bl	8005278 <__kernel_cosf>
 80041ba:	e7f7      	b.n	80041ac <sinf+0x58>
 80041bc:	3f490fd8 	.word	0x3f490fd8

080041c0 <__ieee754_rem_pio2>:
 80041c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c4:	4614      	mov	r4, r2
 80041c6:	4ac4      	ldr	r2, [pc, #784]	; (80044d8 <__ieee754_rem_pio2+0x318>)
 80041c8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80041cc:	b08d      	sub	sp, #52	; 0x34
 80041ce:	4592      	cmp	sl, r2
 80041d0:	9104      	str	r1, [sp, #16]
 80041d2:	dc07      	bgt.n	80041e4 <__ieee754_rem_pio2+0x24>
 80041d4:	2200      	movs	r2, #0
 80041d6:	2300      	movs	r3, #0
 80041d8:	e9c4 0100 	strd	r0, r1, [r4]
 80041dc:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80041e0:	2500      	movs	r5, #0
 80041e2:	e024      	b.n	800422e <__ieee754_rem_pio2+0x6e>
 80041e4:	4abd      	ldr	r2, [pc, #756]	; (80044dc <__ieee754_rem_pio2+0x31c>)
 80041e6:	4592      	cmp	sl, r2
 80041e8:	dc72      	bgt.n	80042d0 <__ieee754_rem_pio2+0x110>
 80041ea:	9b04      	ldr	r3, [sp, #16]
 80041ec:	4dbc      	ldr	r5, [pc, #752]	; (80044e0 <__ieee754_rem_pio2+0x320>)
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	a3ab      	add	r3, pc, #684	; (adr r3, 80044a0 <__ieee754_rem_pio2+0x2e0>)
 80041f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f6:	dd36      	ble.n	8004266 <__ieee754_rem_pio2+0xa6>
 80041f8:	f7fb ffb6 	bl	8000168 <__aeabi_dsub>
 80041fc:	45aa      	cmp	sl, r5
 80041fe:	4606      	mov	r6, r0
 8004200:	460f      	mov	r7, r1
 8004202:	d018      	beq.n	8004236 <__ieee754_rem_pio2+0x76>
 8004204:	a3a8      	add	r3, pc, #672	; (adr r3, 80044a8 <__ieee754_rem_pio2+0x2e8>)
 8004206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420a:	f7fb ffad 	bl	8000168 <__aeabi_dsub>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4630      	mov	r0, r6
 8004214:	e9c4 2300 	strd	r2, r3, [r4]
 8004218:	4639      	mov	r1, r7
 800421a:	f7fb ffa5 	bl	8000168 <__aeabi_dsub>
 800421e:	a3a2      	add	r3, pc, #648	; (adr r3, 80044a8 <__ieee754_rem_pio2+0x2e8>)
 8004220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004224:	f7fb ffa0 	bl	8000168 <__aeabi_dsub>
 8004228:	2501      	movs	r5, #1
 800422a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800422e:	4628      	mov	r0, r5
 8004230:	b00d      	add	sp, #52	; 0x34
 8004232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004236:	a39e      	add	r3, pc, #632	; (adr r3, 80044b0 <__ieee754_rem_pio2+0x2f0>)
 8004238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423c:	f7fb ff94 	bl	8000168 <__aeabi_dsub>
 8004240:	a39d      	add	r3, pc, #628	; (adr r3, 80044b8 <__ieee754_rem_pio2+0x2f8>)
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	4606      	mov	r6, r0
 8004248:	460f      	mov	r7, r1
 800424a:	f7fb ff8d 	bl	8000168 <__aeabi_dsub>
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	4630      	mov	r0, r6
 8004254:	e9c4 2300 	strd	r2, r3, [r4]
 8004258:	4639      	mov	r1, r7
 800425a:	f7fb ff85 	bl	8000168 <__aeabi_dsub>
 800425e:	a396      	add	r3, pc, #600	; (adr r3, 80044b8 <__ieee754_rem_pio2+0x2f8>)
 8004260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004264:	e7de      	b.n	8004224 <__ieee754_rem_pio2+0x64>
 8004266:	f7fb ff81 	bl	800016c <__adddf3>
 800426a:	45aa      	cmp	sl, r5
 800426c:	4606      	mov	r6, r0
 800426e:	460f      	mov	r7, r1
 8004270:	d016      	beq.n	80042a0 <__ieee754_rem_pio2+0xe0>
 8004272:	a38d      	add	r3, pc, #564	; (adr r3, 80044a8 <__ieee754_rem_pio2+0x2e8>)
 8004274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004278:	f7fb ff78 	bl	800016c <__adddf3>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	4630      	mov	r0, r6
 8004282:	e9c4 2300 	strd	r2, r3, [r4]
 8004286:	4639      	mov	r1, r7
 8004288:	f7fb ff6e 	bl	8000168 <__aeabi_dsub>
 800428c:	a386      	add	r3, pc, #536	; (adr r3, 80044a8 <__ieee754_rem_pio2+0x2e8>)
 800428e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004292:	f7fb ff6b 	bl	800016c <__adddf3>
 8004296:	f04f 35ff 	mov.w	r5, #4294967295
 800429a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800429e:	e7c6      	b.n	800422e <__ieee754_rem_pio2+0x6e>
 80042a0:	a383      	add	r3, pc, #524	; (adr r3, 80044b0 <__ieee754_rem_pio2+0x2f0>)
 80042a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a6:	f7fb ff61 	bl	800016c <__adddf3>
 80042aa:	a383      	add	r3, pc, #524	; (adr r3, 80044b8 <__ieee754_rem_pio2+0x2f8>)
 80042ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b0:	4606      	mov	r6, r0
 80042b2:	460f      	mov	r7, r1
 80042b4:	f7fb ff5a 	bl	800016c <__adddf3>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	4630      	mov	r0, r6
 80042be:	e9c4 2300 	strd	r2, r3, [r4]
 80042c2:	4639      	mov	r1, r7
 80042c4:	f7fb ff50 	bl	8000168 <__aeabi_dsub>
 80042c8:	a37b      	add	r3, pc, #492	; (adr r3, 80044b8 <__ieee754_rem_pio2+0x2f8>)
 80042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ce:	e7e0      	b.n	8004292 <__ieee754_rem_pio2+0xd2>
 80042d0:	4a84      	ldr	r2, [pc, #528]	; (80044e4 <__ieee754_rem_pio2+0x324>)
 80042d2:	4592      	cmp	sl, r2
 80042d4:	f300 80d5 	bgt.w	8004482 <__ieee754_rem_pio2+0x2c2>
 80042d8:	f001 fb7a 	bl	80059d0 <fabs>
 80042dc:	a378      	add	r3, pc, #480	; (adr r3, 80044c0 <__ieee754_rem_pio2+0x300>)
 80042de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e2:	4606      	mov	r6, r0
 80042e4:	460f      	mov	r7, r1
 80042e6:	f7fc f8f7 	bl	80004d8 <__aeabi_dmul>
 80042ea:	2200      	movs	r2, #0
 80042ec:	4b7e      	ldr	r3, [pc, #504]	; (80044e8 <__ieee754_rem_pio2+0x328>)
 80042ee:	f7fb ff3d 	bl	800016c <__adddf3>
 80042f2:	f7fc fb8b 	bl	8000a0c <__aeabi_d2iz>
 80042f6:	4605      	mov	r5, r0
 80042f8:	f7fc f884 	bl	8000404 <__aeabi_i2d>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004304:	a366      	add	r3, pc, #408	; (adr r3, 80044a0 <__ieee754_rem_pio2+0x2e0>)
 8004306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430a:	f7fc f8e5 	bl	80004d8 <__aeabi_dmul>
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	4630      	mov	r0, r6
 8004314:	4639      	mov	r1, r7
 8004316:	f7fb ff27 	bl	8000168 <__aeabi_dsub>
 800431a:	a363      	add	r3, pc, #396	; (adr r3, 80044a8 <__ieee754_rem_pio2+0x2e8>)
 800431c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004320:	4680      	mov	r8, r0
 8004322:	4689      	mov	r9, r1
 8004324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004328:	f7fc f8d6 	bl	80004d8 <__aeabi_dmul>
 800432c:	2d1f      	cmp	r5, #31
 800432e:	4606      	mov	r6, r0
 8004330:	460f      	mov	r7, r1
 8004332:	dc0e      	bgt.n	8004352 <__ieee754_rem_pio2+0x192>
 8004334:	4b6d      	ldr	r3, [pc, #436]	; (80044ec <__ieee754_rem_pio2+0x32c>)
 8004336:	1e6a      	subs	r2, r5, #1
 8004338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800433c:	4553      	cmp	r3, sl
 800433e:	d008      	beq.n	8004352 <__ieee754_rem_pio2+0x192>
 8004340:	4632      	mov	r2, r6
 8004342:	463b      	mov	r3, r7
 8004344:	4640      	mov	r0, r8
 8004346:	4649      	mov	r1, r9
 8004348:	f7fb ff0e 	bl	8000168 <__aeabi_dsub>
 800434c:	e9c4 0100 	strd	r0, r1, [r4]
 8004350:	e013      	b.n	800437a <__ieee754_rem_pio2+0x1ba>
 8004352:	463b      	mov	r3, r7
 8004354:	4632      	mov	r2, r6
 8004356:	4640      	mov	r0, r8
 8004358:	4649      	mov	r1, r9
 800435a:	f7fb ff05 	bl	8000168 <__aeabi_dsub>
 800435e:	ea4f 532a 	mov.w	r3, sl, asr #20
 8004362:	9305      	str	r3, [sp, #20]
 8004364:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004368:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800436c:	f1ba 0f10 	cmp.w	sl, #16
 8004370:	dc1f      	bgt.n	80043b2 <__ieee754_rem_pio2+0x1f2>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	e9c4 2300 	strd	r2, r3, [r4]
 800437a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800437e:	4640      	mov	r0, r8
 8004380:	4653      	mov	r3, sl
 8004382:	4649      	mov	r1, r9
 8004384:	f7fb fef0 	bl	8000168 <__aeabi_dsub>
 8004388:	4632      	mov	r2, r6
 800438a:	463b      	mov	r3, r7
 800438c:	f7fb feec 	bl	8000168 <__aeabi_dsub>
 8004390:	460b      	mov	r3, r1
 8004392:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004396:	9904      	ldr	r1, [sp, #16]
 8004398:	4602      	mov	r2, r0
 800439a:	2900      	cmp	r1, #0
 800439c:	f6bf af47 	bge.w	800422e <__ieee754_rem_pio2+0x6e>
 80043a0:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 80043a4:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80043a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80043ac:	60e3      	str	r3, [r4, #12]
 80043ae:	426d      	negs	r5, r5
 80043b0:	e73d      	b.n	800422e <__ieee754_rem_pio2+0x6e>
 80043b2:	a33f      	add	r3, pc, #252	; (adr r3, 80044b0 <__ieee754_rem_pio2+0x2f0>)
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043bc:	f7fc f88c 	bl	80004d8 <__aeabi_dmul>
 80043c0:	4606      	mov	r6, r0
 80043c2:	460f      	mov	r7, r1
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4640      	mov	r0, r8
 80043ca:	4649      	mov	r1, r9
 80043cc:	f7fb fecc 	bl	8000168 <__aeabi_dsub>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4682      	mov	sl, r0
 80043d6:	468b      	mov	fp, r1
 80043d8:	4640      	mov	r0, r8
 80043da:	4649      	mov	r1, r9
 80043dc:	f7fb fec4 	bl	8000168 <__aeabi_dsub>
 80043e0:	4632      	mov	r2, r6
 80043e2:	463b      	mov	r3, r7
 80043e4:	f7fb fec0 	bl	8000168 <__aeabi_dsub>
 80043e8:	a333      	add	r3, pc, #204	; (adr r3, 80044b8 <__ieee754_rem_pio2+0x2f8>)
 80043ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ee:	4606      	mov	r6, r0
 80043f0:	460f      	mov	r7, r1
 80043f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043f6:	f7fc f86f 	bl	80004d8 <__aeabi_dmul>
 80043fa:	4632      	mov	r2, r6
 80043fc:	463b      	mov	r3, r7
 80043fe:	f7fb feb3 	bl	8000168 <__aeabi_dsub>
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	4606      	mov	r6, r0
 8004408:	460f      	mov	r7, r1
 800440a:	4650      	mov	r0, sl
 800440c:	4659      	mov	r1, fp
 800440e:	f7fb feab 	bl	8000168 <__aeabi_dsub>
 8004412:	9a05      	ldr	r2, [sp, #20]
 8004414:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b31      	cmp	r3, #49	; 0x31
 800441c:	dc06      	bgt.n	800442c <__ieee754_rem_pio2+0x26c>
 800441e:	4602      	mov	r2, r0
 8004420:	460b      	mov	r3, r1
 8004422:	46d0      	mov	r8, sl
 8004424:	46d9      	mov	r9, fp
 8004426:	e9c4 2300 	strd	r2, r3, [r4]
 800442a:	e7a6      	b.n	800437a <__ieee754_rem_pio2+0x1ba>
 800442c:	a326      	add	r3, pc, #152	; (adr r3, 80044c8 <__ieee754_rem_pio2+0x308>)
 800442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004432:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004436:	f7fc f84f 	bl	80004d8 <__aeabi_dmul>
 800443a:	4606      	mov	r6, r0
 800443c:	460f      	mov	r7, r1
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4650      	mov	r0, sl
 8004444:	4659      	mov	r1, fp
 8004446:	f7fb fe8f 	bl	8000168 <__aeabi_dsub>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4680      	mov	r8, r0
 8004450:	4689      	mov	r9, r1
 8004452:	4650      	mov	r0, sl
 8004454:	4659      	mov	r1, fp
 8004456:	f7fb fe87 	bl	8000168 <__aeabi_dsub>
 800445a:	4632      	mov	r2, r6
 800445c:	463b      	mov	r3, r7
 800445e:	f7fb fe83 	bl	8000168 <__aeabi_dsub>
 8004462:	a31b      	add	r3, pc, #108	; (adr r3, 80044d0 <__ieee754_rem_pio2+0x310>)
 8004464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004468:	4606      	mov	r6, r0
 800446a:	460f      	mov	r7, r1
 800446c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004470:	f7fc f832 	bl	80004d8 <__aeabi_dmul>
 8004474:	4632      	mov	r2, r6
 8004476:	463b      	mov	r3, r7
 8004478:	f7fb fe76 	bl	8000168 <__aeabi_dsub>
 800447c:	4606      	mov	r6, r0
 800447e:	460f      	mov	r7, r1
 8004480:	e75e      	b.n	8004340 <__ieee754_rem_pio2+0x180>
 8004482:	4a1b      	ldr	r2, [pc, #108]	; (80044f0 <__ieee754_rem_pio2+0x330>)
 8004484:	4592      	cmp	sl, r2
 8004486:	dd35      	ble.n	80044f4 <__ieee754_rem_pio2+0x334>
 8004488:	4602      	mov	r2, r0
 800448a:	460b      	mov	r3, r1
 800448c:	f7fb fe6c 	bl	8000168 <__aeabi_dsub>
 8004490:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004494:	e9c4 0100 	strd	r0, r1, [r4]
 8004498:	e6a2      	b.n	80041e0 <__ieee754_rem_pio2+0x20>
 800449a:	bf00      	nop
 800449c:	f3af 8000 	nop.w
 80044a0:	54400000 	.word	0x54400000
 80044a4:	3ff921fb 	.word	0x3ff921fb
 80044a8:	1a626331 	.word	0x1a626331
 80044ac:	3dd0b461 	.word	0x3dd0b461
 80044b0:	1a600000 	.word	0x1a600000
 80044b4:	3dd0b461 	.word	0x3dd0b461
 80044b8:	2e037073 	.word	0x2e037073
 80044bc:	3ba3198a 	.word	0x3ba3198a
 80044c0:	6dc9c883 	.word	0x6dc9c883
 80044c4:	3fe45f30 	.word	0x3fe45f30
 80044c8:	2e000000 	.word	0x2e000000
 80044cc:	3ba3198a 	.word	0x3ba3198a
 80044d0:	252049c1 	.word	0x252049c1
 80044d4:	397b839a 	.word	0x397b839a
 80044d8:	3fe921fb 	.word	0x3fe921fb
 80044dc:	4002d97b 	.word	0x4002d97b
 80044e0:	3ff921fb 	.word	0x3ff921fb
 80044e4:	413921fb 	.word	0x413921fb
 80044e8:	3fe00000 	.word	0x3fe00000
 80044ec:	08005dfc 	.word	0x08005dfc
 80044f0:	7fefffff 	.word	0x7fefffff
 80044f4:	ea4f 552a 	mov.w	r5, sl, asr #20
 80044f8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80044fc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8004500:	460f      	mov	r7, r1
 8004502:	4606      	mov	r6, r0
 8004504:	f7fc fa82 	bl	8000a0c <__aeabi_d2iz>
 8004508:	f7fb ff7c 	bl	8000404 <__aeabi_i2d>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4630      	mov	r0, r6
 8004512:	4639      	mov	r1, r7
 8004514:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004518:	f7fb fe26 	bl	8000168 <__aeabi_dsub>
 800451c:	2200      	movs	r2, #0
 800451e:	4b1e      	ldr	r3, [pc, #120]	; (8004598 <__ieee754_rem_pio2+0x3d8>)
 8004520:	f7fb ffda 	bl	80004d8 <__aeabi_dmul>
 8004524:	460f      	mov	r7, r1
 8004526:	4606      	mov	r6, r0
 8004528:	f7fc fa70 	bl	8000a0c <__aeabi_d2iz>
 800452c:	f7fb ff6a 	bl	8000404 <__aeabi_i2d>
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	4630      	mov	r0, r6
 8004536:	4639      	mov	r1, r7
 8004538:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800453c:	f7fb fe14 	bl	8000168 <__aeabi_dsub>
 8004540:	2200      	movs	r2, #0
 8004542:	4b15      	ldr	r3, [pc, #84]	; (8004598 <__ieee754_rem_pio2+0x3d8>)
 8004544:	f7fb ffc8 	bl	80004d8 <__aeabi_dmul>
 8004548:	f04f 0803 	mov.w	r8, #3
 800454c:	2600      	movs	r6, #0
 800454e:	2700      	movs	r7, #0
 8004550:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004554:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8004558:	4632      	mov	r2, r6
 800455a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800455e:	463b      	mov	r3, r7
 8004560:	46c2      	mov	sl, r8
 8004562:	f108 38ff 	add.w	r8, r8, #4294967295
 8004566:	f7fc fa1f 	bl	80009a8 <__aeabi_dcmpeq>
 800456a:	2800      	cmp	r0, #0
 800456c:	d1f4      	bne.n	8004558 <__ieee754_rem_pio2+0x398>
 800456e:	4b0b      	ldr	r3, [pc, #44]	; (800459c <__ieee754_rem_pio2+0x3dc>)
 8004570:	462a      	mov	r2, r5
 8004572:	9301      	str	r3, [sp, #4]
 8004574:	2302      	movs	r3, #2
 8004576:	4621      	mov	r1, r4
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	a806      	add	r0, sp, #24
 800457c:	4653      	mov	r3, sl
 800457e:	f000 f96d 	bl	800485c <__kernel_rem_pio2>
 8004582:	9b04      	ldr	r3, [sp, #16]
 8004584:	4605      	mov	r5, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	f6bf ae51 	bge.w	800422e <__ieee754_rem_pio2+0x6e>
 800458c:	6863      	ldr	r3, [r4, #4]
 800458e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004592:	6063      	str	r3, [r4, #4]
 8004594:	68e3      	ldr	r3, [r4, #12]
 8004596:	e707      	b.n	80043a8 <__ieee754_rem_pio2+0x1e8>
 8004598:	41700000 	.word	0x41700000
 800459c:	08005e7c 	.word	0x08005e7c

080045a0 <__ieee754_rem_pio2f>:
 80045a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a4:	4aa0      	ldr	r2, [pc, #640]	; (8004828 <__ieee754_rem_pio2f+0x288>)
 80045a6:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80045aa:	4296      	cmp	r6, r2
 80045ac:	460c      	mov	r4, r1
 80045ae:	4682      	mov	sl, r0
 80045b0:	b087      	sub	sp, #28
 80045b2:	dc04      	bgt.n	80045be <__ieee754_rem_pio2f+0x1e>
 80045b4:	2300      	movs	r3, #0
 80045b6:	6008      	str	r0, [r1, #0]
 80045b8:	604b      	str	r3, [r1, #4]
 80045ba:	2500      	movs	r5, #0
 80045bc:	e01a      	b.n	80045f4 <__ieee754_rem_pio2f+0x54>
 80045be:	4a9b      	ldr	r2, [pc, #620]	; (800482c <__ieee754_rem_pio2f+0x28c>)
 80045c0:	4296      	cmp	r6, r2
 80045c2:	dc4b      	bgt.n	800465c <__ieee754_rem_pio2f+0xbc>
 80045c4:	2800      	cmp	r0, #0
 80045c6:	499a      	ldr	r1, [pc, #616]	; (8004830 <__ieee754_rem_pio2f+0x290>)
 80045c8:	4f9a      	ldr	r7, [pc, #616]	; (8004834 <__ieee754_rem_pio2f+0x294>)
 80045ca:	f026 060f 	bic.w	r6, r6, #15
 80045ce:	dd23      	ble.n	8004618 <__ieee754_rem_pio2f+0x78>
 80045d0:	f7fc fa98 	bl	8000b04 <__aeabi_fsub>
 80045d4:	42be      	cmp	r6, r7
 80045d6:	4605      	mov	r5, r0
 80045d8:	d010      	beq.n	80045fc <__ieee754_rem_pio2f+0x5c>
 80045da:	4997      	ldr	r1, [pc, #604]	; (8004838 <__ieee754_rem_pio2f+0x298>)
 80045dc:	f7fc fa92 	bl	8000b04 <__aeabi_fsub>
 80045e0:	4601      	mov	r1, r0
 80045e2:	6020      	str	r0, [r4, #0]
 80045e4:	4628      	mov	r0, r5
 80045e6:	f7fc fa8d 	bl	8000b04 <__aeabi_fsub>
 80045ea:	4993      	ldr	r1, [pc, #588]	; (8004838 <__ieee754_rem_pio2f+0x298>)
 80045ec:	f7fc fa8a 	bl	8000b04 <__aeabi_fsub>
 80045f0:	2501      	movs	r5, #1
 80045f2:	6060      	str	r0, [r4, #4]
 80045f4:	4628      	mov	r0, r5
 80045f6:	b007      	add	sp, #28
 80045f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045fc:	498f      	ldr	r1, [pc, #572]	; (800483c <__ieee754_rem_pio2f+0x29c>)
 80045fe:	f7fc fa81 	bl	8000b04 <__aeabi_fsub>
 8004602:	498f      	ldr	r1, [pc, #572]	; (8004840 <__ieee754_rem_pio2f+0x2a0>)
 8004604:	4605      	mov	r5, r0
 8004606:	f7fc fa7d 	bl	8000b04 <__aeabi_fsub>
 800460a:	4601      	mov	r1, r0
 800460c:	6020      	str	r0, [r4, #0]
 800460e:	4628      	mov	r0, r5
 8004610:	f7fc fa78 	bl	8000b04 <__aeabi_fsub>
 8004614:	498a      	ldr	r1, [pc, #552]	; (8004840 <__ieee754_rem_pio2f+0x2a0>)
 8004616:	e7e9      	b.n	80045ec <__ieee754_rem_pio2f+0x4c>
 8004618:	f7fc fa76 	bl	8000b08 <__addsf3>
 800461c:	42be      	cmp	r6, r7
 800461e:	4605      	mov	r5, r0
 8004620:	d00e      	beq.n	8004640 <__ieee754_rem_pio2f+0xa0>
 8004622:	4985      	ldr	r1, [pc, #532]	; (8004838 <__ieee754_rem_pio2f+0x298>)
 8004624:	f7fc fa70 	bl	8000b08 <__addsf3>
 8004628:	4601      	mov	r1, r0
 800462a:	6020      	str	r0, [r4, #0]
 800462c:	4628      	mov	r0, r5
 800462e:	f7fc fa69 	bl	8000b04 <__aeabi_fsub>
 8004632:	4981      	ldr	r1, [pc, #516]	; (8004838 <__ieee754_rem_pio2f+0x298>)
 8004634:	f7fc fa68 	bl	8000b08 <__addsf3>
 8004638:	f04f 35ff 	mov.w	r5, #4294967295
 800463c:	6060      	str	r0, [r4, #4]
 800463e:	e7d9      	b.n	80045f4 <__ieee754_rem_pio2f+0x54>
 8004640:	497e      	ldr	r1, [pc, #504]	; (800483c <__ieee754_rem_pio2f+0x29c>)
 8004642:	f7fc fa61 	bl	8000b08 <__addsf3>
 8004646:	497e      	ldr	r1, [pc, #504]	; (8004840 <__ieee754_rem_pio2f+0x2a0>)
 8004648:	4605      	mov	r5, r0
 800464a:	f7fc fa5d 	bl	8000b08 <__addsf3>
 800464e:	4601      	mov	r1, r0
 8004650:	6020      	str	r0, [r4, #0]
 8004652:	4628      	mov	r0, r5
 8004654:	f7fc fa56 	bl	8000b04 <__aeabi_fsub>
 8004658:	4979      	ldr	r1, [pc, #484]	; (8004840 <__ieee754_rem_pio2f+0x2a0>)
 800465a:	e7eb      	b.n	8004634 <__ieee754_rem_pio2f+0x94>
 800465c:	4a79      	ldr	r2, [pc, #484]	; (8004844 <__ieee754_rem_pio2f+0x2a4>)
 800465e:	4296      	cmp	r6, r2
 8004660:	f300 8091 	bgt.w	8004786 <__ieee754_rem_pio2f+0x1e6>
 8004664:	f001 fabe 	bl	8005be4 <fabsf>
 8004668:	4977      	ldr	r1, [pc, #476]	; (8004848 <__ieee754_rem_pio2f+0x2a8>)
 800466a:	4607      	mov	r7, r0
 800466c:	f7fc fb54 	bl	8000d18 <__aeabi_fmul>
 8004670:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004674:	f7fc fa48 	bl	8000b08 <__addsf3>
 8004678:	f7fc fd14 	bl	80010a4 <__aeabi_f2iz>
 800467c:	4605      	mov	r5, r0
 800467e:	f7fc faf7 	bl	8000c70 <__aeabi_i2f>
 8004682:	496b      	ldr	r1, [pc, #428]	; (8004830 <__ieee754_rem_pio2f+0x290>)
 8004684:	4681      	mov	r9, r0
 8004686:	f7fc fb47 	bl	8000d18 <__aeabi_fmul>
 800468a:	4601      	mov	r1, r0
 800468c:	4638      	mov	r0, r7
 800468e:	f7fc fa39 	bl	8000b04 <__aeabi_fsub>
 8004692:	4969      	ldr	r1, [pc, #420]	; (8004838 <__ieee754_rem_pio2f+0x298>)
 8004694:	4680      	mov	r8, r0
 8004696:	4648      	mov	r0, r9
 8004698:	f7fc fb3e 	bl	8000d18 <__aeabi_fmul>
 800469c:	2d1f      	cmp	r5, #31
 800469e:	4607      	mov	r7, r0
 80046a0:	dc0c      	bgt.n	80046bc <__ieee754_rem_pio2f+0x11c>
 80046a2:	4a6a      	ldr	r2, [pc, #424]	; (800484c <__ieee754_rem_pio2f+0x2ac>)
 80046a4:	1e69      	subs	r1, r5, #1
 80046a6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80046aa:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d004      	beq.n	80046bc <__ieee754_rem_pio2f+0x11c>
 80046b2:	4639      	mov	r1, r7
 80046b4:	4640      	mov	r0, r8
 80046b6:	f7fc fa25 	bl	8000b04 <__aeabi_fsub>
 80046ba:	e00b      	b.n	80046d4 <__ieee754_rem_pio2f+0x134>
 80046bc:	4639      	mov	r1, r7
 80046be:	4640      	mov	r0, r8
 80046c0:	f7fc fa20 	bl	8000b04 <__aeabi_fsub>
 80046c4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80046c8:	ea4f 5be6 	mov.w	fp, r6, asr #23
 80046cc:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 80046d0:	2e08      	cmp	r6, #8
 80046d2:	dc01      	bgt.n	80046d8 <__ieee754_rem_pio2f+0x138>
 80046d4:	6020      	str	r0, [r4, #0]
 80046d6:	e026      	b.n	8004726 <__ieee754_rem_pio2f+0x186>
 80046d8:	4958      	ldr	r1, [pc, #352]	; (800483c <__ieee754_rem_pio2f+0x29c>)
 80046da:	4648      	mov	r0, r9
 80046dc:	f7fc fb1c 	bl	8000d18 <__aeabi_fmul>
 80046e0:	4607      	mov	r7, r0
 80046e2:	4601      	mov	r1, r0
 80046e4:	4640      	mov	r0, r8
 80046e6:	f7fc fa0d 	bl	8000b04 <__aeabi_fsub>
 80046ea:	4601      	mov	r1, r0
 80046ec:	4606      	mov	r6, r0
 80046ee:	4640      	mov	r0, r8
 80046f0:	f7fc fa08 	bl	8000b04 <__aeabi_fsub>
 80046f4:	4639      	mov	r1, r7
 80046f6:	f7fc fa05 	bl	8000b04 <__aeabi_fsub>
 80046fa:	4607      	mov	r7, r0
 80046fc:	4950      	ldr	r1, [pc, #320]	; (8004840 <__ieee754_rem_pio2f+0x2a0>)
 80046fe:	4648      	mov	r0, r9
 8004700:	f7fc fb0a 	bl	8000d18 <__aeabi_fmul>
 8004704:	4639      	mov	r1, r7
 8004706:	f7fc f9fd 	bl	8000b04 <__aeabi_fsub>
 800470a:	4601      	mov	r1, r0
 800470c:	4607      	mov	r7, r0
 800470e:	4630      	mov	r0, r6
 8004710:	f7fc f9f8 	bl	8000b04 <__aeabi_fsub>
 8004714:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8004718:	ebab 0b03 	sub.w	fp, fp, r3
 800471c:	f1bb 0f19 	cmp.w	fp, #25
 8004720:	dc16      	bgt.n	8004750 <__ieee754_rem_pio2f+0x1b0>
 8004722:	46b0      	mov	r8, r6
 8004724:	6020      	str	r0, [r4, #0]
 8004726:	6826      	ldr	r6, [r4, #0]
 8004728:	4640      	mov	r0, r8
 800472a:	4631      	mov	r1, r6
 800472c:	f7fc f9ea 	bl	8000b04 <__aeabi_fsub>
 8004730:	4639      	mov	r1, r7
 8004732:	f7fc f9e7 	bl	8000b04 <__aeabi_fsub>
 8004736:	f1ba 0f00 	cmp.w	sl, #0
 800473a:	6060      	str	r0, [r4, #4]
 800473c:	f6bf af5a 	bge.w	80045f4 <__ieee754_rem_pio2f+0x54>
 8004740:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8004744:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004748:	6026      	str	r6, [r4, #0]
 800474a:	6060      	str	r0, [r4, #4]
 800474c:	426d      	negs	r5, r5
 800474e:	e751      	b.n	80045f4 <__ieee754_rem_pio2f+0x54>
 8004750:	493f      	ldr	r1, [pc, #252]	; (8004850 <__ieee754_rem_pio2f+0x2b0>)
 8004752:	4648      	mov	r0, r9
 8004754:	f7fc fae0 	bl	8000d18 <__aeabi_fmul>
 8004758:	4607      	mov	r7, r0
 800475a:	4601      	mov	r1, r0
 800475c:	4630      	mov	r0, r6
 800475e:	f7fc f9d1 	bl	8000b04 <__aeabi_fsub>
 8004762:	4601      	mov	r1, r0
 8004764:	4680      	mov	r8, r0
 8004766:	4630      	mov	r0, r6
 8004768:	f7fc f9cc 	bl	8000b04 <__aeabi_fsub>
 800476c:	4639      	mov	r1, r7
 800476e:	f7fc f9c9 	bl	8000b04 <__aeabi_fsub>
 8004772:	4606      	mov	r6, r0
 8004774:	4937      	ldr	r1, [pc, #220]	; (8004854 <__ieee754_rem_pio2f+0x2b4>)
 8004776:	4648      	mov	r0, r9
 8004778:	f7fc face 	bl	8000d18 <__aeabi_fmul>
 800477c:	4631      	mov	r1, r6
 800477e:	f7fc f9c1 	bl	8000b04 <__aeabi_fsub>
 8004782:	4607      	mov	r7, r0
 8004784:	e795      	b.n	80046b2 <__ieee754_rem_pio2f+0x112>
 8004786:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800478a:	db05      	blt.n	8004798 <__ieee754_rem_pio2f+0x1f8>
 800478c:	4601      	mov	r1, r0
 800478e:	f7fc f9b9 	bl	8000b04 <__aeabi_fsub>
 8004792:	6060      	str	r0, [r4, #4]
 8004794:	6020      	str	r0, [r4, #0]
 8004796:	e710      	b.n	80045ba <__ieee754_rem_pio2f+0x1a>
 8004798:	15f7      	asrs	r7, r6, #23
 800479a:	3f86      	subs	r7, #134	; 0x86
 800479c:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 80047a0:	4630      	mov	r0, r6
 80047a2:	f7fc fc7f 	bl	80010a4 <__aeabi_f2iz>
 80047a6:	f7fc fa63 	bl	8000c70 <__aeabi_i2f>
 80047aa:	4601      	mov	r1, r0
 80047ac:	9003      	str	r0, [sp, #12]
 80047ae:	4630      	mov	r0, r6
 80047b0:	f7fc f9a8 	bl	8000b04 <__aeabi_fsub>
 80047b4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80047b8:	f7fc faae 	bl	8000d18 <__aeabi_fmul>
 80047bc:	4606      	mov	r6, r0
 80047be:	f7fc fc71 	bl	80010a4 <__aeabi_f2iz>
 80047c2:	f7fc fa55 	bl	8000c70 <__aeabi_i2f>
 80047c6:	4601      	mov	r1, r0
 80047c8:	9004      	str	r0, [sp, #16]
 80047ca:	4605      	mov	r5, r0
 80047cc:	4630      	mov	r0, r6
 80047ce:	f7fc f999 	bl	8000b04 <__aeabi_fsub>
 80047d2:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80047d6:	f7fc fa9f 	bl	8000d18 <__aeabi_fmul>
 80047da:	2100      	movs	r1, #0
 80047dc:	9005      	str	r0, [sp, #20]
 80047de:	f7fc fc2f 	bl	8001040 <__aeabi_fcmpeq>
 80047e2:	b1f0      	cbz	r0, 8004822 <__ieee754_rem_pio2f+0x282>
 80047e4:	2100      	movs	r1, #0
 80047e6:	4628      	mov	r0, r5
 80047e8:	f7fc fc2a 	bl	8001040 <__aeabi_fcmpeq>
 80047ec:	2800      	cmp	r0, #0
 80047ee:	bf14      	ite	ne
 80047f0:	2301      	movne	r3, #1
 80047f2:	2302      	moveq	r3, #2
 80047f4:	4a18      	ldr	r2, [pc, #96]	; (8004858 <__ieee754_rem_pio2f+0x2b8>)
 80047f6:	4621      	mov	r1, r4
 80047f8:	9201      	str	r2, [sp, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	a803      	add	r0, sp, #12
 80047fe:	9200      	str	r2, [sp, #0]
 8004800:	463a      	mov	r2, r7
 8004802:	f000 fdb9 	bl	8005378 <__kernel_rem_pio2f>
 8004806:	f1ba 0f00 	cmp.w	sl, #0
 800480a:	4605      	mov	r5, r0
 800480c:	f6bf aef2 	bge.w	80045f4 <__ieee754_rem_pio2f+0x54>
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004816:	6023      	str	r3, [r4, #0]
 8004818:	6863      	ldr	r3, [r4, #4]
 800481a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800481e:	6063      	str	r3, [r4, #4]
 8004820:	e794      	b.n	800474c <__ieee754_rem_pio2f+0x1ac>
 8004822:	2303      	movs	r3, #3
 8004824:	e7e6      	b.n	80047f4 <__ieee754_rem_pio2f+0x254>
 8004826:	bf00      	nop
 8004828:	3f490fd8 	.word	0x3f490fd8
 800482c:	4016cbe3 	.word	0x4016cbe3
 8004830:	3fc90f80 	.word	0x3fc90f80
 8004834:	3fc90fd0 	.word	0x3fc90fd0
 8004838:	37354443 	.word	0x37354443
 800483c:	37354400 	.word	0x37354400
 8004840:	2e85a308 	.word	0x2e85a308
 8004844:	43490f80 	.word	0x43490f80
 8004848:	3f22f984 	.word	0x3f22f984
 800484c:	08005f84 	.word	0x08005f84
 8004850:	2e85a300 	.word	0x2e85a300
 8004854:	248d3132 	.word	0x248d3132
 8004858:	08006004 	.word	0x08006004

0800485c <__kernel_rem_pio2>:
 800485c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004860:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004864:	9308      	str	r3, [sp, #32]
 8004866:	9101      	str	r1, [sp, #4]
 8004868:	4bc0      	ldr	r3, [pc, #768]	; (8004b6c <__kernel_rem_pio2+0x310>)
 800486a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800486c:	f112 0f14 	cmn.w	r2, #20
 8004870:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004874:	bfa8      	it	ge
 8004876:	1ed4      	subge	r4, r2, #3
 8004878:	9304      	str	r3, [sp, #16]
 800487a:	9b08      	ldr	r3, [sp, #32]
 800487c:	bfb8      	it	lt
 800487e:	2400      	movlt	r4, #0
 8004880:	f103 33ff 	add.w	r3, r3, #4294967295
 8004884:	9306      	str	r3, [sp, #24]
 8004886:	bfa4      	itt	ge
 8004888:	2318      	movge	r3, #24
 800488a:	fb94 f4f3 	sdivge	r4, r4, r3
 800488e:	f06f 0317 	mvn.w	r3, #23
 8004892:	fb04 3303 	mla	r3, r4, r3, r3
 8004896:	eb03 0a02 	add.w	sl, r3, r2
 800489a:	9a06      	ldr	r2, [sp, #24]
 800489c:	9b04      	ldr	r3, [sp, #16]
 800489e:	1aa7      	subs	r7, r4, r2
 80048a0:	eb03 0802 	add.w	r8, r3, r2
 80048a4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80048a6:	2500      	movs	r5, #0
 80048a8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80048ac:	2200      	movs	r2, #0
 80048ae:	2300      	movs	r3, #0
 80048b0:	9009      	str	r0, [sp, #36]	; 0x24
 80048b2:	ae20      	add	r6, sp, #128	; 0x80
 80048b4:	4545      	cmp	r5, r8
 80048b6:	dd19      	ble.n	80048ec <__kernel_rem_pio2+0x90>
 80048b8:	9b08      	ldr	r3, [sp, #32]
 80048ba:	aa20      	add	r2, sp, #128	; 0x80
 80048bc:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80048c0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80048c4:	f1c3 0301 	rsb	r3, r3, #1
 80048c8:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80048cc:	9307      	str	r3, [sp, #28]
 80048ce:	9b07      	ldr	r3, [sp, #28]
 80048d0:	9a04      	ldr	r2, [sp, #16]
 80048d2:	4443      	add	r3, r8
 80048d4:	429a      	cmp	r2, r3
 80048d6:	db35      	blt.n	8004944 <__kernel_rem_pio2+0xe8>
 80048d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048da:	2200      	movs	r2, #0
 80048dc:	f1a3 0908 	sub.w	r9, r3, #8
 80048e0:	2300      	movs	r3, #0
 80048e2:	462f      	mov	r7, r5
 80048e4:	2600      	movs	r6, #0
 80048e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80048ea:	e01f      	b.n	800492c <__kernel_rem_pio2+0xd0>
 80048ec:	42ef      	cmn	r7, r5
 80048ee:	d40b      	bmi.n	8004908 <__kernel_rem_pio2+0xac>
 80048f0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80048f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80048f8:	f7fb fd84 	bl	8000404 <__aeabi_i2d>
 80048fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004900:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004904:	3501      	adds	r5, #1
 8004906:	e7d5      	b.n	80048b4 <__kernel_rem_pio2+0x58>
 8004908:	4610      	mov	r0, r2
 800490a:	4619      	mov	r1, r3
 800490c:	e7f8      	b.n	8004900 <__kernel_rem_pio2+0xa4>
 800490e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004912:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8004916:	f7fb fddf 	bl	80004d8 <__aeabi_dmul>
 800491a:	4602      	mov	r2, r0
 800491c:	460b      	mov	r3, r1
 800491e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004922:	f7fb fc23 	bl	800016c <__adddf3>
 8004926:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800492a:	3601      	adds	r6, #1
 800492c:	9b06      	ldr	r3, [sp, #24]
 800492e:	3f08      	subs	r7, #8
 8004930:	429e      	cmp	r6, r3
 8004932:	ddec      	ble.n	800490e <__kernel_rem_pio2+0xb2>
 8004934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004938:	3508      	adds	r5, #8
 800493a:	e8eb 2302 	strd	r2, r3, [fp], #8
 800493e:	f108 0801 	add.w	r8, r8, #1
 8004942:	e7c4      	b.n	80048ce <__kernel_rem_pio2+0x72>
 8004944:	9b04      	ldr	r3, [sp, #16]
 8004946:	aa0c      	add	r2, sp, #48	; 0x30
 8004948:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800494c:	930b      	str	r3, [sp, #44]	; 0x2c
 800494e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004950:	9f04      	ldr	r7, [sp, #16]
 8004952:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004956:	930a      	str	r3, [sp, #40]	; 0x28
 8004958:	463e      	mov	r6, r7
 800495a:	ab98      	add	r3, sp, #608	; 0x260
 800495c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8004960:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004964:	f8cd b008 	str.w	fp, [sp, #8]
 8004968:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800496c:	2e00      	cmp	r6, #0
 800496e:	dc71      	bgt.n	8004a54 <__kernel_rem_pio2+0x1f8>
 8004970:	4652      	mov	r2, sl
 8004972:	4620      	mov	r0, r4
 8004974:	4629      	mov	r1, r5
 8004976:	f001 f8af 	bl	8005ad8 <scalbn>
 800497a:	2200      	movs	r2, #0
 800497c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004980:	4604      	mov	r4, r0
 8004982:	460d      	mov	r5, r1
 8004984:	f7fb fda8 	bl	80004d8 <__aeabi_dmul>
 8004988:	f001 f826 	bl	80059d8 <floor>
 800498c:	2200      	movs	r2, #0
 800498e:	4b78      	ldr	r3, [pc, #480]	; (8004b70 <__kernel_rem_pio2+0x314>)
 8004990:	f7fb fda2 	bl	80004d8 <__aeabi_dmul>
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	4620      	mov	r0, r4
 800499a:	4629      	mov	r1, r5
 800499c:	f7fb fbe4 	bl	8000168 <__aeabi_dsub>
 80049a0:	460d      	mov	r5, r1
 80049a2:	4604      	mov	r4, r0
 80049a4:	f7fc f832 	bl	8000a0c <__aeabi_d2iz>
 80049a8:	9007      	str	r0, [sp, #28]
 80049aa:	f7fb fd2b 	bl	8000404 <__aeabi_i2d>
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	4620      	mov	r0, r4
 80049b4:	4629      	mov	r1, r5
 80049b6:	f7fb fbd7 	bl	8000168 <__aeabi_dsub>
 80049ba:	f1ba 0f00 	cmp.w	sl, #0
 80049be:	4680      	mov	r8, r0
 80049c0:	4689      	mov	r9, r1
 80049c2:	dd70      	ble.n	8004aa6 <__kernel_rem_pio2+0x24a>
 80049c4:	1e7a      	subs	r2, r7, #1
 80049c6:	ab0c      	add	r3, sp, #48	; 0x30
 80049c8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80049cc:	9c07      	ldr	r4, [sp, #28]
 80049ce:	f1ca 0118 	rsb	r1, sl, #24
 80049d2:	fa40 f301 	asr.w	r3, r0, r1
 80049d6:	441c      	add	r4, r3
 80049d8:	408b      	lsls	r3, r1
 80049da:	1ac0      	subs	r0, r0, r3
 80049dc:	ab0c      	add	r3, sp, #48	; 0x30
 80049de:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80049e2:	f1ca 0317 	rsb	r3, sl, #23
 80049e6:	9407      	str	r4, [sp, #28]
 80049e8:	fa40 f303 	asr.w	r3, r0, r3
 80049ec:	9302      	str	r3, [sp, #8]
 80049ee:	9b02      	ldr	r3, [sp, #8]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	dd66      	ble.n	8004ac2 <__kernel_rem_pio2+0x266>
 80049f4:	2200      	movs	r2, #0
 80049f6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80049fa:	4614      	mov	r4, r2
 80049fc:	9b07      	ldr	r3, [sp, #28]
 80049fe:	3301      	adds	r3, #1
 8004a00:	9307      	str	r3, [sp, #28]
 8004a02:	4297      	cmp	r7, r2
 8004a04:	f300 809f 	bgt.w	8004b46 <__kernel_rem_pio2+0x2ea>
 8004a08:	f1ba 0f00 	cmp.w	sl, #0
 8004a0c:	dd07      	ble.n	8004a1e <__kernel_rem_pio2+0x1c2>
 8004a0e:	f1ba 0f01 	cmp.w	sl, #1
 8004a12:	f000 80b9 	beq.w	8004b88 <__kernel_rem_pio2+0x32c>
 8004a16:	f1ba 0f02 	cmp.w	sl, #2
 8004a1a:	f000 80bf 	beq.w	8004b9c <__kernel_rem_pio2+0x340>
 8004a1e:	9b02      	ldr	r3, [sp, #8]
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d14e      	bne.n	8004ac2 <__kernel_rem_pio2+0x266>
 8004a24:	4642      	mov	r2, r8
 8004a26:	464b      	mov	r3, r9
 8004a28:	2000      	movs	r0, #0
 8004a2a:	4952      	ldr	r1, [pc, #328]	; (8004b74 <__kernel_rem_pio2+0x318>)
 8004a2c:	f7fb fb9c 	bl	8000168 <__aeabi_dsub>
 8004a30:	4680      	mov	r8, r0
 8004a32:	4689      	mov	r9, r1
 8004a34:	2c00      	cmp	r4, #0
 8004a36:	d044      	beq.n	8004ac2 <__kernel_rem_pio2+0x266>
 8004a38:	4652      	mov	r2, sl
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	494d      	ldr	r1, [pc, #308]	; (8004b74 <__kernel_rem_pio2+0x318>)
 8004a3e:	f001 f84b 	bl	8005ad8 <scalbn>
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	4640      	mov	r0, r8
 8004a48:	4649      	mov	r1, r9
 8004a4a:	f7fb fb8d 	bl	8000168 <__aeabi_dsub>
 8004a4e:	4680      	mov	r8, r0
 8004a50:	4689      	mov	r9, r1
 8004a52:	e036      	b.n	8004ac2 <__kernel_rem_pio2+0x266>
 8004a54:	2200      	movs	r2, #0
 8004a56:	4b48      	ldr	r3, [pc, #288]	; (8004b78 <__kernel_rem_pio2+0x31c>)
 8004a58:	4620      	mov	r0, r4
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	f7fb fd3c 	bl	80004d8 <__aeabi_dmul>
 8004a60:	f7fb ffd4 	bl	8000a0c <__aeabi_d2iz>
 8004a64:	f7fb fcce 	bl	8000404 <__aeabi_i2d>
 8004a68:	2200      	movs	r2, #0
 8004a6a:	4b44      	ldr	r3, [pc, #272]	; (8004b7c <__kernel_rem_pio2+0x320>)
 8004a6c:	4680      	mov	r8, r0
 8004a6e:	4689      	mov	r9, r1
 8004a70:	f7fb fd32 	bl	80004d8 <__aeabi_dmul>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4620      	mov	r0, r4
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	f7fb fb74 	bl	8000168 <__aeabi_dsub>
 8004a80:	f7fb ffc4 	bl	8000a0c <__aeabi_d2iz>
 8004a84:	9b02      	ldr	r3, [sp, #8]
 8004a86:	3e01      	subs	r6, #1
 8004a88:	f843 0b04 	str.w	r0, [r3], #4
 8004a8c:	9302      	str	r3, [sp, #8]
 8004a8e:	ab70      	add	r3, sp, #448	; 0x1c0
 8004a90:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004a94:	4640      	mov	r0, r8
 8004a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9a:	4649      	mov	r1, r9
 8004a9c:	f7fb fb66 	bl	800016c <__adddf3>
 8004aa0:	4604      	mov	r4, r0
 8004aa2:	460d      	mov	r5, r1
 8004aa4:	e762      	b.n	800496c <__kernel_rem_pio2+0x110>
 8004aa6:	d105      	bne.n	8004ab4 <__kernel_rem_pio2+0x258>
 8004aa8:	1e7b      	subs	r3, r7, #1
 8004aaa:	aa0c      	add	r2, sp, #48	; 0x30
 8004aac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004ab0:	15c3      	asrs	r3, r0, #23
 8004ab2:	e79b      	b.n	80049ec <__kernel_rem_pio2+0x190>
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	4b32      	ldr	r3, [pc, #200]	; (8004b80 <__kernel_rem_pio2+0x324>)
 8004ab8:	f7fb ff94 	bl	80009e4 <__aeabi_dcmpge>
 8004abc:	2800      	cmp	r0, #0
 8004abe:	d13f      	bne.n	8004b40 <__kernel_rem_pio2+0x2e4>
 8004ac0:	9002      	str	r0, [sp, #8]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	4640      	mov	r0, r8
 8004ac8:	4649      	mov	r1, r9
 8004aca:	f7fb ff6d 	bl	80009a8 <__aeabi_dcmpeq>
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	f000 80b5 	beq.w	8004c3e <__kernel_rem_pio2+0x3e2>
 8004ad4:	1e7c      	subs	r4, r7, #1
 8004ad6:	4623      	mov	r3, r4
 8004ad8:	2200      	movs	r2, #0
 8004ada:	9904      	ldr	r1, [sp, #16]
 8004adc:	428b      	cmp	r3, r1
 8004ade:	da64      	bge.n	8004baa <__kernel_rem_pio2+0x34e>
 8004ae0:	2a00      	cmp	r2, #0
 8004ae2:	d078      	beq.n	8004bd6 <__kernel_rem_pio2+0x37a>
 8004ae4:	ab0c      	add	r3, sp, #48	; 0x30
 8004ae6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004aea:	f1aa 0a18 	sub.w	sl, sl, #24
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 80a3 	beq.w	8004c3a <__kernel_rem_pio2+0x3de>
 8004af4:	4652      	mov	r2, sl
 8004af6:	2000      	movs	r0, #0
 8004af8:	491e      	ldr	r1, [pc, #120]	; (8004b74 <__kernel_rem_pio2+0x318>)
 8004afa:	f000 ffed 	bl	8005ad8 <scalbn>
 8004afe:	46a2      	mov	sl, r4
 8004b00:	4606      	mov	r6, r0
 8004b02:	460f      	mov	r7, r1
 8004b04:	f04f 0800 	mov.w	r8, #0
 8004b08:	00e3      	lsls	r3, r4, #3
 8004b0a:	9306      	str	r3, [sp, #24]
 8004b0c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8004b78 <__kernel_rem_pio2+0x31c>
 8004b10:	ab70      	add	r3, sp, #448	; 0x1c0
 8004b12:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8004b16:	f1ba 0f00 	cmp.w	sl, #0
 8004b1a:	f280 80c6 	bge.w	8004caa <__kernel_rem_pio2+0x44e>
 8004b1e:	4627      	mov	r7, r4
 8004b20:	f04f 0800 	mov.w	r8, #0
 8004b24:	2f00      	cmp	r7, #0
 8004b26:	f2c0 80f3 	blt.w	8004d10 <__kernel_rem_pio2+0x4b4>
 8004b2a:	4b16      	ldr	r3, [pc, #88]	; (8004b84 <__kernel_rem_pio2+0x328>)
 8004b2c:	f04f 0a00 	mov.w	sl, #0
 8004b30:	461d      	mov	r5, r3
 8004b32:	ab70      	add	r3, sp, #448	; 0x1c0
 8004b34:	f04f 0b00 	mov.w	fp, #0
 8004b38:	2600      	movs	r6, #0
 8004b3a:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8004b3e:	e0d9      	b.n	8004cf4 <__kernel_rem_pio2+0x498>
 8004b40:	2302      	movs	r3, #2
 8004b42:	9302      	str	r3, [sp, #8]
 8004b44:	e756      	b.n	80049f4 <__kernel_rem_pio2+0x198>
 8004b46:	f8db 3000 	ldr.w	r3, [fp]
 8004b4a:	b954      	cbnz	r4, 8004b62 <__kernel_rem_pio2+0x306>
 8004b4c:	b123      	cbz	r3, 8004b58 <__kernel_rem_pio2+0x2fc>
 8004b4e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004b52:	f8cb 3000 	str.w	r3, [fp]
 8004b56:	2301      	movs	r3, #1
 8004b58:	461c      	mov	r4, r3
 8004b5a:	3201      	adds	r2, #1
 8004b5c:	f10b 0b04 	add.w	fp, fp, #4
 8004b60:	e74f      	b.n	8004a02 <__kernel_rem_pio2+0x1a6>
 8004b62:	1acb      	subs	r3, r1, r3
 8004b64:	f8cb 3000 	str.w	r3, [fp]
 8004b68:	4623      	mov	r3, r4
 8004b6a:	e7f5      	b.n	8004b58 <__kernel_rem_pio2+0x2fc>
 8004b6c:	08006360 	.word	0x08006360
 8004b70:	40200000 	.word	0x40200000
 8004b74:	3ff00000 	.word	0x3ff00000
 8004b78:	3e700000 	.word	0x3e700000
 8004b7c:	41700000 	.word	0x41700000
 8004b80:	3fe00000 	.word	0x3fe00000
 8004b84:	08006320 	.word	0x08006320
 8004b88:	1e7a      	subs	r2, r7, #1
 8004b8a:	ab0c      	add	r3, sp, #48	; 0x30
 8004b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b90:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004b94:	a90c      	add	r1, sp, #48	; 0x30
 8004b96:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004b9a:	e740      	b.n	8004a1e <__kernel_rem_pio2+0x1c2>
 8004b9c:	1e7a      	subs	r2, r7, #1
 8004b9e:	ab0c      	add	r3, sp, #48	; 0x30
 8004ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ba4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004ba8:	e7f4      	b.n	8004b94 <__kernel_rem_pio2+0x338>
 8004baa:	a90c      	add	r1, sp, #48	; 0x30
 8004bac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	e791      	b.n	8004ada <__kernel_rem_pio2+0x27e>
 8004bb6:	3401      	adds	r4, #1
 8004bb8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004bbc:	2a00      	cmp	r2, #0
 8004bbe:	d0fa      	beq.n	8004bb6 <__kernel_rem_pio2+0x35a>
 8004bc0:	9b08      	ldr	r3, [sp, #32]
 8004bc2:	1c7e      	adds	r6, r7, #1
 8004bc4:	18fd      	adds	r5, r7, r3
 8004bc6:	ab20      	add	r3, sp, #128	; 0x80
 8004bc8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004bcc:	443c      	add	r4, r7
 8004bce:	42b4      	cmp	r4, r6
 8004bd0:	da04      	bge.n	8004bdc <__kernel_rem_pio2+0x380>
 8004bd2:	4627      	mov	r7, r4
 8004bd4:	e6c0      	b.n	8004958 <__kernel_rem_pio2+0xfc>
 8004bd6:	2401      	movs	r4, #1
 8004bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bda:	e7ed      	b.n	8004bb8 <__kernel_rem_pio2+0x35c>
 8004bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bde:	462f      	mov	r7, r5
 8004be0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004be4:	f7fb fc0e 	bl	8000404 <__aeabi_i2d>
 8004be8:	f04f 0b00 	mov.w	fp, #0
 8004bec:	f04f 0800 	mov.w	r8, #0
 8004bf0:	f04f 0900 	mov.w	r9, #0
 8004bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bf6:	e8e7 0102 	strd	r0, r1, [r7], #8
 8004bfa:	3b08      	subs	r3, #8
 8004bfc:	9302      	str	r3, [sp, #8]
 8004bfe:	9b06      	ldr	r3, [sp, #24]
 8004c00:	459b      	cmp	fp, r3
 8004c02:	dd07      	ble.n	8004c14 <__kernel_rem_pio2+0x3b8>
 8004c04:	ab70      	add	r3, sp, #448	; 0x1c0
 8004c06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004c0a:	463d      	mov	r5, r7
 8004c0c:	e9c3 8900 	strd	r8, r9, [r3]
 8004c10:	3601      	adds	r6, #1
 8004c12:	e7dc      	b.n	8004bce <__kernel_rem_pio2+0x372>
 8004c14:	9902      	ldr	r1, [sp, #8]
 8004c16:	f10b 0b01 	add.w	fp, fp, #1
 8004c1a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8004c1e:	9102      	str	r1, [sp, #8]
 8004c20:	e875 0102 	ldrd	r0, r1, [r5], #-8
 8004c24:	f7fb fc58 	bl	80004d8 <__aeabi_dmul>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4640      	mov	r0, r8
 8004c2e:	4649      	mov	r1, r9
 8004c30:	f7fb fa9c 	bl	800016c <__adddf3>
 8004c34:	4680      	mov	r8, r0
 8004c36:	4689      	mov	r9, r1
 8004c38:	e7e1      	b.n	8004bfe <__kernel_rem_pio2+0x3a2>
 8004c3a:	3c01      	subs	r4, #1
 8004c3c:	e752      	b.n	8004ae4 <__kernel_rem_pio2+0x288>
 8004c3e:	f1ca 0200 	rsb	r2, sl, #0
 8004c42:	4640      	mov	r0, r8
 8004c44:	4649      	mov	r1, r9
 8004c46:	f000 ff47 	bl	8005ad8 <scalbn>
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	4ba5      	ldr	r3, [pc, #660]	; (8004ee4 <__kernel_rem_pio2+0x688>)
 8004c4e:	4604      	mov	r4, r0
 8004c50:	460d      	mov	r5, r1
 8004c52:	f7fb fec7 	bl	80009e4 <__aeabi_dcmpge>
 8004c56:	b1f8      	cbz	r0, 8004c98 <__kernel_rem_pio2+0x43c>
 8004c58:	2200      	movs	r2, #0
 8004c5a:	4ba3      	ldr	r3, [pc, #652]	; (8004ee8 <__kernel_rem_pio2+0x68c>)
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	4629      	mov	r1, r5
 8004c60:	f7fb fc3a 	bl	80004d8 <__aeabi_dmul>
 8004c64:	f7fb fed2 	bl	8000a0c <__aeabi_d2iz>
 8004c68:	4606      	mov	r6, r0
 8004c6a:	f7fb fbcb 	bl	8000404 <__aeabi_i2d>
 8004c6e:	2200      	movs	r2, #0
 8004c70:	4b9c      	ldr	r3, [pc, #624]	; (8004ee4 <__kernel_rem_pio2+0x688>)
 8004c72:	f7fb fc31 	bl	80004d8 <__aeabi_dmul>
 8004c76:	460b      	mov	r3, r1
 8004c78:	4602      	mov	r2, r0
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	f7fb fa73 	bl	8000168 <__aeabi_dsub>
 8004c82:	f7fb fec3 	bl	8000a0c <__aeabi_d2iz>
 8004c86:	1c7c      	adds	r4, r7, #1
 8004c88:	ab0c      	add	r3, sp, #48	; 0x30
 8004c8a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8004c8e:	f10a 0a18 	add.w	sl, sl, #24
 8004c92:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8004c96:	e72d      	b.n	8004af4 <__kernel_rem_pio2+0x298>
 8004c98:	4620      	mov	r0, r4
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	f7fb feb6 	bl	8000a0c <__aeabi_d2iz>
 8004ca0:	ab0c      	add	r3, sp, #48	; 0x30
 8004ca2:	463c      	mov	r4, r7
 8004ca4:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8004ca8:	e724      	b.n	8004af4 <__kernel_rem_pio2+0x298>
 8004caa:	ab0c      	add	r3, sp, #48	; 0x30
 8004cac:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8004cb0:	f7fb fba8 	bl	8000404 <__aeabi_i2d>
 8004cb4:	4632      	mov	r2, r6
 8004cb6:	463b      	mov	r3, r7
 8004cb8:	f7fb fc0e 	bl	80004d8 <__aeabi_dmul>
 8004cbc:	4642      	mov	r2, r8
 8004cbe:	e86b 0102 	strd	r0, r1, [fp], #-8
 8004cc2:	464b      	mov	r3, r9
 8004cc4:	4630      	mov	r0, r6
 8004cc6:	4639      	mov	r1, r7
 8004cc8:	f7fb fc06 	bl	80004d8 <__aeabi_dmul>
 8004ccc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004cd0:	4606      	mov	r6, r0
 8004cd2:	460f      	mov	r7, r1
 8004cd4:	e71f      	b.n	8004b16 <__kernel_rem_pio2+0x2ba>
 8004cd6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8004cda:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8004cde:	f7fb fbfb 	bl	80004d8 <__aeabi_dmul>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	4650      	mov	r0, sl
 8004ce8:	4659      	mov	r1, fp
 8004cea:	f7fb fa3f 	bl	800016c <__adddf3>
 8004cee:	4682      	mov	sl, r0
 8004cf0:	468b      	mov	fp, r1
 8004cf2:	3601      	adds	r6, #1
 8004cf4:	9b04      	ldr	r3, [sp, #16]
 8004cf6:	429e      	cmp	r6, r3
 8004cf8:	dc01      	bgt.n	8004cfe <__kernel_rem_pio2+0x4a2>
 8004cfa:	45b0      	cmp	r8, r6
 8004cfc:	daeb      	bge.n	8004cd6 <__kernel_rem_pio2+0x47a>
 8004cfe:	ab48      	add	r3, sp, #288	; 0x120
 8004d00:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004d04:	e9c3 ab00 	strd	sl, fp, [r3]
 8004d08:	3f01      	subs	r7, #1
 8004d0a:	f108 0801 	add.w	r8, r8, #1
 8004d0e:	e709      	b.n	8004b24 <__kernel_rem_pio2+0x2c8>
 8004d10:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	dc09      	bgt.n	8004d2a <__kernel_rem_pio2+0x4ce>
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	dc34      	bgt.n	8004d84 <__kernel_rem_pio2+0x528>
 8004d1a:	d05e      	beq.n	8004dda <__kernel_rem_pio2+0x57e>
 8004d1c:	9b07      	ldr	r3, [sp, #28]
 8004d1e:	f003 0007 	and.w	r0, r3, #7
 8004d22:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d2a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8004d2c:	2b03      	cmp	r3, #3
 8004d2e:	d1f5      	bne.n	8004d1c <__kernel_rem_pio2+0x4c0>
 8004d30:	9a06      	ldr	r2, [sp, #24]
 8004d32:	ab48      	add	r3, sp, #288	; 0x120
 8004d34:	441a      	add	r2, r3
 8004d36:	4615      	mov	r5, r2
 8004d38:	4692      	mov	sl, r2
 8004d3a:	46a3      	mov	fp, r4
 8004d3c:	f1bb 0f00 	cmp.w	fp, #0
 8004d40:	dc7a      	bgt.n	8004e38 <__kernel_rem_pio2+0x5dc>
 8004d42:	46aa      	mov	sl, r5
 8004d44:	46a3      	mov	fp, r4
 8004d46:	f1bb 0f01 	cmp.w	fp, #1
 8004d4a:	f300 8094 	bgt.w	8004e76 <__kernel_rem_pio2+0x61a>
 8004d4e:	2700      	movs	r7, #0
 8004d50:	463e      	mov	r6, r7
 8004d52:	2c01      	cmp	r4, #1
 8004d54:	f300 80ae 	bgt.w	8004eb4 <__kernel_rem_pio2+0x658>
 8004d58:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8004d5c:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8004d60:	9b02      	ldr	r3, [sp, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f040 80b0 	bne.w	8004ec8 <__kernel_rem_pio2+0x66c>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	462a      	mov	r2, r5
 8004d6c:	9801      	ldr	r0, [sp, #4]
 8004d6e:	e9c0 2300 	strd	r2, r3, [r0]
 8004d72:	4622      	mov	r2, r4
 8004d74:	460b      	mov	r3, r1
 8004d76:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004d7a:	463a      	mov	r2, r7
 8004d7c:	4633      	mov	r3, r6
 8004d7e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004d82:	e7cb      	b.n	8004d1c <__kernel_rem_pio2+0x4c0>
 8004d84:	2000      	movs	r0, #0
 8004d86:	9a06      	ldr	r2, [sp, #24]
 8004d88:	ab48      	add	r3, sp, #288	; 0x120
 8004d8a:	441a      	add	r2, r3
 8004d8c:	4615      	mov	r5, r2
 8004d8e:	46a0      	mov	r8, r4
 8004d90:	4601      	mov	r1, r0
 8004d92:	f1b8 0f00 	cmp.w	r8, #0
 8004d96:	da3c      	bge.n	8004e12 <__kernel_rem_pio2+0x5b6>
 8004d98:	9b02      	ldr	r3, [sp, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d040      	beq.n	8004e20 <__kernel_rem_pio2+0x5c4>
 8004d9e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8004da2:	4602      	mov	r2, r0
 8004da4:	462b      	mov	r3, r5
 8004da6:	9d01      	ldr	r5, [sp, #4]
 8004da8:	2601      	movs	r6, #1
 8004daa:	e9c5 2300 	strd	r2, r3, [r5]
 8004dae:	460b      	mov	r3, r1
 8004db0:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8004db4:	f7fb f9d8 	bl	8000168 <__aeabi_dsub>
 8004db8:	4684      	mov	ip, r0
 8004dba:	460f      	mov	r7, r1
 8004dbc:	ad48      	add	r5, sp, #288	; 0x120
 8004dbe:	42b4      	cmp	r4, r6
 8004dc0:	f105 0508 	add.w	r5, r5, #8
 8004dc4:	da2e      	bge.n	8004e24 <__kernel_rem_pio2+0x5c8>
 8004dc6:	9b02      	ldr	r3, [sp, #8]
 8004dc8:	b10b      	cbz	r3, 8004dce <__kernel_rem_pio2+0x572>
 8004dca:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8004dce:	4662      	mov	r2, ip
 8004dd0:	463b      	mov	r3, r7
 8004dd2:	9901      	ldr	r1, [sp, #4]
 8004dd4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004dd8:	e7a0      	b.n	8004d1c <__kernel_rem_pio2+0x4c0>
 8004dda:	9a06      	ldr	r2, [sp, #24]
 8004ddc:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8004dde:	ab48      	add	r3, sp, #288	; 0x120
 8004de0:	441a      	add	r2, r3
 8004de2:	4615      	mov	r5, r2
 8004de4:	4637      	mov	r7, r6
 8004de6:	2c00      	cmp	r4, #0
 8004de8:	da09      	bge.n	8004dfe <__kernel_rem_pio2+0x5a2>
 8004dea:	9b02      	ldr	r3, [sp, #8]
 8004dec:	b10b      	cbz	r3, 8004df2 <__kernel_rem_pio2+0x596>
 8004dee:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8004df2:	4632      	mov	r2, r6
 8004df4:	463b      	mov	r3, r7
 8004df6:	9901      	ldr	r1, [sp, #4]
 8004df8:	e9c1 2300 	strd	r2, r3, [r1]
 8004dfc:	e78e      	b.n	8004d1c <__kernel_rem_pio2+0x4c0>
 8004dfe:	4630      	mov	r0, r6
 8004e00:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004e04:	4639      	mov	r1, r7
 8004e06:	f7fb f9b1 	bl	800016c <__adddf3>
 8004e0a:	3c01      	subs	r4, #1
 8004e0c:	4606      	mov	r6, r0
 8004e0e:	460f      	mov	r7, r1
 8004e10:	e7e9      	b.n	8004de6 <__kernel_rem_pio2+0x58a>
 8004e12:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004e16:	f7fb f9a9 	bl	800016c <__adddf3>
 8004e1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8004e1e:	e7b8      	b.n	8004d92 <__kernel_rem_pio2+0x536>
 8004e20:	460d      	mov	r5, r1
 8004e22:	e7be      	b.n	8004da2 <__kernel_rem_pio2+0x546>
 8004e24:	4660      	mov	r0, ip
 8004e26:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004e2a:	4639      	mov	r1, r7
 8004e2c:	f7fb f99e 	bl	800016c <__adddf3>
 8004e30:	3601      	adds	r6, #1
 8004e32:	4684      	mov	ip, r0
 8004e34:	460f      	mov	r7, r1
 8004e36:	e7c2      	b.n	8004dbe <__kernel_rem_pio2+0x562>
 8004e38:	e9da 6700 	ldrd	r6, r7, [sl]
 8004e3c:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8004e40:	4632      	mov	r2, r6
 8004e42:	463b      	mov	r3, r7
 8004e44:	4640      	mov	r0, r8
 8004e46:	4649      	mov	r1, r9
 8004e48:	f7fb f990 	bl	800016c <__adddf3>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e54:	4640      	mov	r0, r8
 8004e56:	4649      	mov	r1, r9
 8004e58:	f7fb f986 	bl	8000168 <__aeabi_dsub>
 8004e5c:	4632      	mov	r2, r6
 8004e5e:	463b      	mov	r3, r7
 8004e60:	f7fb f984 	bl	800016c <__adddf3>
 8004e64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e68:	e86a 0102 	strd	r0, r1, [sl], #-8
 8004e6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004e70:	e9ca 2300 	strd	r2, r3, [sl]
 8004e74:	e762      	b.n	8004d3c <__kernel_rem_pio2+0x4e0>
 8004e76:	e9da 8900 	ldrd	r8, r9, [sl]
 8004e7a:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8004e7e:	4642      	mov	r2, r8
 8004e80:	464b      	mov	r3, r9
 8004e82:	4630      	mov	r0, r6
 8004e84:	4639      	mov	r1, r7
 8004e86:	f7fb f971 	bl	800016c <__adddf3>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e92:	4630      	mov	r0, r6
 8004e94:	4639      	mov	r1, r7
 8004e96:	f7fb f967 	bl	8000168 <__aeabi_dsub>
 8004e9a:	4642      	mov	r2, r8
 8004e9c:	464b      	mov	r3, r9
 8004e9e:	f7fb f965 	bl	800016c <__adddf3>
 8004ea2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ea6:	e86a 0102 	strd	r0, r1, [sl], #-8
 8004eaa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004eae:	e9ca 2300 	strd	r2, r3, [sl]
 8004eb2:	e748      	b.n	8004d46 <__kernel_rem_pio2+0x4ea>
 8004eb4:	4638      	mov	r0, r7
 8004eb6:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004eba:	4631      	mov	r1, r6
 8004ebc:	f7fb f956 	bl	800016c <__adddf3>
 8004ec0:	3c01      	subs	r4, #1
 8004ec2:	4607      	mov	r7, r0
 8004ec4:	460e      	mov	r6, r1
 8004ec6:	e744      	b.n	8004d52 <__kernel_rem_pio2+0x4f6>
 8004ec8:	9b01      	ldr	r3, [sp, #4]
 8004eca:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004ece:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004ed2:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8004ed6:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8004eda:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8004ede:	601d      	str	r5, [r3, #0]
 8004ee0:	615e      	str	r6, [r3, #20]
 8004ee2:	e71b      	b.n	8004d1c <__kernel_rem_pio2+0x4c0>
 8004ee4:	41700000 	.word	0x41700000
 8004ee8:	3e700000 	.word	0x3e700000
 8004eec:	00000000 	.word	0x00000000

08004ef0 <__kernel_tan>:
 8004ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef4:	461f      	mov	r7, r3
 8004ef6:	4bda      	ldr	r3, [pc, #872]	; (8005260 <__kernel_tan+0x370>)
 8004ef8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004efc:	b089      	sub	sp, #36	; 0x24
 8004efe:	429e      	cmp	r6, r3
 8004f00:	4604      	mov	r4, r0
 8004f02:	460d      	mov	r5, r1
 8004f04:	4682      	mov	sl, r0
 8004f06:	468b      	mov	fp, r1
 8004f08:	4690      	mov	r8, r2
 8004f0a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 8004f0e:	9105      	str	r1, [sp, #20]
 8004f10:	dc21      	bgt.n	8004f56 <__kernel_tan+0x66>
 8004f12:	f7fb fd7b 	bl	8000a0c <__aeabi_d2iz>
 8004f16:	2800      	cmp	r0, #0
 8004f18:	d140      	bne.n	8004f9c <__kernel_tan+0xac>
 8004f1a:	f109 0301 	add.w	r3, r9, #1
 8004f1e:	4323      	orrs	r3, r4
 8004f20:	4333      	orrs	r3, r6
 8004f22:	4622      	mov	r2, r4
 8004f24:	d110      	bne.n	8004f48 <__kernel_tan+0x58>
 8004f26:	4620      	mov	r0, r4
 8004f28:	4629      	mov	r1, r5
 8004f2a:	f000 fd51 	bl	80059d0 <fabs>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	2000      	movs	r0, #0
 8004f32:	460b      	mov	r3, r1
 8004f34:	49cb      	ldr	r1, [pc, #812]	; (8005264 <__kernel_tan+0x374>)
 8004f36:	f7fb fbf9 	bl	800072c <__aeabi_ddiv>
 8004f3a:	4682      	mov	sl, r0
 8004f3c:	468b      	mov	fp, r1
 8004f3e:	4650      	mov	r0, sl
 8004f40:	4659      	mov	r1, fp
 8004f42:	b009      	add	sp, #36	; 0x24
 8004f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f48:	f1b9 0f01 	cmp.w	r9, #1
 8004f4c:	d0f7      	beq.n	8004f3e <__kernel_tan+0x4e>
 8004f4e:	462b      	mov	r3, r5
 8004f50:	2000      	movs	r0, #0
 8004f52:	49c5      	ldr	r1, [pc, #788]	; (8005268 <__kernel_tan+0x378>)
 8004f54:	e7ef      	b.n	8004f36 <__kernel_tan+0x46>
 8004f56:	4bc5      	ldr	r3, [pc, #788]	; (800526c <__kernel_tan+0x37c>)
 8004f58:	429e      	cmp	r6, r3
 8004f5a:	dd1f      	ble.n	8004f9c <__kernel_tan+0xac>
 8004f5c:	2900      	cmp	r1, #0
 8004f5e:	da04      	bge.n	8004f6a <__kernel_tan+0x7a>
 8004f60:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004f64:	469b      	mov	fp, r3
 8004f66:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8004f6a:	4652      	mov	r2, sl
 8004f6c:	a19e      	add	r1, pc, #632	; (adr r1, 80051e8 <__kernel_tan+0x2f8>)
 8004f6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f72:	465b      	mov	r3, fp
 8004f74:	f7fb f8f8 	bl	8000168 <__aeabi_dsub>
 8004f78:	4604      	mov	r4, r0
 8004f7a:	460d      	mov	r5, r1
 8004f7c:	a19c      	add	r1, pc, #624	; (adr r1, 80051f0 <__kernel_tan+0x300>)
 8004f7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f82:	4642      	mov	r2, r8
 8004f84:	463b      	mov	r3, r7
 8004f86:	f7fb f8ef 	bl	8000168 <__aeabi_dsub>
 8004f8a:	4622      	mov	r2, r4
 8004f8c:	462b      	mov	r3, r5
 8004f8e:	f7fb f8ed 	bl	800016c <__adddf3>
 8004f92:	f04f 0800 	mov.w	r8, #0
 8004f96:	4682      	mov	sl, r0
 8004f98:	468b      	mov	fp, r1
 8004f9a:	4647      	mov	r7, r8
 8004f9c:	4652      	mov	r2, sl
 8004f9e:	465b      	mov	r3, fp
 8004fa0:	4650      	mov	r0, sl
 8004fa2:	4659      	mov	r1, fp
 8004fa4:	f7fb fa98 	bl	80004d8 <__aeabi_dmul>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	460b      	mov	r3, r1
 8004fac:	e9cd 2300 	strd	r2, r3, [sp]
 8004fb0:	f7fb fa92 	bl	80004d8 <__aeabi_dmul>
 8004fb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004fb8:	4604      	mov	r4, r0
 8004fba:	460d      	mov	r5, r1
 8004fbc:	4650      	mov	r0, sl
 8004fbe:	4659      	mov	r1, fp
 8004fc0:	f7fb fa8a 	bl	80004d8 <__aeabi_dmul>
 8004fc4:	a38c      	add	r3, pc, #560	; (adr r3, 80051f8 <__kernel_tan+0x308>)
 8004fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fce:	4620      	mov	r0, r4
 8004fd0:	4629      	mov	r1, r5
 8004fd2:	f7fb fa81 	bl	80004d8 <__aeabi_dmul>
 8004fd6:	a38a      	add	r3, pc, #552	; (adr r3, 8005200 <__kernel_tan+0x310>)
 8004fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fdc:	f7fb f8c6 	bl	800016c <__adddf3>
 8004fe0:	4622      	mov	r2, r4
 8004fe2:	462b      	mov	r3, r5
 8004fe4:	f7fb fa78 	bl	80004d8 <__aeabi_dmul>
 8004fe8:	a387      	add	r3, pc, #540	; (adr r3, 8005208 <__kernel_tan+0x318>)
 8004fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fee:	f7fb f8bd 	bl	800016c <__adddf3>
 8004ff2:	4622      	mov	r2, r4
 8004ff4:	462b      	mov	r3, r5
 8004ff6:	f7fb fa6f 	bl	80004d8 <__aeabi_dmul>
 8004ffa:	a385      	add	r3, pc, #532	; (adr r3, 8005210 <__kernel_tan+0x320>)
 8004ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005000:	f7fb f8b4 	bl	800016c <__adddf3>
 8005004:	4622      	mov	r2, r4
 8005006:	462b      	mov	r3, r5
 8005008:	f7fb fa66 	bl	80004d8 <__aeabi_dmul>
 800500c:	a382      	add	r3, pc, #520	; (adr r3, 8005218 <__kernel_tan+0x328>)
 800500e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005012:	f7fb f8ab 	bl	800016c <__adddf3>
 8005016:	4622      	mov	r2, r4
 8005018:	462b      	mov	r3, r5
 800501a:	f7fb fa5d 	bl	80004d8 <__aeabi_dmul>
 800501e:	a380      	add	r3, pc, #512	; (adr r3, 8005220 <__kernel_tan+0x330>)
 8005020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005024:	f7fb f8a2 	bl	800016c <__adddf3>
 8005028:	e9dd 2300 	ldrd	r2, r3, [sp]
 800502c:	f7fb fa54 	bl	80004d8 <__aeabi_dmul>
 8005030:	a37d      	add	r3, pc, #500	; (adr r3, 8005228 <__kernel_tan+0x338>)
 8005032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005036:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800503a:	4620      	mov	r0, r4
 800503c:	4629      	mov	r1, r5
 800503e:	f7fb fa4b 	bl	80004d8 <__aeabi_dmul>
 8005042:	a37b      	add	r3, pc, #492	; (adr r3, 8005230 <__kernel_tan+0x340>)
 8005044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005048:	f7fb f890 	bl	800016c <__adddf3>
 800504c:	4622      	mov	r2, r4
 800504e:	462b      	mov	r3, r5
 8005050:	f7fb fa42 	bl	80004d8 <__aeabi_dmul>
 8005054:	a378      	add	r3, pc, #480	; (adr r3, 8005238 <__kernel_tan+0x348>)
 8005056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505a:	f7fb f887 	bl	800016c <__adddf3>
 800505e:	4622      	mov	r2, r4
 8005060:	462b      	mov	r3, r5
 8005062:	f7fb fa39 	bl	80004d8 <__aeabi_dmul>
 8005066:	a376      	add	r3, pc, #472	; (adr r3, 8005240 <__kernel_tan+0x350>)
 8005068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506c:	f7fb f87e 	bl	800016c <__adddf3>
 8005070:	4622      	mov	r2, r4
 8005072:	462b      	mov	r3, r5
 8005074:	f7fb fa30 	bl	80004d8 <__aeabi_dmul>
 8005078:	a373      	add	r3, pc, #460	; (adr r3, 8005248 <__kernel_tan+0x358>)
 800507a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507e:	f7fb f875 	bl	800016c <__adddf3>
 8005082:	4622      	mov	r2, r4
 8005084:	462b      	mov	r3, r5
 8005086:	f7fb fa27 	bl	80004d8 <__aeabi_dmul>
 800508a:	a371      	add	r3, pc, #452	; (adr r3, 8005250 <__kernel_tan+0x360>)
 800508c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005090:	f7fb f86c 	bl	800016c <__adddf3>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800509c:	f7fb f866 	bl	800016c <__adddf3>
 80050a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050a4:	f7fb fa18 	bl	80004d8 <__aeabi_dmul>
 80050a8:	4642      	mov	r2, r8
 80050aa:	463b      	mov	r3, r7
 80050ac:	f7fb f85e 	bl	800016c <__adddf3>
 80050b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050b4:	f7fb fa10 	bl	80004d8 <__aeabi_dmul>
 80050b8:	4642      	mov	r2, r8
 80050ba:	463b      	mov	r3, r7
 80050bc:	f7fb f856 	bl	800016c <__adddf3>
 80050c0:	a365      	add	r3, pc, #404	; (adr r3, 8005258 <__kernel_tan+0x368>)
 80050c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c6:	4604      	mov	r4, r0
 80050c8:	460d      	mov	r5, r1
 80050ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050ce:	f7fb fa03 	bl	80004d8 <__aeabi_dmul>
 80050d2:	4622      	mov	r2, r4
 80050d4:	462b      	mov	r3, r5
 80050d6:	f7fb f849 	bl	800016c <__adddf3>
 80050da:	460b      	mov	r3, r1
 80050dc:	e9cd 0100 	strd	r0, r1, [sp]
 80050e0:	4602      	mov	r2, r0
 80050e2:	4659      	mov	r1, fp
 80050e4:	4650      	mov	r0, sl
 80050e6:	f7fb f841 	bl	800016c <__adddf3>
 80050ea:	4b60      	ldr	r3, [pc, #384]	; (800526c <__kernel_tan+0x37c>)
 80050ec:	4604      	mov	r4, r0
 80050ee:	429e      	cmp	r6, r3
 80050f0:	460d      	mov	r5, r1
 80050f2:	dd3e      	ble.n	8005172 <__kernel_tan+0x282>
 80050f4:	4648      	mov	r0, r9
 80050f6:	f7fb f985 	bl	8000404 <__aeabi_i2d>
 80050fa:	4622      	mov	r2, r4
 80050fc:	4680      	mov	r8, r0
 80050fe:	4689      	mov	r9, r1
 8005100:	462b      	mov	r3, r5
 8005102:	4620      	mov	r0, r4
 8005104:	4629      	mov	r1, r5
 8005106:	f7fb f9e7 	bl	80004d8 <__aeabi_dmul>
 800510a:	4642      	mov	r2, r8
 800510c:	4606      	mov	r6, r0
 800510e:	460f      	mov	r7, r1
 8005110:	464b      	mov	r3, r9
 8005112:	4620      	mov	r0, r4
 8005114:	4629      	mov	r1, r5
 8005116:	f7fb f829 	bl	800016c <__adddf3>
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	4630      	mov	r0, r6
 8005120:	4639      	mov	r1, r7
 8005122:	f7fb fb03 	bl	800072c <__aeabi_ddiv>
 8005126:	e9dd 2300 	ldrd	r2, r3, [sp]
 800512a:	f7fb f81d 	bl	8000168 <__aeabi_dsub>
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	4650      	mov	r0, sl
 8005134:	4659      	mov	r1, fp
 8005136:	f7fb f817 	bl	8000168 <__aeabi_dsub>
 800513a:	4602      	mov	r2, r0
 800513c:	460b      	mov	r3, r1
 800513e:	f7fb f815 	bl	800016c <__adddf3>
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	4640      	mov	r0, r8
 8005148:	4649      	mov	r1, r9
 800514a:	f7fb f80d 	bl	8000168 <__aeabi_dsub>
 800514e:	9b05      	ldr	r3, [sp, #20]
 8005150:	4604      	mov	r4, r0
 8005152:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8005156:	f00a 0a02 	and.w	sl, sl, #2
 800515a:	f1ca 0001 	rsb	r0, sl, #1
 800515e:	460d      	mov	r5, r1
 8005160:	f7fb f950 	bl	8000404 <__aeabi_i2d>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	4620      	mov	r0, r4
 800516a:	4629      	mov	r1, r5
 800516c:	f7fb f9b4 	bl	80004d8 <__aeabi_dmul>
 8005170:	e6e3      	b.n	8004f3a <__kernel_tan+0x4a>
 8005172:	f1b9 0f01 	cmp.w	r9, #1
 8005176:	d07b      	beq.n	8005270 <__kernel_tan+0x380>
 8005178:	460f      	mov	r7, r1
 800517a:	4602      	mov	r2, r0
 800517c:	460b      	mov	r3, r1
 800517e:	2000      	movs	r0, #0
 8005180:	4939      	ldr	r1, [pc, #228]	; (8005268 <__kernel_tan+0x378>)
 8005182:	f7fb fad3 	bl	800072c <__aeabi_ddiv>
 8005186:	2600      	movs	r6, #0
 8005188:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800518c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005190:	4652      	mov	r2, sl
 8005192:	465b      	mov	r3, fp
 8005194:	4630      	mov	r0, r6
 8005196:	4639      	mov	r1, r7
 8005198:	f7fa ffe6 	bl	8000168 <__aeabi_dsub>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051a4:	f7fa ffe0 	bl	8000168 <__aeabi_dsub>
 80051a8:	4632      	mov	r2, r6
 80051aa:	462b      	mov	r3, r5
 80051ac:	f7fb f994 	bl	80004d8 <__aeabi_dmul>
 80051b0:	4632      	mov	r2, r6
 80051b2:	4682      	mov	sl, r0
 80051b4:	468b      	mov	fp, r1
 80051b6:	462b      	mov	r3, r5
 80051b8:	4630      	mov	r0, r6
 80051ba:	4639      	mov	r1, r7
 80051bc:	f7fb f98c 	bl	80004d8 <__aeabi_dmul>
 80051c0:	2200      	movs	r2, #0
 80051c2:	4b28      	ldr	r3, [pc, #160]	; (8005264 <__kernel_tan+0x374>)
 80051c4:	f7fa ffd2 	bl	800016c <__adddf3>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4650      	mov	r0, sl
 80051ce:	4659      	mov	r1, fp
 80051d0:	f7fa ffcc 	bl	800016c <__adddf3>
 80051d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051d8:	f7fb f97e 	bl	80004d8 <__aeabi_dmul>
 80051dc:	4632      	mov	r2, r6
 80051de:	462b      	mov	r3, r5
 80051e0:	f7fa ffc4 	bl	800016c <__adddf3>
 80051e4:	e6a9      	b.n	8004f3a <__kernel_tan+0x4a>
 80051e6:	bf00      	nop
 80051e8:	54442d18 	.word	0x54442d18
 80051ec:	3fe921fb 	.word	0x3fe921fb
 80051f0:	33145c07 	.word	0x33145c07
 80051f4:	3c81a626 	.word	0x3c81a626
 80051f8:	74bf7ad4 	.word	0x74bf7ad4
 80051fc:	3efb2a70 	.word	0x3efb2a70
 8005200:	32f0a7e9 	.word	0x32f0a7e9
 8005204:	3f12b80f 	.word	0x3f12b80f
 8005208:	1a8d1068 	.word	0x1a8d1068
 800520c:	3f3026f7 	.word	0x3f3026f7
 8005210:	fee08315 	.word	0xfee08315
 8005214:	3f57dbc8 	.word	0x3f57dbc8
 8005218:	e96e8493 	.word	0xe96e8493
 800521c:	3f8226e3 	.word	0x3f8226e3
 8005220:	1bb341fe 	.word	0x1bb341fe
 8005224:	3faba1ba 	.word	0x3faba1ba
 8005228:	db605373 	.word	0xdb605373
 800522c:	bef375cb 	.word	0xbef375cb
 8005230:	a03792a6 	.word	0xa03792a6
 8005234:	3f147e88 	.word	0x3f147e88
 8005238:	f2f26501 	.word	0xf2f26501
 800523c:	3f4344d8 	.word	0x3f4344d8
 8005240:	c9560328 	.word	0xc9560328
 8005244:	3f6d6d22 	.word	0x3f6d6d22
 8005248:	8406d637 	.word	0x8406d637
 800524c:	3f9664f4 	.word	0x3f9664f4
 8005250:	1110fe7a 	.word	0x1110fe7a
 8005254:	3fc11111 	.word	0x3fc11111
 8005258:	55555563 	.word	0x55555563
 800525c:	3fd55555 	.word	0x3fd55555
 8005260:	3e2fffff 	.word	0x3e2fffff
 8005264:	3ff00000 	.word	0x3ff00000
 8005268:	bff00000 	.word	0xbff00000
 800526c:	3fe59427 	.word	0x3fe59427
 8005270:	4682      	mov	sl, r0
 8005272:	468b      	mov	fp, r1
 8005274:	e663      	b.n	8004f3e <__kernel_tan+0x4e>
 8005276:	bf00      	nop

08005278 <__kernel_cosf>:
 8005278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800527c:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8005280:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8005284:	4606      	mov	r6, r0
 8005286:	4688      	mov	r8, r1
 8005288:	da03      	bge.n	8005292 <__kernel_cosf+0x1a>
 800528a:	f7fb ff0b 	bl	80010a4 <__aeabi_f2iz>
 800528e:	2800      	cmp	r0, #0
 8005290:	d05c      	beq.n	800534c <__kernel_cosf+0xd4>
 8005292:	4631      	mov	r1, r6
 8005294:	4630      	mov	r0, r6
 8005296:	f7fb fd3f 	bl	8000d18 <__aeabi_fmul>
 800529a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800529e:	4605      	mov	r5, r0
 80052a0:	f7fb fd3a 	bl	8000d18 <__aeabi_fmul>
 80052a4:	492b      	ldr	r1, [pc, #172]	; (8005354 <__kernel_cosf+0xdc>)
 80052a6:	4607      	mov	r7, r0
 80052a8:	4628      	mov	r0, r5
 80052aa:	f7fb fd35 	bl	8000d18 <__aeabi_fmul>
 80052ae:	492a      	ldr	r1, [pc, #168]	; (8005358 <__kernel_cosf+0xe0>)
 80052b0:	f7fb fc2a 	bl	8000b08 <__addsf3>
 80052b4:	4629      	mov	r1, r5
 80052b6:	f7fb fd2f 	bl	8000d18 <__aeabi_fmul>
 80052ba:	4928      	ldr	r1, [pc, #160]	; (800535c <__kernel_cosf+0xe4>)
 80052bc:	f7fb fc22 	bl	8000b04 <__aeabi_fsub>
 80052c0:	4629      	mov	r1, r5
 80052c2:	f7fb fd29 	bl	8000d18 <__aeabi_fmul>
 80052c6:	4926      	ldr	r1, [pc, #152]	; (8005360 <__kernel_cosf+0xe8>)
 80052c8:	f7fb fc1e 	bl	8000b08 <__addsf3>
 80052cc:	4629      	mov	r1, r5
 80052ce:	f7fb fd23 	bl	8000d18 <__aeabi_fmul>
 80052d2:	4924      	ldr	r1, [pc, #144]	; (8005364 <__kernel_cosf+0xec>)
 80052d4:	f7fb fc16 	bl	8000b04 <__aeabi_fsub>
 80052d8:	4629      	mov	r1, r5
 80052da:	f7fb fd1d 	bl	8000d18 <__aeabi_fmul>
 80052de:	4922      	ldr	r1, [pc, #136]	; (8005368 <__kernel_cosf+0xf0>)
 80052e0:	f7fb fc12 	bl	8000b08 <__addsf3>
 80052e4:	4629      	mov	r1, r5
 80052e6:	f7fb fd17 	bl	8000d18 <__aeabi_fmul>
 80052ea:	4629      	mov	r1, r5
 80052ec:	f7fb fd14 	bl	8000d18 <__aeabi_fmul>
 80052f0:	4641      	mov	r1, r8
 80052f2:	4605      	mov	r5, r0
 80052f4:	4630      	mov	r0, r6
 80052f6:	f7fb fd0f 	bl	8000d18 <__aeabi_fmul>
 80052fa:	4601      	mov	r1, r0
 80052fc:	4628      	mov	r0, r5
 80052fe:	f7fb fc01 	bl	8000b04 <__aeabi_fsub>
 8005302:	4b1a      	ldr	r3, [pc, #104]	; (800536c <__kernel_cosf+0xf4>)
 8005304:	4605      	mov	r5, r0
 8005306:	429c      	cmp	r4, r3
 8005308:	dc0a      	bgt.n	8005320 <__kernel_cosf+0xa8>
 800530a:	4601      	mov	r1, r0
 800530c:	4638      	mov	r0, r7
 800530e:	f7fb fbf9 	bl	8000b04 <__aeabi_fsub>
 8005312:	4601      	mov	r1, r0
 8005314:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005318:	f7fb fbf4 	bl	8000b04 <__aeabi_fsub>
 800531c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005320:	4b13      	ldr	r3, [pc, #76]	; (8005370 <__kernel_cosf+0xf8>)
 8005322:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005326:	429c      	cmp	r4, r3
 8005328:	bfcc      	ite	gt
 800532a:	4c12      	ldrgt	r4, [pc, #72]	; (8005374 <__kernel_cosf+0xfc>)
 800532c:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8005330:	4621      	mov	r1, r4
 8005332:	f7fb fbe7 	bl	8000b04 <__aeabi_fsub>
 8005336:	4621      	mov	r1, r4
 8005338:	4606      	mov	r6, r0
 800533a:	4638      	mov	r0, r7
 800533c:	f7fb fbe2 	bl	8000b04 <__aeabi_fsub>
 8005340:	4629      	mov	r1, r5
 8005342:	f7fb fbdf 	bl	8000b04 <__aeabi_fsub>
 8005346:	4601      	mov	r1, r0
 8005348:	4630      	mov	r0, r6
 800534a:	e7e5      	b.n	8005318 <__kernel_cosf+0xa0>
 800534c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005350:	e7e4      	b.n	800531c <__kernel_cosf+0xa4>
 8005352:	bf00      	nop
 8005354:	ad47d74e 	.word	0xad47d74e
 8005358:	310f74f6 	.word	0x310f74f6
 800535c:	3493f27c 	.word	0x3493f27c
 8005360:	37d00d01 	.word	0x37d00d01
 8005364:	3ab60b61 	.word	0x3ab60b61
 8005368:	3d2aaaab 	.word	0x3d2aaaab
 800536c:	3e999999 	.word	0x3e999999
 8005370:	3f480000 	.word	0x3f480000
 8005374:	3e900000 	.word	0x3e900000

08005378 <__kernel_rem_pio2f>:
 8005378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800537c:	b0db      	sub	sp, #364	; 0x16c
 800537e:	9202      	str	r2, [sp, #8]
 8005380:	9304      	str	r3, [sp, #16]
 8005382:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8005384:	4bc5      	ldr	r3, [pc, #788]	; (800569c <__kernel_rem_pio2f+0x324>)
 8005386:	9005      	str	r0, [sp, #20]
 8005388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800538c:	9100      	str	r1, [sp, #0]
 800538e:	9301      	str	r3, [sp, #4]
 8005390:	9b04      	ldr	r3, [sp, #16]
 8005392:	3b01      	subs	r3, #1
 8005394:	9303      	str	r3, [sp, #12]
 8005396:	9b02      	ldr	r3, [sp, #8]
 8005398:	1d1a      	adds	r2, r3, #4
 800539a:	f2c0 809b 	blt.w	80054d4 <__kernel_rem_pio2f+0x15c>
 800539e:	1edc      	subs	r4, r3, #3
 80053a0:	bf48      	it	mi
 80053a2:	1d1c      	addmi	r4, r3, #4
 80053a4:	10e4      	asrs	r4, r4, #3
 80053a6:	2500      	movs	r5, #0
 80053a8:	f04f 0a00 	mov.w	sl, #0
 80053ac:	1c67      	adds	r7, r4, #1
 80053ae:	00fb      	lsls	r3, r7, #3
 80053b0:	9306      	str	r3, [sp, #24]
 80053b2:	9b02      	ldr	r3, [sp, #8]
 80053b4:	9a03      	ldr	r2, [sp, #12]
 80053b6:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 80053ba:	9b01      	ldr	r3, [sp, #4]
 80053bc:	1aa6      	subs	r6, r4, r2
 80053be:	eb03 0802 	add.w	r8, r3, r2
 80053c2:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80053c4:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 80053c8:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 80053cc:	4545      	cmp	r5, r8
 80053ce:	f340 8083 	ble.w	80054d8 <__kernel_rem_pio2f+0x160>
 80053d2:	f04f 0800 	mov.w	r8, #0
 80053d6:	f04f 0b00 	mov.w	fp, #0
 80053da:	9b04      	ldr	r3, [sp, #16]
 80053dc:	aa1e      	add	r2, sp, #120	; 0x78
 80053de:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80053e2:	ab46      	add	r3, sp, #280	; 0x118
 80053e4:	9a01      	ldr	r2, [sp, #4]
 80053e6:	4590      	cmp	r8, r2
 80053e8:	f340 809c 	ble.w	8005524 <__kernel_rem_pio2f+0x1ac>
 80053ec:	4613      	mov	r3, r2
 80053ee:	aa0a      	add	r2, sp, #40	; 0x28
 80053f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80053f4:	9308      	str	r3, [sp, #32]
 80053f6:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80053f8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80053fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005400:	9307      	str	r3, [sp, #28]
 8005402:	ad0a      	add	r5, sp, #40	; 0x28
 8005404:	462e      	mov	r6, r5
 8005406:	46c3      	mov	fp, r8
 8005408:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800540c:	ab5a      	add	r3, sp, #360	; 0x168
 800540e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8005412:	f853 4c50 	ldr.w	r4, [r3, #-80]
 8005416:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800541a:	f1bb 0f00 	cmp.w	fp, #0
 800541e:	f300 8086 	bgt.w	800552e <__kernel_rem_pio2f+0x1b6>
 8005422:	4639      	mov	r1, r7
 8005424:	4620      	mov	r0, r4
 8005426:	f000 fc23 	bl	8005c70 <scalbnf>
 800542a:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800542e:	4604      	mov	r4, r0
 8005430:	f7fb fc72 	bl	8000d18 <__aeabi_fmul>
 8005434:	f000 fbda 	bl	8005bec <floorf>
 8005438:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800543c:	f7fb fc6c 	bl	8000d18 <__aeabi_fmul>
 8005440:	4601      	mov	r1, r0
 8005442:	4620      	mov	r0, r4
 8005444:	f7fb fb5e 	bl	8000b04 <__aeabi_fsub>
 8005448:	4604      	mov	r4, r0
 800544a:	f7fb fe2b 	bl	80010a4 <__aeabi_f2iz>
 800544e:	4606      	mov	r6, r0
 8005450:	f7fb fc0e 	bl	8000c70 <__aeabi_i2f>
 8005454:	4601      	mov	r1, r0
 8005456:	4620      	mov	r0, r4
 8005458:	f7fb fb54 	bl	8000b04 <__aeabi_fsub>
 800545c:	2f00      	cmp	r7, #0
 800545e:	4681      	mov	r9, r0
 8005460:	f340 8084 	ble.w	800556c <__kernel_rem_pio2f+0x1f4>
 8005464:	f108 32ff 	add.w	r2, r8, #4294967295
 8005468:	ab0a      	add	r3, sp, #40	; 0x28
 800546a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800546e:	f1c7 0108 	rsb	r1, r7, #8
 8005472:	fa44 f301 	asr.w	r3, r4, r1
 8005476:	441e      	add	r6, r3
 8005478:	408b      	lsls	r3, r1
 800547a:	1ae4      	subs	r4, r4, r3
 800547c:	f1c7 0007 	rsb	r0, r7, #7
 8005480:	ab0a      	add	r3, sp, #40	; 0x28
 8005482:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005486:	4104      	asrs	r4, r0
 8005488:	2c00      	cmp	r4, #0
 800548a:	dd7e      	ble.n	800558a <__kernel_rem_pio2f+0x212>
 800548c:	2200      	movs	r2, #0
 800548e:	4692      	mov	sl, r2
 8005490:	3601      	adds	r6, #1
 8005492:	4590      	cmp	r8, r2
 8005494:	f300 80b0 	bgt.w	80055f8 <__kernel_rem_pio2f+0x280>
 8005498:	2f00      	cmp	r7, #0
 800549a:	dd05      	ble.n	80054a8 <__kernel_rem_pio2f+0x130>
 800549c:	2f01      	cmp	r7, #1
 800549e:	f000 80bd 	beq.w	800561c <__kernel_rem_pio2f+0x2a4>
 80054a2:	2f02      	cmp	r7, #2
 80054a4:	f000 80c5 	beq.w	8005632 <__kernel_rem_pio2f+0x2ba>
 80054a8:	2c02      	cmp	r4, #2
 80054aa:	d16e      	bne.n	800558a <__kernel_rem_pio2f+0x212>
 80054ac:	4649      	mov	r1, r9
 80054ae:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80054b2:	f7fb fb27 	bl	8000b04 <__aeabi_fsub>
 80054b6:	4681      	mov	r9, r0
 80054b8:	f1ba 0f00 	cmp.w	sl, #0
 80054bc:	d065      	beq.n	800558a <__kernel_rem_pio2f+0x212>
 80054be:	4639      	mov	r1, r7
 80054c0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80054c4:	f000 fbd4 	bl	8005c70 <scalbnf>
 80054c8:	4601      	mov	r1, r0
 80054ca:	4648      	mov	r0, r9
 80054cc:	f7fb fb1a 	bl	8000b04 <__aeabi_fsub>
 80054d0:	4681      	mov	r9, r0
 80054d2:	e05a      	b.n	800558a <__kernel_rem_pio2f+0x212>
 80054d4:	2400      	movs	r4, #0
 80054d6:	e766      	b.n	80053a6 <__kernel_rem_pio2f+0x2e>
 80054d8:	42ee      	cmn	r6, r5
 80054da:	d407      	bmi.n	80054ec <__kernel_rem_pio2f+0x174>
 80054dc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80054e0:	f7fb fbc6 	bl	8000c70 <__aeabi_i2f>
 80054e4:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 80054e8:	3501      	adds	r5, #1
 80054ea:	e76f      	b.n	80053cc <__kernel_rem_pio2f+0x54>
 80054ec:	4650      	mov	r0, sl
 80054ee:	e7f9      	b.n	80054e4 <__kernel_rem_pio2f+0x16c>
 80054f0:	9b05      	ldr	r3, [sp, #20]
 80054f2:	f8da 1000 	ldr.w	r1, [sl]
 80054f6:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 80054fa:	f7fb fc0d 	bl	8000d18 <__aeabi_fmul>
 80054fe:	4601      	mov	r1, r0
 8005500:	4630      	mov	r0, r6
 8005502:	f7fb fb01 	bl	8000b08 <__addsf3>
 8005506:	4606      	mov	r6, r0
 8005508:	f109 0901 	add.w	r9, r9, #1
 800550c:	ab46      	add	r3, sp, #280	; 0x118
 800550e:	9a03      	ldr	r2, [sp, #12]
 8005510:	f1aa 0a04 	sub.w	sl, sl, #4
 8005514:	4591      	cmp	r9, r2
 8005516:	ddeb      	ble.n	80054f0 <__kernel_rem_pio2f+0x178>
 8005518:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800551c:	3504      	adds	r5, #4
 800551e:	f108 0801 	add.w	r8, r8, #1
 8005522:	e75f      	b.n	80053e4 <__kernel_rem_pio2f+0x6c>
 8005524:	46aa      	mov	sl, r5
 8005526:	465e      	mov	r6, fp
 8005528:	f04f 0900 	mov.w	r9, #0
 800552c:	e7ef      	b.n	800550e <__kernel_rem_pio2f+0x196>
 800552e:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8005532:	4620      	mov	r0, r4
 8005534:	f7fb fbf0 	bl	8000d18 <__aeabi_fmul>
 8005538:	f7fb fdb4 	bl	80010a4 <__aeabi_f2iz>
 800553c:	f7fb fb98 	bl	8000c70 <__aeabi_i2f>
 8005540:	4649      	mov	r1, r9
 8005542:	9009      	str	r0, [sp, #36]	; 0x24
 8005544:	f7fb fbe8 	bl	8000d18 <__aeabi_fmul>
 8005548:	4601      	mov	r1, r0
 800554a:	4620      	mov	r0, r4
 800554c:	f7fb fada 	bl	8000b04 <__aeabi_fsub>
 8005550:	f7fb fda8 	bl	80010a4 <__aeabi_f2iz>
 8005554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005556:	f10b 3bff 	add.w	fp, fp, #4294967295
 800555a:	f846 0b04 	str.w	r0, [r6], #4
 800555e:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 8005562:	4618      	mov	r0, r3
 8005564:	f7fb fad0 	bl	8000b08 <__addsf3>
 8005568:	4604      	mov	r4, r0
 800556a:	e756      	b.n	800541a <__kernel_rem_pio2f+0xa2>
 800556c:	d106      	bne.n	800557c <__kernel_rem_pio2f+0x204>
 800556e:	f108 33ff 	add.w	r3, r8, #4294967295
 8005572:	aa0a      	add	r2, sp, #40	; 0x28
 8005574:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005578:	1224      	asrs	r4, r4, #8
 800557a:	e785      	b.n	8005488 <__kernel_rem_pio2f+0x110>
 800557c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005580:	f7fb fd7c 	bl	800107c <__aeabi_fcmpge>
 8005584:	4604      	mov	r4, r0
 8005586:	2800      	cmp	r0, #0
 8005588:	d134      	bne.n	80055f4 <__kernel_rem_pio2f+0x27c>
 800558a:	2100      	movs	r1, #0
 800558c:	4648      	mov	r0, r9
 800558e:	f7fb fd57 	bl	8001040 <__aeabi_fcmpeq>
 8005592:	2800      	cmp	r0, #0
 8005594:	f000 809a 	beq.w	80056cc <__kernel_rem_pio2f+0x354>
 8005598:	f108 35ff 	add.w	r5, r8, #4294967295
 800559c:	462b      	mov	r3, r5
 800559e:	2200      	movs	r2, #0
 80055a0:	9901      	ldr	r1, [sp, #4]
 80055a2:	428b      	cmp	r3, r1
 80055a4:	da4d      	bge.n	8005642 <__kernel_rem_pio2f+0x2ca>
 80055a6:	2a00      	cmp	r2, #0
 80055a8:	d07c      	beq.n	80056a4 <__kernel_rem_pio2f+0x32c>
 80055aa:	ab0a      	add	r3, sp, #40	; 0x28
 80055ac:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80055b0:	3f08      	subs	r7, #8
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 8088 	beq.w	80056c8 <__kernel_rem_pio2f+0x350>
 80055b8:	4639      	mov	r1, r7
 80055ba:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80055be:	f000 fb57 	bl	8005c70 <scalbnf>
 80055c2:	46aa      	mov	sl, r5
 80055c4:	4681      	mov	r9, r0
 80055c6:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 80055ca:	af46      	add	r7, sp, #280	; 0x118
 80055cc:	f1ba 0f00 	cmp.w	sl, #0
 80055d0:	f280 80b1 	bge.w	8005736 <__kernel_rem_pio2f+0x3be>
 80055d4:	46a9      	mov	r9, r5
 80055d6:	f04f 0a00 	mov.w	sl, #0
 80055da:	2200      	movs	r2, #0
 80055dc:	f1b9 0f00 	cmp.w	r9, #0
 80055e0:	f2c0 80db 	blt.w	800579a <__kernel_rem_pio2f+0x422>
 80055e4:	a946      	add	r1, sp, #280	; 0x118
 80055e6:	4617      	mov	r7, r2
 80055e8:	f04f 0800 	mov.w	r8, #0
 80055ec:	4b2c      	ldr	r3, [pc, #176]	; (80056a0 <__kernel_rem_pio2f+0x328>)
 80055ee:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 80055f2:	e0c3      	b.n	800577c <__kernel_rem_pio2f+0x404>
 80055f4:	2402      	movs	r4, #2
 80055f6:	e749      	b.n	800548c <__kernel_rem_pio2f+0x114>
 80055f8:	682b      	ldr	r3, [r5, #0]
 80055fa:	f1ba 0f00 	cmp.w	sl, #0
 80055fe:	d108      	bne.n	8005612 <__kernel_rem_pio2f+0x29a>
 8005600:	b11b      	cbz	r3, 800560a <__kernel_rem_pio2f+0x292>
 8005602:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8005606:	602b      	str	r3, [r5, #0]
 8005608:	2301      	movs	r3, #1
 800560a:	469a      	mov	sl, r3
 800560c:	3201      	adds	r2, #1
 800560e:	3504      	adds	r5, #4
 8005610:	e73f      	b.n	8005492 <__kernel_rem_pio2f+0x11a>
 8005612:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8005616:	602b      	str	r3, [r5, #0]
 8005618:	4653      	mov	r3, sl
 800561a:	e7f6      	b.n	800560a <__kernel_rem_pio2f+0x292>
 800561c:	f108 32ff 	add.w	r2, r8, #4294967295
 8005620:	ab0a      	add	r3, sp, #40	; 0x28
 8005622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800562a:	a90a      	add	r1, sp, #40	; 0x28
 800562c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005630:	e73a      	b.n	80054a8 <__kernel_rem_pio2f+0x130>
 8005632:	f108 32ff 	add.w	r2, r8, #4294967295
 8005636:	ab0a      	add	r3, sp, #40	; 0x28
 8005638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800563c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005640:	e7f3      	b.n	800562a <__kernel_rem_pio2f+0x2b2>
 8005642:	a90a      	add	r1, sp, #40	; 0x28
 8005644:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005648:	3b01      	subs	r3, #1
 800564a:	430a      	orrs	r2, r1
 800564c:	e7a8      	b.n	80055a0 <__kernel_rem_pio2f+0x228>
 800564e:	3301      	adds	r3, #1
 8005650:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005654:	2900      	cmp	r1, #0
 8005656:	d0fa      	beq.n	800564e <__kernel_rem_pio2f+0x2d6>
 8005658:	9a04      	ldr	r2, [sp, #16]
 800565a:	f108 0501 	add.w	r5, r8, #1
 800565e:	eb08 0402 	add.w	r4, r8, r2
 8005662:	aa1e      	add	r2, sp, #120	; 0x78
 8005664:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005668:	4498      	add	r8, r3
 800566a:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800566e:	45a8      	cmp	r8, r5
 8005670:	f6ff aec7 	blt.w	8005402 <__kernel_rem_pio2f+0x8a>
 8005674:	9b07      	ldr	r3, [sp, #28]
 8005676:	46a3      	mov	fp, r4
 8005678:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800567c:	f7fb faf8 	bl	8000c70 <__aeabi_i2f>
 8005680:	f04f 0a00 	mov.w	sl, #0
 8005684:	2600      	movs	r6, #0
 8005686:	f84b 0b04 	str.w	r0, [fp], #4
 800568a:	9b03      	ldr	r3, [sp, #12]
 800568c:	459a      	cmp	sl, r3
 800568e:	dd0c      	ble.n	80056aa <__kernel_rem_pio2f+0x332>
 8005690:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 8005694:	465c      	mov	r4, fp
 8005696:	3501      	adds	r5, #1
 8005698:	e7e9      	b.n	800566e <__kernel_rem_pio2f+0x2f6>
 800569a:	bf00      	nop
 800569c:	0800639c 	.word	0x0800639c
 80056a0:	08006370 	.word	0x08006370
 80056a4:	2301      	movs	r3, #1
 80056a6:	9a08      	ldr	r2, [sp, #32]
 80056a8:	e7d2      	b.n	8005650 <__kernel_rem_pio2f+0x2d8>
 80056aa:	9b05      	ldr	r3, [sp, #20]
 80056ac:	f854 0904 	ldr.w	r0, [r4], #-4
 80056b0:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 80056b4:	f7fb fb30 	bl	8000d18 <__aeabi_fmul>
 80056b8:	4601      	mov	r1, r0
 80056ba:	4630      	mov	r0, r6
 80056bc:	f7fb fa24 	bl	8000b08 <__addsf3>
 80056c0:	f10a 0a01 	add.w	sl, sl, #1
 80056c4:	4606      	mov	r6, r0
 80056c6:	e7e0      	b.n	800568a <__kernel_rem_pio2f+0x312>
 80056c8:	3d01      	subs	r5, #1
 80056ca:	e76e      	b.n	80055aa <__kernel_rem_pio2f+0x232>
 80056cc:	9b06      	ldr	r3, [sp, #24]
 80056ce:	9a02      	ldr	r2, [sp, #8]
 80056d0:	4648      	mov	r0, r9
 80056d2:	1a99      	subs	r1, r3, r2
 80056d4:	f000 facc 	bl	8005c70 <scalbnf>
 80056d8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80056dc:	4605      	mov	r5, r0
 80056de:	f7fb fccd 	bl	800107c <__aeabi_fcmpge>
 80056e2:	b300      	cbz	r0, 8005726 <__kernel_rem_pio2f+0x3ae>
 80056e4:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80056e8:	4628      	mov	r0, r5
 80056ea:	f7fb fb15 	bl	8000d18 <__aeabi_fmul>
 80056ee:	f7fb fcd9 	bl	80010a4 <__aeabi_f2iz>
 80056f2:	f7fb fabd 	bl	8000c70 <__aeabi_i2f>
 80056f6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80056fa:	4681      	mov	r9, r0
 80056fc:	f7fb fb0c 	bl	8000d18 <__aeabi_fmul>
 8005700:	4601      	mov	r1, r0
 8005702:	4628      	mov	r0, r5
 8005704:	f7fb f9fe 	bl	8000b04 <__aeabi_fsub>
 8005708:	f7fb fccc 	bl	80010a4 <__aeabi_f2iz>
 800570c:	ab0a      	add	r3, sp, #40	; 0x28
 800570e:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005712:	4648      	mov	r0, r9
 8005714:	f7fb fcc6 	bl	80010a4 <__aeabi_f2iz>
 8005718:	f108 0501 	add.w	r5, r8, #1
 800571c:	ab0a      	add	r3, sp, #40	; 0x28
 800571e:	3708      	adds	r7, #8
 8005720:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8005724:	e748      	b.n	80055b8 <__kernel_rem_pio2f+0x240>
 8005726:	4628      	mov	r0, r5
 8005728:	f7fb fcbc 	bl	80010a4 <__aeabi_f2iz>
 800572c:	ab0a      	add	r3, sp, #40	; 0x28
 800572e:	4645      	mov	r5, r8
 8005730:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005734:	e740      	b.n	80055b8 <__kernel_rem_pio2f+0x240>
 8005736:	ab0a      	add	r3, sp, #40	; 0x28
 8005738:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800573c:	f7fb fa98 	bl	8000c70 <__aeabi_i2f>
 8005740:	4649      	mov	r1, r9
 8005742:	f7fb fae9 	bl	8000d18 <__aeabi_fmul>
 8005746:	4641      	mov	r1, r8
 8005748:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800574c:	4648      	mov	r0, r9
 800574e:	f7fb fae3 	bl	8000d18 <__aeabi_fmul>
 8005752:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005756:	4681      	mov	r9, r0
 8005758:	e738      	b.n	80055cc <__kernel_rem_pio2f+0x254>
 800575a:	f853 0b04 	ldr.w	r0, [r3], #4
 800575e:	f85b 1b04 	ldr.w	r1, [fp], #4
 8005762:	9203      	str	r2, [sp, #12]
 8005764:	9302      	str	r3, [sp, #8]
 8005766:	f7fb fad7 	bl	8000d18 <__aeabi_fmul>
 800576a:	4601      	mov	r1, r0
 800576c:	4638      	mov	r0, r7
 800576e:	f7fb f9cb 	bl	8000b08 <__addsf3>
 8005772:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005776:	4607      	mov	r7, r0
 8005778:	f108 0801 	add.w	r8, r8, #1
 800577c:	9901      	ldr	r1, [sp, #4]
 800577e:	4588      	cmp	r8, r1
 8005780:	dc01      	bgt.n	8005786 <__kernel_rem_pio2f+0x40e>
 8005782:	45c2      	cmp	sl, r8
 8005784:	dae9      	bge.n	800575a <__kernel_rem_pio2f+0x3e2>
 8005786:	ab5a      	add	r3, sp, #360	; 0x168
 8005788:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800578c:	f843 7ca0 	str.w	r7, [r3, #-160]
 8005790:	f109 39ff 	add.w	r9, r9, #4294967295
 8005794:	f10a 0a01 	add.w	sl, sl, #1
 8005798:	e720      	b.n	80055dc <__kernel_rem_pio2f+0x264>
 800579a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800579c:	2b02      	cmp	r3, #2
 800579e:	dc07      	bgt.n	80057b0 <__kernel_rem_pio2f+0x438>
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	dc4d      	bgt.n	8005840 <__kernel_rem_pio2f+0x4c8>
 80057a4:	d02e      	beq.n	8005804 <__kernel_rem_pio2f+0x48c>
 80057a6:	f006 0007 	and.w	r0, r6, #7
 80057aa:	b05b      	add	sp, #364	; 0x16c
 80057ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057b0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80057b2:	2b03      	cmp	r3, #3
 80057b4:	d1f7      	bne.n	80057a6 <__kernel_rem_pio2f+0x42e>
 80057b6:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 80057ba:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 80057be:	46b8      	mov	r8, r7
 80057c0:	46aa      	mov	sl, r5
 80057c2:	f1ba 0f00 	cmp.w	sl, #0
 80057c6:	dc48      	bgt.n	800585a <__kernel_rem_pio2f+0x4e2>
 80057c8:	46a9      	mov	r9, r5
 80057ca:	f1b9 0f01 	cmp.w	r9, #1
 80057ce:	dc5f      	bgt.n	8005890 <__kernel_rem_pio2f+0x518>
 80057d0:	2000      	movs	r0, #0
 80057d2:	2d01      	cmp	r5, #1
 80057d4:	dc75      	bgt.n	80058c2 <__kernel_rem_pio2f+0x54a>
 80057d6:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80057d8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80057da:	2c00      	cmp	r4, #0
 80057dc:	d177      	bne.n	80058ce <__kernel_rem_pio2f+0x556>
 80057de:	9900      	ldr	r1, [sp, #0]
 80057e0:	600a      	str	r2, [r1, #0]
 80057e2:	460a      	mov	r2, r1
 80057e4:	604b      	str	r3, [r1, #4]
 80057e6:	6090      	str	r0, [r2, #8]
 80057e8:	e7dd      	b.n	80057a6 <__kernel_rem_pio2f+0x42e>
 80057ea:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 80057ee:	f7fb f98b 	bl	8000b08 <__addsf3>
 80057f2:	3d01      	subs	r5, #1
 80057f4:	2d00      	cmp	r5, #0
 80057f6:	daf8      	bge.n	80057ea <__kernel_rem_pio2f+0x472>
 80057f8:	b10c      	cbz	r4, 80057fe <__kernel_rem_pio2f+0x486>
 80057fa:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80057fe:	9b00      	ldr	r3, [sp, #0]
 8005800:	6018      	str	r0, [r3, #0]
 8005802:	e7d0      	b.n	80057a6 <__kernel_rem_pio2f+0x42e>
 8005804:	2000      	movs	r0, #0
 8005806:	af32      	add	r7, sp, #200	; 0xc8
 8005808:	e7f4      	b.n	80057f4 <__kernel_rem_pio2f+0x47c>
 800580a:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800580e:	f7fb f97b 	bl	8000b08 <__addsf3>
 8005812:	3f01      	subs	r7, #1
 8005814:	2f00      	cmp	r7, #0
 8005816:	daf8      	bge.n	800580a <__kernel_rem_pio2f+0x492>
 8005818:	b1bc      	cbz	r4, 800584a <__kernel_rem_pio2f+0x4d2>
 800581a:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800581e:	9a00      	ldr	r2, [sp, #0]
 8005820:	4601      	mov	r1, r0
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8005826:	f7fb f96d 	bl	8000b04 <__aeabi_fsub>
 800582a:	2701      	movs	r7, #1
 800582c:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8005830:	42bd      	cmp	r5, r7
 8005832:	da0c      	bge.n	800584e <__kernel_rem_pio2f+0x4d6>
 8005834:	b10c      	cbz	r4, 800583a <__kernel_rem_pio2f+0x4c2>
 8005836:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800583a:	9b00      	ldr	r3, [sp, #0]
 800583c:	6058      	str	r0, [r3, #4]
 800583e:	e7b2      	b.n	80057a6 <__kernel_rem_pio2f+0x42e>
 8005840:	462f      	mov	r7, r5
 8005842:	2000      	movs	r0, #0
 8005844:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8005848:	e7e4      	b.n	8005814 <__kernel_rem_pio2f+0x49c>
 800584a:	4603      	mov	r3, r0
 800584c:	e7e7      	b.n	800581e <__kernel_rem_pio2f+0x4a6>
 800584e:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8005852:	f7fb f959 	bl	8000b08 <__addsf3>
 8005856:	3701      	adds	r7, #1
 8005858:	e7ea      	b.n	8005830 <__kernel_rem_pio2f+0x4b8>
 800585a:	f8d8 3000 	ldr.w	r3, [r8]
 800585e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8005862:	4619      	mov	r1, r3
 8005864:	4610      	mov	r0, r2
 8005866:	9302      	str	r3, [sp, #8]
 8005868:	9201      	str	r2, [sp, #4]
 800586a:	f7fb f94d 	bl	8000b08 <__addsf3>
 800586e:	9a01      	ldr	r2, [sp, #4]
 8005870:	4601      	mov	r1, r0
 8005872:	4681      	mov	r9, r0
 8005874:	4610      	mov	r0, r2
 8005876:	f7fb f945 	bl	8000b04 <__aeabi_fsub>
 800587a:	9b02      	ldr	r3, [sp, #8]
 800587c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005880:	4619      	mov	r1, r3
 8005882:	f7fb f941 	bl	8000b08 <__addsf3>
 8005886:	f848 0904 	str.w	r0, [r8], #-4
 800588a:	f8c8 9000 	str.w	r9, [r8]
 800588e:	e798      	b.n	80057c2 <__kernel_rem_pio2f+0x44a>
 8005890:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8005894:	f8d7 a000 	ldr.w	sl, [r7]
 8005898:	4618      	mov	r0, r3
 800589a:	4651      	mov	r1, sl
 800589c:	9301      	str	r3, [sp, #4]
 800589e:	f7fb f933 	bl	8000b08 <__addsf3>
 80058a2:	9b01      	ldr	r3, [sp, #4]
 80058a4:	4601      	mov	r1, r0
 80058a6:	4680      	mov	r8, r0
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7fb f92b 	bl	8000b04 <__aeabi_fsub>
 80058ae:	4651      	mov	r1, sl
 80058b0:	f7fb f92a 	bl	8000b08 <__addsf3>
 80058b4:	f847 0904 	str.w	r0, [r7], #-4
 80058b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80058bc:	f8c7 8000 	str.w	r8, [r7]
 80058c0:	e783      	b.n	80057ca <__kernel_rem_pio2f+0x452>
 80058c2:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 80058c6:	f7fb f91f 	bl	8000b08 <__addsf3>
 80058ca:	3d01      	subs	r5, #1
 80058cc:	e781      	b.n	80057d2 <__kernel_rem_pio2f+0x45a>
 80058ce:	9900      	ldr	r1, [sp, #0]
 80058d0:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80058d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80058d8:	600a      	str	r2, [r1, #0]
 80058da:	604b      	str	r3, [r1, #4]
 80058dc:	460a      	mov	r2, r1
 80058de:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80058e2:	e780      	b.n	80057e6 <__kernel_rem_pio2f+0x46e>

080058e4 <__kernel_sinf>:
 80058e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058e8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80058ec:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80058f0:	4604      	mov	r4, r0
 80058f2:	460f      	mov	r7, r1
 80058f4:	4691      	mov	r9, r2
 80058f6:	da03      	bge.n	8005900 <__kernel_sinf+0x1c>
 80058f8:	f7fb fbd4 	bl	80010a4 <__aeabi_f2iz>
 80058fc:	2800      	cmp	r0, #0
 80058fe:	d035      	beq.n	800596c <__kernel_sinf+0x88>
 8005900:	4621      	mov	r1, r4
 8005902:	4620      	mov	r0, r4
 8005904:	f7fb fa08 	bl	8000d18 <__aeabi_fmul>
 8005908:	4605      	mov	r5, r0
 800590a:	4601      	mov	r1, r0
 800590c:	4620      	mov	r0, r4
 800590e:	f7fb fa03 	bl	8000d18 <__aeabi_fmul>
 8005912:	4929      	ldr	r1, [pc, #164]	; (80059b8 <__kernel_sinf+0xd4>)
 8005914:	4606      	mov	r6, r0
 8005916:	4628      	mov	r0, r5
 8005918:	f7fb f9fe 	bl	8000d18 <__aeabi_fmul>
 800591c:	4927      	ldr	r1, [pc, #156]	; (80059bc <__kernel_sinf+0xd8>)
 800591e:	f7fb f8f1 	bl	8000b04 <__aeabi_fsub>
 8005922:	4629      	mov	r1, r5
 8005924:	f7fb f9f8 	bl	8000d18 <__aeabi_fmul>
 8005928:	4925      	ldr	r1, [pc, #148]	; (80059c0 <__kernel_sinf+0xdc>)
 800592a:	f7fb f8ed 	bl	8000b08 <__addsf3>
 800592e:	4629      	mov	r1, r5
 8005930:	f7fb f9f2 	bl	8000d18 <__aeabi_fmul>
 8005934:	4923      	ldr	r1, [pc, #140]	; (80059c4 <__kernel_sinf+0xe0>)
 8005936:	f7fb f8e5 	bl	8000b04 <__aeabi_fsub>
 800593a:	4629      	mov	r1, r5
 800593c:	f7fb f9ec 	bl	8000d18 <__aeabi_fmul>
 8005940:	4921      	ldr	r1, [pc, #132]	; (80059c8 <__kernel_sinf+0xe4>)
 8005942:	f7fb f8e1 	bl	8000b08 <__addsf3>
 8005946:	4680      	mov	r8, r0
 8005948:	f1b9 0f00 	cmp.w	r9, #0
 800594c:	d111      	bne.n	8005972 <__kernel_sinf+0x8e>
 800594e:	4601      	mov	r1, r0
 8005950:	4628      	mov	r0, r5
 8005952:	f7fb f9e1 	bl	8000d18 <__aeabi_fmul>
 8005956:	491d      	ldr	r1, [pc, #116]	; (80059cc <__kernel_sinf+0xe8>)
 8005958:	f7fb f8d4 	bl	8000b04 <__aeabi_fsub>
 800595c:	4631      	mov	r1, r6
 800595e:	f7fb f9db 	bl	8000d18 <__aeabi_fmul>
 8005962:	4601      	mov	r1, r0
 8005964:	4620      	mov	r0, r4
 8005966:	f7fb f8cf 	bl	8000b08 <__addsf3>
 800596a:	4604      	mov	r4, r0
 800596c:	4620      	mov	r0, r4
 800596e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005972:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005976:	4638      	mov	r0, r7
 8005978:	f7fb f9ce 	bl	8000d18 <__aeabi_fmul>
 800597c:	4641      	mov	r1, r8
 800597e:	4681      	mov	r9, r0
 8005980:	4630      	mov	r0, r6
 8005982:	f7fb f9c9 	bl	8000d18 <__aeabi_fmul>
 8005986:	4601      	mov	r1, r0
 8005988:	4648      	mov	r0, r9
 800598a:	f7fb f8bb 	bl	8000b04 <__aeabi_fsub>
 800598e:	4629      	mov	r1, r5
 8005990:	f7fb f9c2 	bl	8000d18 <__aeabi_fmul>
 8005994:	4639      	mov	r1, r7
 8005996:	f7fb f8b5 	bl	8000b04 <__aeabi_fsub>
 800599a:	490c      	ldr	r1, [pc, #48]	; (80059cc <__kernel_sinf+0xe8>)
 800599c:	4605      	mov	r5, r0
 800599e:	4630      	mov	r0, r6
 80059a0:	f7fb f9ba 	bl	8000d18 <__aeabi_fmul>
 80059a4:	4601      	mov	r1, r0
 80059a6:	4628      	mov	r0, r5
 80059a8:	f7fb f8ae 	bl	8000b08 <__addsf3>
 80059ac:	4601      	mov	r1, r0
 80059ae:	4620      	mov	r0, r4
 80059b0:	f7fb f8a8 	bl	8000b04 <__aeabi_fsub>
 80059b4:	e7d9      	b.n	800596a <__kernel_sinf+0x86>
 80059b6:	bf00      	nop
 80059b8:	2f2ec9d3 	.word	0x2f2ec9d3
 80059bc:	32d72f34 	.word	0x32d72f34
 80059c0:	3638ef1b 	.word	0x3638ef1b
 80059c4:	39500d01 	.word	0x39500d01
 80059c8:	3c088889 	.word	0x3c088889
 80059cc:	3e2aaaab 	.word	0x3e2aaaab

080059d0 <fabs>:
 80059d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80059d4:	4770      	bx	lr
	...

080059d8 <floor>:
 80059d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059dc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80059e0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80059e4:	2e13      	cmp	r6, #19
 80059e6:	4602      	mov	r2, r0
 80059e8:	460b      	mov	r3, r1
 80059ea:	4607      	mov	r7, r0
 80059ec:	460c      	mov	r4, r1
 80059ee:	4605      	mov	r5, r0
 80059f0:	dc34      	bgt.n	8005a5c <floor+0x84>
 80059f2:	2e00      	cmp	r6, #0
 80059f4:	da15      	bge.n	8005a22 <floor+0x4a>
 80059f6:	a334      	add	r3, pc, #208	; (adr r3, 8005ac8 <floor+0xf0>)
 80059f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fc:	f7fa fbb6 	bl	800016c <__adddf3>
 8005a00:	2200      	movs	r2, #0
 8005a02:	2300      	movs	r3, #0
 8005a04:	f7fa fff8 	bl	80009f8 <__aeabi_dcmpgt>
 8005a08:	b140      	cbz	r0, 8005a1c <floor+0x44>
 8005a0a:	2c00      	cmp	r4, #0
 8005a0c:	da59      	bge.n	8005ac2 <floor+0xea>
 8005a0e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005a12:	ea57 0503 	orrs.w	r5, r7, r3
 8005a16:	d001      	beq.n	8005a1c <floor+0x44>
 8005a18:	2500      	movs	r5, #0
 8005a1a:	4c2d      	ldr	r4, [pc, #180]	; (8005ad0 <floor+0xf8>)
 8005a1c:	4623      	mov	r3, r4
 8005a1e:	462f      	mov	r7, r5
 8005a20:	e025      	b.n	8005a6e <floor+0x96>
 8005a22:	4a2c      	ldr	r2, [pc, #176]	; (8005ad4 <floor+0xfc>)
 8005a24:	fa42 f806 	asr.w	r8, r2, r6
 8005a28:	ea01 0208 	and.w	r2, r1, r8
 8005a2c:	4302      	orrs	r2, r0
 8005a2e:	d01e      	beq.n	8005a6e <floor+0x96>
 8005a30:	a325      	add	r3, pc, #148	; (adr r3, 8005ac8 <floor+0xf0>)
 8005a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a36:	f7fa fb99 	bl	800016c <__adddf3>
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f7fa ffdb 	bl	80009f8 <__aeabi_dcmpgt>
 8005a42:	2800      	cmp	r0, #0
 8005a44:	d0ea      	beq.n	8005a1c <floor+0x44>
 8005a46:	2c00      	cmp	r4, #0
 8005a48:	bfbe      	ittt	lt
 8005a4a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005a4e:	fa43 f606 	asrlt.w	r6, r3, r6
 8005a52:	19a4      	addlt	r4, r4, r6
 8005a54:	2500      	movs	r5, #0
 8005a56:	ea24 0408 	bic.w	r4, r4, r8
 8005a5a:	e7df      	b.n	8005a1c <floor+0x44>
 8005a5c:	2e33      	cmp	r6, #51	; 0x33
 8005a5e:	dd0a      	ble.n	8005a76 <floor+0x9e>
 8005a60:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005a64:	d103      	bne.n	8005a6e <floor+0x96>
 8005a66:	f7fa fb81 	bl	800016c <__adddf3>
 8005a6a:	4607      	mov	r7, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	4638      	mov	r0, r7
 8005a70:	4619      	mov	r1, r3
 8005a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a76:	f04f 32ff 	mov.w	r2, #4294967295
 8005a7a:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8005a7e:	fa22 f808 	lsr.w	r8, r2, r8
 8005a82:	ea18 0f00 	tst.w	r8, r0
 8005a86:	d0f2      	beq.n	8005a6e <floor+0x96>
 8005a88:	a30f      	add	r3, pc, #60	; (adr r3, 8005ac8 <floor+0xf0>)
 8005a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8e:	f7fa fb6d 	bl	800016c <__adddf3>
 8005a92:	2200      	movs	r2, #0
 8005a94:	2300      	movs	r3, #0
 8005a96:	f7fa ffaf 	bl	80009f8 <__aeabi_dcmpgt>
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	d0be      	beq.n	8005a1c <floor+0x44>
 8005a9e:	2c00      	cmp	r4, #0
 8005aa0:	da02      	bge.n	8005aa8 <floor+0xd0>
 8005aa2:	2e14      	cmp	r6, #20
 8005aa4:	d103      	bne.n	8005aae <floor+0xd6>
 8005aa6:	3401      	adds	r4, #1
 8005aa8:	ea25 0508 	bic.w	r5, r5, r8
 8005aac:	e7b6      	b.n	8005a1c <floor+0x44>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005ab4:	fa03 f606 	lsl.w	r6, r3, r6
 8005ab8:	4435      	add	r5, r6
 8005aba:	42bd      	cmp	r5, r7
 8005abc:	bf38      	it	cc
 8005abe:	18e4      	addcc	r4, r4, r3
 8005ac0:	e7f2      	b.n	8005aa8 <floor+0xd0>
 8005ac2:	2500      	movs	r5, #0
 8005ac4:	462c      	mov	r4, r5
 8005ac6:	e7a9      	b.n	8005a1c <floor+0x44>
 8005ac8:	8800759c 	.word	0x8800759c
 8005acc:	7e37e43c 	.word	0x7e37e43c
 8005ad0:	bff00000 	.word	0xbff00000
 8005ad4:	000fffff 	.word	0x000fffff

08005ad8 <scalbn>:
 8005ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ada:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8005ade:	4604      	mov	r4, r0
 8005ae0:	460d      	mov	r5, r1
 8005ae2:	4617      	mov	r7, r2
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	b996      	cbnz	r6, 8005b0e <scalbn+0x36>
 8005ae8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005aec:	4303      	orrs	r3, r0
 8005aee:	d039      	beq.n	8005b64 <scalbn+0x8c>
 8005af0:	4b35      	ldr	r3, [pc, #212]	; (8005bc8 <scalbn+0xf0>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	f7fa fcf0 	bl	80004d8 <__aeabi_dmul>
 8005af8:	4b34      	ldr	r3, [pc, #208]	; (8005bcc <scalbn+0xf4>)
 8005afa:	4604      	mov	r4, r0
 8005afc:	429f      	cmp	r7, r3
 8005afe:	460d      	mov	r5, r1
 8005b00:	da0f      	bge.n	8005b22 <scalbn+0x4a>
 8005b02:	a32d      	add	r3, pc, #180	; (adr r3, 8005bb8 <scalbn+0xe0>)
 8005b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b08:	f7fa fce6 	bl	80004d8 <__aeabi_dmul>
 8005b0c:	e006      	b.n	8005b1c <scalbn+0x44>
 8005b0e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005b12:	4296      	cmp	r6, r2
 8005b14:	d10a      	bne.n	8005b2c <scalbn+0x54>
 8005b16:	4602      	mov	r2, r0
 8005b18:	f7fa fb28 	bl	800016c <__adddf3>
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	460d      	mov	r5, r1
 8005b20:	e020      	b.n	8005b64 <scalbn+0x8c>
 8005b22:	460b      	mov	r3, r1
 8005b24:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005b28:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8005b2c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8005b30:	19b9      	adds	r1, r7, r6
 8005b32:	4291      	cmp	r1, r2
 8005b34:	dd0e      	ble.n	8005b54 <scalbn+0x7c>
 8005b36:	a322      	add	r3, pc, #136	; (adr r3, 8005bc0 <scalbn+0xe8>)
 8005b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8005b40:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8005b44:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8005b48:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8005b4c:	4820      	ldr	r0, [pc, #128]	; (8005bd0 <scalbn+0xf8>)
 8005b4e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8005b52:	e7d9      	b.n	8005b08 <scalbn+0x30>
 8005b54:	2900      	cmp	r1, #0
 8005b56:	dd08      	ble.n	8005b6a <scalbn+0x92>
 8005b58:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005b5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b60:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005b64:	4620      	mov	r0, r4
 8005b66:	4629      	mov	r1, r5
 8005b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b6a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8005b6e:	da16      	bge.n	8005b9e <scalbn+0xc6>
 8005b70:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005b74:	429f      	cmp	r7, r3
 8005b76:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8005b7a:	dd08      	ble.n	8005b8e <scalbn+0xb6>
 8005b7c:	4c15      	ldr	r4, [pc, #84]	; (8005bd4 <scalbn+0xfc>)
 8005b7e:	4814      	ldr	r0, [pc, #80]	; (8005bd0 <scalbn+0xf8>)
 8005b80:	f363 74df 	bfi	r4, r3, #31, #1
 8005b84:	a30e      	add	r3, pc, #56	; (adr r3, 8005bc0 <scalbn+0xe8>)
 8005b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8a:	4621      	mov	r1, r4
 8005b8c:	e7bc      	b.n	8005b08 <scalbn+0x30>
 8005b8e:	4c12      	ldr	r4, [pc, #72]	; (8005bd8 <scalbn+0x100>)
 8005b90:	4812      	ldr	r0, [pc, #72]	; (8005bdc <scalbn+0x104>)
 8005b92:	f363 74df 	bfi	r4, r3, #31, #1
 8005b96:	a308      	add	r3, pc, #32	; (adr r3, 8005bb8 <scalbn+0xe0>)
 8005b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9c:	e7f5      	b.n	8005b8a <scalbn+0xb2>
 8005b9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005ba2:	3136      	adds	r1, #54	; 0x36
 8005ba4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ba8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005bac:	4620      	mov	r0, r4
 8005bae:	4629      	mov	r1, r5
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	4b0b      	ldr	r3, [pc, #44]	; (8005be0 <scalbn+0x108>)
 8005bb4:	e7a8      	b.n	8005b08 <scalbn+0x30>
 8005bb6:	bf00      	nop
 8005bb8:	c2f8f359 	.word	0xc2f8f359
 8005bbc:	01a56e1f 	.word	0x01a56e1f
 8005bc0:	8800759c 	.word	0x8800759c
 8005bc4:	7e37e43c 	.word	0x7e37e43c
 8005bc8:	43500000 	.word	0x43500000
 8005bcc:	ffff3cb0 	.word	0xffff3cb0
 8005bd0:	8800759c 	.word	0x8800759c
 8005bd4:	7e37e43c 	.word	0x7e37e43c
 8005bd8:	01a56e1f 	.word	0x01a56e1f
 8005bdc:	c2f8f359 	.word	0xc2f8f359
 8005be0:	3c900000 	.word	0x3c900000

08005be4 <fabsf>:
 8005be4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005be8:	4770      	bx	lr
	...

08005bec <floorf>:
 8005bec:	b570      	push	{r4, r5, r6, lr}
 8005bee:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8005bf2:	3d7f      	subs	r5, #127	; 0x7f
 8005bf4:	2d16      	cmp	r5, #22
 8005bf6:	4601      	mov	r1, r0
 8005bf8:	4604      	mov	r4, r0
 8005bfa:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8005bfe:	dc26      	bgt.n	8005c4e <floorf+0x62>
 8005c00:	2d00      	cmp	r5, #0
 8005c02:	da0e      	bge.n	8005c22 <floorf+0x36>
 8005c04:	4917      	ldr	r1, [pc, #92]	; (8005c64 <floorf+0x78>)
 8005c06:	f7fa ff7f 	bl	8000b08 <__addsf3>
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	f7fb fa40 	bl	8001090 <__aeabi_fcmpgt>
 8005c10:	b128      	cbz	r0, 8005c1e <floorf+0x32>
 8005c12:	2c00      	cmp	r4, #0
 8005c14:	da23      	bge.n	8005c5e <floorf+0x72>
 8005c16:	4b14      	ldr	r3, [pc, #80]	; (8005c68 <floorf+0x7c>)
 8005c18:	2e00      	cmp	r6, #0
 8005c1a:	bf18      	it	ne
 8005c1c:	461c      	movne	r4, r3
 8005c1e:	4621      	mov	r1, r4
 8005c20:	e01b      	b.n	8005c5a <floorf+0x6e>
 8005c22:	4e12      	ldr	r6, [pc, #72]	; (8005c6c <floorf+0x80>)
 8005c24:	412e      	asrs	r6, r5
 8005c26:	4230      	tst	r0, r6
 8005c28:	d017      	beq.n	8005c5a <floorf+0x6e>
 8005c2a:	490e      	ldr	r1, [pc, #56]	; (8005c64 <floorf+0x78>)
 8005c2c:	f7fa ff6c 	bl	8000b08 <__addsf3>
 8005c30:	2100      	movs	r1, #0
 8005c32:	f7fb fa2d 	bl	8001090 <__aeabi_fcmpgt>
 8005c36:	2800      	cmp	r0, #0
 8005c38:	d0f1      	beq.n	8005c1e <floorf+0x32>
 8005c3a:	2c00      	cmp	r4, #0
 8005c3c:	bfbe      	ittt	lt
 8005c3e:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8005c42:	fa43 f505 	asrlt.w	r5, r3, r5
 8005c46:	1964      	addlt	r4, r4, r5
 8005c48:	ea24 0406 	bic.w	r4, r4, r6
 8005c4c:	e7e7      	b.n	8005c1e <floorf+0x32>
 8005c4e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8005c52:	d302      	bcc.n	8005c5a <floorf+0x6e>
 8005c54:	f7fa ff58 	bl	8000b08 <__addsf3>
 8005c58:	4601      	mov	r1, r0
 8005c5a:	4608      	mov	r0, r1
 8005c5c:	bd70      	pop	{r4, r5, r6, pc}
 8005c5e:	2400      	movs	r4, #0
 8005c60:	e7dd      	b.n	8005c1e <floorf+0x32>
 8005c62:	bf00      	nop
 8005c64:	7149f2ca 	.word	0x7149f2ca
 8005c68:	bf800000 	.word	0xbf800000
 8005c6c:	007fffff 	.word	0x007fffff

08005c70 <scalbnf>:
 8005c70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8005c74:	b538      	push	{r3, r4, r5, lr}
 8005c76:	4603      	mov	r3, r0
 8005c78:	460d      	mov	r5, r1
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	d02a      	beq.n	8005cd4 <scalbnf+0x64>
 8005c7e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005c82:	d304      	bcc.n	8005c8e <scalbnf+0x1e>
 8005c84:	4601      	mov	r1, r0
 8005c86:	f7fa ff3f 	bl	8000b08 <__addsf3>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	e022      	b.n	8005cd4 <scalbnf+0x64>
 8005c8e:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8005c92:	d117      	bne.n	8005cc4 <scalbnf+0x54>
 8005c94:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8005c98:	f7fb f83e 	bl	8000d18 <__aeabi_fmul>
 8005c9c:	4a17      	ldr	r2, [pc, #92]	; (8005cfc <scalbnf+0x8c>)
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	4295      	cmp	r5, r2
 8005ca2:	db0b      	blt.n	8005cbc <scalbnf+0x4c>
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8005caa:	3a19      	subs	r2, #25
 8005cac:	442a      	add	r2, r5
 8005cae:	2afe      	cmp	r2, #254	; 0xfe
 8005cb0:	dd0a      	ble.n	8005cc8 <scalbnf+0x58>
 8005cb2:	4913      	ldr	r1, [pc, #76]	; (8005d00 <scalbnf+0x90>)
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f361 001e 	bfi	r0, r1, #0, #31
 8005cba:	e000      	b.n	8005cbe <scalbnf+0x4e>
 8005cbc:	4911      	ldr	r1, [pc, #68]	; (8005d04 <scalbnf+0x94>)
 8005cbe:	f7fb f82b 	bl	8000d18 <__aeabi_fmul>
 8005cc2:	e7e2      	b.n	8005c8a <scalbnf+0x1a>
 8005cc4:	0dd2      	lsrs	r2, r2, #23
 8005cc6:	e7f1      	b.n	8005cac <scalbnf+0x3c>
 8005cc8:	2a00      	cmp	r2, #0
 8005cca:	dd05      	ble.n	8005cd8 <scalbnf+0x68>
 8005ccc:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8005cd0:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	bd38      	pop	{r3, r4, r5, pc}
 8005cd8:	f112 0f16 	cmn.w	r2, #22
 8005cdc:	da05      	bge.n	8005cea <scalbnf+0x7a>
 8005cde:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005ce2:	4295      	cmp	r5, r2
 8005ce4:	dce5      	bgt.n	8005cb2 <scalbnf+0x42>
 8005ce6:	4907      	ldr	r1, [pc, #28]	; (8005d04 <scalbnf+0x94>)
 8005ce8:	e7e4      	b.n	8005cb4 <scalbnf+0x44>
 8005cea:	3219      	adds	r2, #25
 8005cec:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8005cf0:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8005cf4:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8005cf8:	e7e1      	b.n	8005cbe <scalbnf+0x4e>
 8005cfa:	bf00      	nop
 8005cfc:	ffff3cb0 	.word	0xffff3cb0
 8005d00:	7149f2ca 	.word	0x7149f2ca
 8005d04:	0da24260 	.word	0x0da24260

08005d08 <_init>:
 8005d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0a:	bf00      	nop
 8005d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d0e:	bc08      	pop	{r3}
 8005d10:	469e      	mov	lr, r3
 8005d12:	4770      	bx	lr

08005d14 <_fini>:
 8005d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d16:	bf00      	nop
 8005d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d1a:	bc08      	pop	{r3}
 8005d1c:	469e      	mov	lr, r3
 8005d1e:	4770      	bx	lr
