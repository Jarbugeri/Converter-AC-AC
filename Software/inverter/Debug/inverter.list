
inverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000688  080071f8  080071f8  000171f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007880  08007880  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08007880  08007880  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007880  08007880  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007880  08007880  00017880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007884  08007884  00017884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000070  080078f8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  080078f8  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f166  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000256c  00000000  00000000  0002f1ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00031770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  000323e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b18  00000000  00000000  00032f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de95  00000000  00000000  0004ba50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ca86  00000000  00000000  000598e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e636b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ccc  00000000  00000000  000e63c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080071e0 	.word	0x080071e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080071e0 	.word	0x080071e0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_frsub>:
 8000afc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b00:	e002      	b.n	8000b08 <__addsf3>
 8000b02:	bf00      	nop

08000b04 <__aeabi_fsub>:
 8000b04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b08 <__addsf3>:
 8000b08:	0042      	lsls	r2, r0, #1
 8000b0a:	bf1f      	itttt	ne
 8000b0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b10:	ea92 0f03 	teqne	r2, r3
 8000b14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1c:	d06a      	beq.n	8000bf4 <__addsf3+0xec>
 8000b1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b26:	bfc1      	itttt	gt
 8000b28:	18d2      	addgt	r2, r2, r3
 8000b2a:	4041      	eorgt	r1, r0
 8000b2c:	4048      	eorgt	r0, r1
 8000b2e:	4041      	eorgt	r1, r0
 8000b30:	bfb8      	it	lt
 8000b32:	425b      	neglt	r3, r3
 8000b34:	2b19      	cmp	r3, #25
 8000b36:	bf88      	it	hi
 8000b38:	4770      	bxhi	lr
 8000b3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b56:	bf18      	it	ne
 8000b58:	4249      	negne	r1, r1
 8000b5a:	ea92 0f03 	teq	r2, r3
 8000b5e:	d03f      	beq.n	8000be0 <__addsf3+0xd8>
 8000b60:	f1a2 0201 	sub.w	r2, r2, #1
 8000b64:	fa41 fc03 	asr.w	ip, r1, r3
 8000b68:	eb10 000c 	adds.w	r0, r0, ip
 8000b6c:	f1c3 0320 	rsb	r3, r3, #32
 8000b70:	fa01 f103 	lsl.w	r1, r1, r3
 8000b74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__addsf3+0x78>
 8000b7a:	4249      	negs	r1, r1
 8000b7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b84:	d313      	bcc.n	8000bae <__addsf3+0xa6>
 8000b86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b8a:	d306      	bcc.n	8000b9a <__addsf3+0x92>
 8000b8c:	0840      	lsrs	r0, r0, #1
 8000b8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b92:	f102 0201 	add.w	r2, r2, #1
 8000b96:	2afe      	cmp	r2, #254	; 0xfe
 8000b98:	d251      	bcs.n	8000c3e <__addsf3+0x136>
 8000b9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba2:	bf08      	it	eq
 8000ba4:	f020 0001 	biceq.w	r0, r0, #1
 8000ba8:	ea40 0003 	orr.w	r0, r0, r3
 8000bac:	4770      	bx	lr
 8000bae:	0049      	lsls	r1, r1, #1
 8000bb0:	eb40 0000 	adc.w	r0, r0, r0
 8000bb4:	3a01      	subs	r2, #1
 8000bb6:	bf28      	it	cs
 8000bb8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bbc:	d2ed      	bcs.n	8000b9a <__addsf3+0x92>
 8000bbe:	fab0 fc80 	clz	ip, r0
 8000bc2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bc6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bca:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bce:	bfaa      	itet	ge
 8000bd0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bd4:	4252      	neglt	r2, r2
 8000bd6:	4318      	orrge	r0, r3
 8000bd8:	bfbc      	itt	lt
 8000bda:	40d0      	lsrlt	r0, r2
 8000bdc:	4318      	orrlt	r0, r3
 8000bde:	4770      	bx	lr
 8000be0:	f092 0f00 	teq	r2, #0
 8000be4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000be8:	bf06      	itte	eq
 8000bea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bee:	3201      	addeq	r2, #1
 8000bf0:	3b01      	subne	r3, #1
 8000bf2:	e7b5      	b.n	8000b60 <__addsf3+0x58>
 8000bf4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bfc:	bf18      	it	ne
 8000bfe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c02:	d021      	beq.n	8000c48 <__addsf3+0x140>
 8000c04:	ea92 0f03 	teq	r2, r3
 8000c08:	d004      	beq.n	8000c14 <__addsf3+0x10c>
 8000c0a:	f092 0f00 	teq	r2, #0
 8000c0e:	bf08      	it	eq
 8000c10:	4608      	moveq	r0, r1
 8000c12:	4770      	bx	lr
 8000c14:	ea90 0f01 	teq	r0, r1
 8000c18:	bf1c      	itt	ne
 8000c1a:	2000      	movne	r0, #0
 8000c1c:	4770      	bxne	lr
 8000c1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c22:	d104      	bne.n	8000c2e <__addsf3+0x126>
 8000c24:	0040      	lsls	r0, r0, #1
 8000c26:	bf28      	it	cs
 8000c28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c2c:	4770      	bx	lr
 8000c2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c32:	bf3c      	itt	cc
 8000c34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c38:	4770      	bxcc	lr
 8000c3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	4770      	bx	lr
 8000c48:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c4c:	bf16      	itet	ne
 8000c4e:	4608      	movne	r0, r1
 8000c50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c54:	4601      	movne	r1, r0
 8000c56:	0242      	lsls	r2, r0, #9
 8000c58:	bf06      	itte	eq
 8000c5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c5e:	ea90 0f01 	teqeq	r0, r1
 8000c62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_ui2f>:
 8000c68:	f04f 0300 	mov.w	r3, #0
 8000c6c:	e004      	b.n	8000c78 <__aeabi_i2f+0x8>
 8000c6e:	bf00      	nop

08000c70 <__aeabi_i2f>:
 8000c70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c74:	bf48      	it	mi
 8000c76:	4240      	negmi	r0, r0
 8000c78:	ea5f 0c00 	movs.w	ip, r0
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c84:	4601      	mov	r1, r0
 8000c86:	f04f 0000 	mov.w	r0, #0
 8000c8a:	e01c      	b.n	8000cc6 <__aeabi_l2f+0x2a>

08000c8c <__aeabi_ul2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e00a      	b.n	8000cb0 <__aeabi_l2f+0x14>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_l2f>:
 8000c9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca0:	bf08      	it	eq
 8000ca2:	4770      	bxeq	lr
 8000ca4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ca8:	d502      	bpl.n	8000cb0 <__aeabi_l2f+0x14>
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	ea5f 0c01 	movs.w	ip, r1
 8000cb4:	bf02      	ittt	eq
 8000cb6:	4684      	moveq	ip, r0
 8000cb8:	4601      	moveq	r1, r0
 8000cba:	2000      	moveq	r0, #0
 8000cbc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cc0:	bf08      	it	eq
 8000cc2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cca:	fabc f28c 	clz	r2, ip
 8000cce:	3a08      	subs	r2, #8
 8000cd0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cd4:	db10      	blt.n	8000cf8 <__aeabi_l2f+0x5c>
 8000cd6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cda:	4463      	add	r3, ip
 8000cdc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce0:	f1c2 0220 	rsb	r2, r2, #32
 8000ce4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ce8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cec:	eb43 0002 	adc.w	r0, r3, r2
 8000cf0:	bf08      	it	eq
 8000cf2:	f020 0001 	biceq.w	r0, r0, #1
 8000cf6:	4770      	bx	lr
 8000cf8:	f102 0220 	add.w	r2, r2, #32
 8000cfc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d00:	f1c2 0220 	rsb	r2, r2, #32
 8000d04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d08:	fa21 f202 	lsr.w	r2, r1, r2
 8000d0c:	eb43 0002 	adc.w	r0, r3, r2
 8000d10:	bf08      	it	eq
 8000d12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_fmul>:
 8000d18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d20:	bf1e      	ittt	ne
 8000d22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d26:	ea92 0f0c 	teqne	r2, ip
 8000d2a:	ea93 0f0c 	teqne	r3, ip
 8000d2e:	d06f      	beq.n	8000e10 <__aeabi_fmul+0xf8>
 8000d30:	441a      	add	r2, r3
 8000d32:	ea80 0c01 	eor.w	ip, r0, r1
 8000d36:	0240      	lsls	r0, r0, #9
 8000d38:	bf18      	it	ne
 8000d3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d3e:	d01e      	beq.n	8000d7e <__aeabi_fmul+0x66>
 8000d40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d58:	bf3e      	ittt	cc
 8000d5a:	0049      	lslcc	r1, r1, #1
 8000d5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d60:	005b      	lslcc	r3, r3, #1
 8000d62:	ea40 0001 	orr.w	r0, r0, r1
 8000d66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d6a:	2afd      	cmp	r2, #253	; 0xfd
 8000d6c:	d81d      	bhi.n	8000daa <__aeabi_fmul+0x92>
 8000d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	4770      	bx	lr
 8000d7e:	f090 0f00 	teq	r0, #0
 8000d82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d86:	bf08      	it	eq
 8000d88:	0249      	lsleq	r1, r1, #9
 8000d8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d92:	3a7f      	subs	r2, #127	; 0x7f
 8000d94:	bfc2      	ittt	gt
 8000d96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d9e:	4770      	bxgt	lr
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	3a01      	subs	r2, #1
 8000daa:	dc5d      	bgt.n	8000e68 <__aeabi_fmul+0x150>
 8000dac:	f112 0f19 	cmn.w	r2, #25
 8000db0:	bfdc      	itt	le
 8000db2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000db6:	4770      	bxle	lr
 8000db8:	f1c2 0200 	rsb	r2, r2, #0
 8000dbc:	0041      	lsls	r1, r0, #1
 8000dbe:	fa21 f102 	lsr.w	r1, r1, r2
 8000dc2:	f1c2 0220 	rsb	r2, r2, #32
 8000dc6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dce:	f140 0000 	adc.w	r0, r0, #0
 8000dd2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dd6:	bf08      	it	eq
 8000dd8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ddc:	4770      	bx	lr
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0040      	lsleq	r0, r0, #1
 8000dea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dee:	3a01      	subeq	r2, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fmul+0xce>
 8000df2:	ea40 000c 	orr.w	r0, r0, ip
 8000df6:	f093 0f00 	teq	r3, #0
 8000dfa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfe:	bf02      	ittt	eq
 8000e00:	0049      	lsleq	r1, r1, #1
 8000e02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e06:	3b01      	subeq	r3, #1
 8000e08:	d0f9      	beq.n	8000dfe <__aeabi_fmul+0xe6>
 8000e0a:	ea41 010c 	orr.w	r1, r1, ip
 8000e0e:	e78f      	b.n	8000d30 <__aeabi_fmul+0x18>
 8000e10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e14:	ea92 0f0c 	teq	r2, ip
 8000e18:	bf18      	it	ne
 8000e1a:	ea93 0f0c 	teqne	r3, ip
 8000e1e:	d00a      	beq.n	8000e36 <__aeabi_fmul+0x11e>
 8000e20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e24:	bf18      	it	ne
 8000e26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	d1d8      	bne.n	8000dde <__aeabi_fmul+0xc6>
 8000e2c:	ea80 0001 	eor.w	r0, r0, r1
 8000e30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e34:	4770      	bx	lr
 8000e36:	f090 0f00 	teq	r0, #0
 8000e3a:	bf17      	itett	ne
 8000e3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e40:	4608      	moveq	r0, r1
 8000e42:	f091 0f00 	teqne	r1, #0
 8000e46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e4a:	d014      	beq.n	8000e76 <__aeabi_fmul+0x15e>
 8000e4c:	ea92 0f0c 	teq	r2, ip
 8000e50:	d101      	bne.n	8000e56 <__aeabi_fmul+0x13e>
 8000e52:	0242      	lsls	r2, r0, #9
 8000e54:	d10f      	bne.n	8000e76 <__aeabi_fmul+0x15e>
 8000e56:	ea93 0f0c 	teq	r3, ip
 8000e5a:	d103      	bne.n	8000e64 <__aeabi_fmul+0x14c>
 8000e5c:	024b      	lsls	r3, r1, #9
 8000e5e:	bf18      	it	ne
 8000e60:	4608      	movne	r0, r1
 8000e62:	d108      	bne.n	8000e76 <__aeabi_fmul+0x15e>
 8000e64:	ea80 0001 	eor.w	r0, r0, r1
 8000e68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e74:	4770      	bx	lr
 8000e76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e7e:	4770      	bx	lr

08000e80 <__aeabi_fdiv>:
 8000e80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e88:	bf1e      	ittt	ne
 8000e8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e8e:	ea92 0f0c 	teqne	r2, ip
 8000e92:	ea93 0f0c 	teqne	r3, ip
 8000e96:	d069      	beq.n	8000f6c <__aeabi_fdiv+0xec>
 8000e98:	eba2 0203 	sub.w	r2, r2, r3
 8000e9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000ea0:	0249      	lsls	r1, r1, #9
 8000ea2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ea6:	d037      	beq.n	8000f18 <__aeabi_fdiv+0x98>
 8000ea8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000eb0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000eb4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	bf38      	it	cc
 8000ebc:	005b      	lslcc	r3, r3, #1
 8000ebe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ec2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	bf24      	itt	cs
 8000eca:	1a5b      	subcs	r3, r3, r1
 8000ecc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ed0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ed4:	bf24      	itt	cs
 8000ed6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ede:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ee2:	bf24      	itt	cs
 8000ee4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ee8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ef6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	bf18      	it	ne
 8000efe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f02:	d1e0      	bne.n	8000ec6 <__aeabi_fdiv+0x46>
 8000f04:	2afd      	cmp	r2, #253	; 0xfd
 8000f06:	f63f af50 	bhi.w	8000daa <__aeabi_fmul+0x92>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f10:	bf08      	it	eq
 8000f12:	f020 0001 	biceq.w	r0, r0, #1
 8000f16:	4770      	bx	lr
 8000f18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f20:	327f      	adds	r2, #127	; 0x7f
 8000f22:	bfc2      	ittt	gt
 8000f24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f2c:	4770      	bxgt	lr
 8000f2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	3a01      	subs	r2, #1
 8000f38:	e737      	b.n	8000daa <__aeabi_fmul+0x92>
 8000f3a:	f092 0f00 	teq	r2, #0
 8000f3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0040      	lsleq	r0, r0, #1
 8000f46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f4a:	3a01      	subeq	r2, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fdiv+0xc2>
 8000f4e:	ea40 000c 	orr.w	r0, r0, ip
 8000f52:	f093 0f00 	teq	r3, #0
 8000f56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f5a:	bf02      	ittt	eq
 8000f5c:	0049      	lsleq	r1, r1, #1
 8000f5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f62:	3b01      	subeq	r3, #1
 8000f64:	d0f9      	beq.n	8000f5a <__aeabi_fdiv+0xda>
 8000f66:	ea41 010c 	orr.w	r1, r1, ip
 8000f6a:	e795      	b.n	8000e98 <__aeabi_fdiv+0x18>
 8000f6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f70:	ea92 0f0c 	teq	r2, ip
 8000f74:	d108      	bne.n	8000f88 <__aeabi_fdiv+0x108>
 8000f76:	0242      	lsls	r2, r0, #9
 8000f78:	f47f af7d 	bne.w	8000e76 <__aeabi_fmul+0x15e>
 8000f7c:	ea93 0f0c 	teq	r3, ip
 8000f80:	f47f af70 	bne.w	8000e64 <__aeabi_fmul+0x14c>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e776      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	d104      	bne.n	8000f98 <__aeabi_fdiv+0x118>
 8000f8e:	024b      	lsls	r3, r1, #9
 8000f90:	f43f af4c 	beq.w	8000e2c <__aeabi_fmul+0x114>
 8000f94:	4608      	mov	r0, r1
 8000f96:	e76e      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000f98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f9c:	bf18      	it	ne
 8000f9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fa2:	d1ca      	bne.n	8000f3a <__aeabi_fdiv+0xba>
 8000fa4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fa8:	f47f af5c 	bne.w	8000e64 <__aeabi_fmul+0x14c>
 8000fac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fb0:	f47f af3c 	bne.w	8000e2c <__aeabi_fmul+0x114>
 8000fb4:	e75f      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000fb6:	bf00      	nop

08000fb8 <__gesf2>:
 8000fb8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fbc:	e006      	b.n	8000fcc <__cmpsf2+0x4>
 8000fbe:	bf00      	nop

08000fc0 <__lesf2>:
 8000fc0:	f04f 0c01 	mov.w	ip, #1
 8000fc4:	e002      	b.n	8000fcc <__cmpsf2+0x4>
 8000fc6:	bf00      	nop

08000fc8 <__cmpsf2>:
 8000fc8:	f04f 0c01 	mov.w	ip, #1
 8000fcc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fd0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fdc:	bf18      	it	ne
 8000fde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fe2:	d011      	beq.n	8001008 <__cmpsf2+0x40>
 8000fe4:	b001      	add	sp, #4
 8000fe6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fea:	bf18      	it	ne
 8000fec:	ea90 0f01 	teqne	r0, r1
 8000ff0:	bf58      	it	pl
 8000ff2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ff6:	bf88      	it	hi
 8000ff8:	17c8      	asrhi	r0, r1, #31
 8000ffa:	bf38      	it	cc
 8000ffc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001000:	bf18      	it	ne
 8001002:	f040 0001 	orrne.w	r0, r0, #1
 8001006:	4770      	bx	lr
 8001008:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800100c:	d102      	bne.n	8001014 <__cmpsf2+0x4c>
 800100e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001012:	d105      	bne.n	8001020 <__cmpsf2+0x58>
 8001014:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001018:	d1e4      	bne.n	8000fe4 <__cmpsf2+0x1c>
 800101a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800101e:	d0e1      	beq.n	8000fe4 <__cmpsf2+0x1c>
 8001020:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <__aeabi_cfrcmple>:
 8001028:	4684      	mov	ip, r0
 800102a:	4608      	mov	r0, r1
 800102c:	4661      	mov	r1, ip
 800102e:	e7ff      	b.n	8001030 <__aeabi_cfcmpeq>

08001030 <__aeabi_cfcmpeq>:
 8001030:	b50f      	push	{r0, r1, r2, r3, lr}
 8001032:	f7ff ffc9 	bl	8000fc8 <__cmpsf2>
 8001036:	2800      	cmp	r0, #0
 8001038:	bf48      	it	mi
 800103a:	f110 0f00 	cmnmi.w	r0, #0
 800103e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001040 <__aeabi_fcmpeq>:
 8001040:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001044:	f7ff fff4 	bl	8001030 <__aeabi_cfcmpeq>
 8001048:	bf0c      	ite	eq
 800104a:	2001      	moveq	r0, #1
 800104c:	2000      	movne	r0, #0
 800104e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001052:	bf00      	nop

08001054 <__aeabi_fcmplt>:
 8001054:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001058:	f7ff ffea 	bl	8001030 <__aeabi_cfcmpeq>
 800105c:	bf34      	ite	cc
 800105e:	2001      	movcc	r0, #1
 8001060:	2000      	movcs	r0, #0
 8001062:	f85d fb08 	ldr.w	pc, [sp], #8
 8001066:	bf00      	nop

08001068 <__aeabi_fcmple>:
 8001068:	f84d ed08 	str.w	lr, [sp, #-8]!
 800106c:	f7ff ffe0 	bl	8001030 <__aeabi_cfcmpeq>
 8001070:	bf94      	ite	ls
 8001072:	2001      	movls	r0, #1
 8001074:	2000      	movhi	r0, #0
 8001076:	f85d fb08 	ldr.w	pc, [sp], #8
 800107a:	bf00      	nop

0800107c <__aeabi_fcmpge>:
 800107c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001080:	f7ff ffd2 	bl	8001028 <__aeabi_cfrcmple>
 8001084:	bf94      	ite	ls
 8001086:	2001      	movls	r0, #1
 8001088:	2000      	movhi	r0, #0
 800108a:	f85d fb08 	ldr.w	pc, [sp], #8
 800108e:	bf00      	nop

08001090 <__aeabi_fcmpgt>:
 8001090:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001094:	f7ff ffc8 	bl	8001028 <__aeabi_cfrcmple>
 8001098:	bf34      	ite	cc
 800109a:	2001      	movcc	r0, #1
 800109c:	2000      	movcs	r0, #0
 800109e:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a2:	bf00      	nop

080010a4 <__aeabi_f2iz>:
 80010a4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010a8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010ac:	d30f      	bcc.n	80010ce <__aeabi_f2iz+0x2a>
 80010ae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010b2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010b6:	d90d      	bls.n	80010d4 <__aeabi_f2iz+0x30>
 80010b8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010c0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010c4:	fa23 f002 	lsr.w	r0, r3, r2
 80010c8:	bf18      	it	ne
 80010ca:	4240      	negne	r0, r0
 80010cc:	4770      	bx	lr
 80010ce:	f04f 0000 	mov.w	r0, #0
 80010d2:	4770      	bx	lr
 80010d4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010d8:	d101      	bne.n	80010de <__aeabi_f2iz+0x3a>
 80010da:	0242      	lsls	r2, r0, #9
 80010dc:	d105      	bne.n	80010ea <__aeabi_f2iz+0x46>
 80010de:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010e2:	bf08      	it	eq
 80010e4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr

080010f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f6:	f000 fb97 	bl	8001828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010fa:	f000 f825 	bl	8001148 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010fe:	f000 f975 	bl	80013ec <MX_GPIO_Init>
  MX_ADC1_Init();
 8001102:	f000 f87d 	bl	8001200 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001106:	f000 f8b9 	bl	800127c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  lcd16x2_init_4bits(RS_GPIO_Port, RS_Pin, EN_Pin,
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	9303      	str	r3, [sp, #12]
 800110e:	2340      	movs	r3, #64	; 0x40
 8001110:	9302      	str	r3, [sp, #8]
 8001112:	2320      	movs	r3, #32
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	2310      	movs	r3, #16
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <main+0x4c>)
 800111c:	2208      	movs	r2, #8
 800111e:	2102      	movs	r1, #2
 8001120:	4806      	ldr	r0, [pc, #24]	; (800113c <main+0x4c>)
 8001122:	f003 f9c7 	bl	80044b4 <lcd16x2_init_4bits>
		  DATA0_GPIO_Port, DATA0_Pin, DATA1_Pin, DATA2_Pin, DATA3_Pin);

  app_init(&app);
 8001126:	4806      	ldr	r0, [pc, #24]	; (8001140 <main+0x50>)
 8001128:	f002 fdf8 	bl	8003d1c <app_init>


  HAL_TIM_Base_Start_IT(&htim1);
 800112c:	4805      	ldr	r0, [pc, #20]	; (8001144 <main+0x54>)
 800112e:	f001 fdc3 	bl	8002cb8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	app_loop(&app);
 8001132:	4803      	ldr	r0, [pc, #12]	; (8001140 <main+0x50>)
 8001134:	f002 ff0e 	bl	8003f54 <app_loop>
 8001138:	e7fb      	b.n	8001132 <main+0x42>
 800113a:	bf00      	nop
 800113c:	40010800 	.word	0x40010800
 8001140:	20000130 	.word	0x20000130
 8001144:	200000e8 	.word	0x200000e8

08001148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b094      	sub	sp, #80	; 0x50
 800114c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001152:	2228      	movs	r2, #40	; 0x28
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f003 fdd0 	bl	8004cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001178:	2301      	movs	r3, #1
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800117c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001186:	2301      	movs	r3, #1
 8001188:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118a:	2302      	movs	r3, #2
 800118c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800118e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001192:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001194:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001198:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800119e:	4618      	mov	r0, r3
 80011a0:	f001 f892 	bl	80022c8 <HAL_RCC_OscConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011aa:	f000 f9a7 	bl	80014fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ae:	230f      	movs	r3, #15
 80011b0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b2:	2302      	movs	r3, #2
 80011b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2102      	movs	r1, #2
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 fafc 	bl	80027c8 <HAL_RCC_ClockConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0x92>
  {
    Error_Handler();
 80011d6:	f000 f991 	bl	80014fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011da:	2302      	movs	r3, #2
 80011dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80011de:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80011e2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 fc60 	bl	8002aac <HAL_RCCEx_PeriphCLKConfig>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011f2:	f000 f983 	bl	80014fc <Error_Handler>
  }
}
 80011f6:	bf00      	nop
 80011f8:	3750      	adds	r7, #80	; 0x50
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <MX_ADC1_Init+0x74>)
 8001212:	4a19      	ldr	r2, [pc, #100]	; (8001278 <MX_ADC1_Init+0x78>)
 8001214:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_ADC1_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <MX_ADC1_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_ADC1_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_ADC1_Init+0x74>)
 800122a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800122e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001230:	4b10      	ldr	r3, [pc, #64]	; (8001274 <MX_ADC1_Init+0x74>)
 8001232:	2200      	movs	r2, #0
 8001234:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_ADC1_Init+0x74>)
 8001238:	2201      	movs	r2, #1
 800123a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800123c:	480d      	ldr	r0, [pc, #52]	; (8001274 <MX_ADC1_Init+0x74>)
 800123e:	f000 fb79 	bl	8001934 <HAL_ADC_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001248:	f000 f958 	bl	80014fc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800124c:	2309      	movs	r3, #9
 800124e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001250:	2301      	movs	r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	4619      	mov	r1, r3
 800125c:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_ADC1_Init+0x74>)
 800125e:	f000 fc41 	bl	8001ae4 <HAL_ADC_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001268:	f000 f948 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200000b8 	.word	0x200000b8
 8001278:	40012400 	.word	0x40012400

0800127c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b096      	sub	sp, #88	; 0x58
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001282:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001290:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800129a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]
 80012aa:	615a      	str	r2, [r3, #20]
 80012ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2220      	movs	r2, #32
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f003 fd21 	bl	8004cfc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012ba:	4b4a      	ldr	r3, [pc, #296]	; (80013e4 <MX_TIM1_Init+0x168>)
 80012bc:	4a4a      	ldr	r2, [pc, #296]	; (80013e8 <MX_TIM1_Init+0x16c>)
 80012be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012c0:	4b48      	ldr	r3, [pc, #288]	; (80013e4 <MX_TIM1_Init+0x168>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c6:	4b47      	ldr	r3, [pc, #284]	; (80013e4 <MX_TIM1_Init+0x168>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6000;
 80012cc:	4b45      	ldr	r3, [pc, #276]	; (80013e4 <MX_TIM1_Init+0x168>)
 80012ce:	f241 7270 	movw	r2, #6000	; 0x1770
 80012d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d4:	4b43      	ldr	r3, [pc, #268]	; (80013e4 <MX_TIM1_Init+0x168>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012da:	4b42      	ldr	r3, [pc, #264]	; (80013e4 <MX_TIM1_Init+0x168>)
 80012dc:	2200      	movs	r2, #0
 80012de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e0:	4b40      	ldr	r3, [pc, #256]	; (80013e4 <MX_TIM1_Init+0x168>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012e6:	483f      	ldr	r0, [pc, #252]	; (80013e4 <MX_TIM1_Init+0x168>)
 80012e8:	f001 fc96 	bl	8002c18 <HAL_TIM_Base_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012f2:	f000 f903 	bl	80014fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001300:	4619      	mov	r1, r3
 8001302:	4838      	ldr	r0, [pc, #224]	; (80013e4 <MX_TIM1_Init+0x168>)
 8001304:	f001 ff42 	bl	800318c <HAL_TIM_ConfigClockSource>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800130e:	f000 f8f5 	bl	80014fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001312:	4834      	ldr	r0, [pc, #208]	; (80013e4 <MX_TIM1_Init+0x168>)
 8001314:	f001 fd1c 	bl	8002d50 <HAL_TIM_PWM_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800131e:	f000 f8ed 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800132a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800132e:	4619      	mov	r1, r3
 8001330:	482c      	ldr	r0, [pc, #176]	; (80013e4 <MX_TIM1_Init+0x168>)
 8001332:	f002 fa89 	bl	8003848 <HAL_TIMEx_MasterConfigSynchronization>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800133c:	f000 f8de 	bl	80014fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001340:	2360      	movs	r3, #96	; 0x60
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001348:	2300      	movs	r3, #0
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800134c:	2308      	movs	r3, #8
 800134e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001354:	2300      	movs	r3, #0
 8001356:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001358:	2300      	movs	r3, #0
 800135a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800135c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001360:	2200      	movs	r2, #0
 8001362:	4619      	mov	r1, r3
 8001364:	481f      	ldr	r0, [pc, #124]	; (80013e4 <MX_TIM1_Init+0x168>)
 8001366:	f001 fe53 	bl	8003010 <HAL_TIM_PWM_ConfigChannel>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001370:	f000 f8c4 	bl	80014fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001378:	2204      	movs	r2, #4
 800137a:	4619      	mov	r1, r3
 800137c:	4819      	ldr	r0, [pc, #100]	; (80013e4 <MX_TIM1_Init+0x168>)
 800137e:	f001 fe47 	bl	8003010 <HAL_TIM_PWM_ConfigChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001388:	f000 f8b8 	bl	80014fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800138c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001390:	2208      	movs	r2, #8
 8001392:	4619      	mov	r1, r3
 8001394:	4813      	ldr	r0, [pc, #76]	; (80013e4 <MX_TIM1_Init+0x168>)
 8001396:	f001 fe3b 	bl	8003010 <HAL_TIM_PWM_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80013a0:	f000 f8ac 	bl	80014fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 144;
 80013b0:	2390      	movs	r3, #144	; 0x90
 80013b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	4619      	mov	r1, r3
 80013c6:	4807      	ldr	r0, [pc, #28]	; (80013e4 <MX_TIM1_Init+0x168>)
 80013c8:	f002 fa96 	bl	80038f8 <HAL_TIMEx_ConfigBreakDeadTime>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80013d2:	f000 f893 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013d6:	4803      	ldr	r0, [pc, #12]	; (80013e4 <MX_TIM1_Init+0x168>)
 80013d8:	f000 f92a 	bl	8001630 <HAL_TIM_MspPostInit>

}
 80013dc:	bf00      	nop
 80013de:	3758      	adds	r7, #88	; 0x58
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200000e8 	.word	0x200000e8
 80013e8:	40012c00 	.word	0x40012c00

080013ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f2:	f107 0310 	add.w	r3, r7, #16
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001400:	4b33      	ldr	r3, [pc, #204]	; (80014d0 <MX_GPIO_Init+0xe4>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a32      	ldr	r2, [pc, #200]	; (80014d0 <MX_GPIO_Init+0xe4>)
 8001406:	f043 0310 	orr.w	r3, r3, #16
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <MX_GPIO_Init+0xe4>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0310 	and.w	r3, r3, #16
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001418:	4b2d      	ldr	r3, [pc, #180]	; (80014d0 <MX_GPIO_Init+0xe4>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a2c      	ldr	r2, [pc, #176]	; (80014d0 <MX_GPIO_Init+0xe4>)
 800141e:	f043 0320 	orr.w	r3, r3, #32
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <MX_GPIO_Init+0xe4>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f003 0320 	and.w	r3, r3, #32
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	4b27      	ldr	r3, [pc, #156]	; (80014d0 <MX_GPIO_Init+0xe4>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a26      	ldr	r2, [pc, #152]	; (80014d0 <MX_GPIO_Init+0xe4>)
 8001436:	f043 0304 	orr.w	r3, r3, #4
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <MX_GPIO_Init+0xe4>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001448:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <MX_GPIO_Init+0xe4>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a20      	ldr	r2, [pc, #128]	; (80014d0 <MX_GPIO_Init+0xe4>)
 800144e:	f043 0308 	orr.w	r3, r3, #8
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <MX_GPIO_Init+0xe4>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001466:	481b      	ldr	r0, [pc, #108]	; (80014d4 <MX_GPIO_Init+0xe8>)
 8001468:	f000 ff15 	bl	8002296 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|EN_Pin|DATA0_Pin
 800146c:	2200      	movs	r2, #0
 800146e:	21fe      	movs	r1, #254	; 0xfe
 8001470:	4819      	ldr	r0, [pc, #100]	; (80014d8 <MX_GPIO_Init+0xec>)
 8001472:	f000 ff10 	bl	8002296 <HAL_GPIO_WritePin>
                          |DATA1_Pin|DATA2_Pin|DATA3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 8001476:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800147a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147c:	2301      	movs	r3, #1
 800147e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2302      	movs	r3, #2
 8001486:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8001488:	f107 0310 	add.w	r3, r7, #16
 800148c:	4619      	mov	r1, r3
 800148e:	4811      	ldr	r0, [pc, #68]	; (80014d4 <MX_GPIO_Init+0xe8>)
 8001490:	f000 fd70 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin RW_Pin EN_Pin DATA0_Pin
                           DATA1_Pin DATA2_Pin DATA3_Pin */
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|EN_Pin|DATA0_Pin
 8001494:	23fe      	movs	r3, #254	; 0xfe
 8001496:	613b      	str	r3, [r7, #16]
                          |DATA1_Pin|DATA2_Pin|DATA3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001498:	2301      	movs	r3, #1
 800149a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2302      	movs	r3, #2
 80014a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	4619      	mov	r1, r3
 80014aa:	480b      	ldr	r0, [pc, #44]	; (80014d8 <MX_GPIO_Init+0xec>)
 80014ac:	f000 fd62 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT1_Pin BT2_Pin BT3_Pin BT4_Pin */
  GPIO_InitStruct.Pin = BT1_Pin|BT2_Pin|BT3_Pin|BT4_Pin;
 80014b0:	23f0      	movs	r3, #240	; 0xf0
 80014b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014bc:	f107 0310 	add.w	r3, r7, #16
 80014c0:	4619      	mov	r1, r3
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <MX_GPIO_Init+0xf0>)
 80014c4:	f000 fd56 	bl	8001f74 <HAL_GPIO_Init>

}
 80014c8:	bf00      	nop
 80014ca:	3720      	adds	r7, #32
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40011000 	.word	0x40011000
 80014d8:	40010800 	.word	0x40010800
 80014dc:	40010c00 	.word	0x40010c00

080014e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

//Callback timer
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	app_isr(&app);
 80014e8:	4803      	ldr	r0, [pc, #12]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80014ea:	f002 fd8f 	bl	800400c <app_isr>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000130 	.word	0x20000130

080014fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001500:	b672      	cpsid	i
}
 8001502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001504:	e7fe      	b.n	8001504 <Error_Handler+0x8>
	...

08001508 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <HAL_MspInit+0x5c>)
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	4a14      	ldr	r2, [pc, #80]	; (8001564 <HAL_MspInit+0x5c>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6193      	str	r3, [r2, #24]
 800151a:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_MspInit+0x5c>)
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <HAL_MspInit+0x5c>)
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <HAL_MspInit+0x5c>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001530:	61d3      	str	r3, [r2, #28]
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <HAL_MspInit+0x5c>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <HAL_MspInit+0x60>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	4a04      	ldr	r2, [pc, #16]	; (8001568 <HAL_MspInit+0x60>)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	40021000 	.word	0x40021000
 8001568:	40010000 	.word	0x40010000

0800156c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0310 	add.w	r3, r7, #16
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a14      	ldr	r2, [pc, #80]	; (80015d8 <HAL_ADC_MspInit+0x6c>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d121      	bne.n	80015d0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <HAL_ADC_MspInit+0x70>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	4a12      	ldr	r2, [pc, #72]	; (80015dc <HAL_ADC_MspInit+0x70>)
 8001592:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001596:	6193      	str	r3, [r2, #24]
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <HAL_ADC_MspInit+0x70>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a4:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <HAL_ADC_MspInit+0x70>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	4a0c      	ldr	r2, [pc, #48]	; (80015dc <HAL_ADC_MspInit+0x70>)
 80015aa:	f043 0308 	orr.w	r3, r3, #8
 80015ae:	6193      	str	r3, [r2, #24]
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <HAL_ADC_MspInit+0x70>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f003 0308 	and.w	r3, r3, #8
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_VOUT_Pin;
 80015bc:	2302      	movs	r3, #2
 80015be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c0:	2303      	movs	r3, #3
 80015c2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_VOUT_GPIO_Port, &GPIO_InitStruct);
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	4619      	mov	r1, r3
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <HAL_ADC_MspInit+0x74>)
 80015cc:	f000 fcd2 	bl	8001f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015d0:	bf00      	nop
 80015d2:	3720      	adds	r7, #32
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40012400 	.word	0x40012400
 80015dc:	40021000 	.word	0x40021000
 80015e0:	40010c00 	.word	0x40010c00

080015e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a0d      	ldr	r2, [pc, #52]	; (8001628 <HAL_TIM_Base_MspInit+0x44>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d113      	bne.n	800161e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015f6:	4b0d      	ldr	r3, [pc, #52]	; (800162c <HAL_TIM_Base_MspInit+0x48>)
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	4a0c      	ldr	r2, [pc, #48]	; (800162c <HAL_TIM_Base_MspInit+0x48>)
 80015fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001600:	6193      	str	r3, [r2, #24]
 8001602:	4b0a      	ldr	r3, [pc, #40]	; (800162c <HAL_TIM_Base_MspInit+0x48>)
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	2019      	movs	r0, #25
 8001614:	f000 fc77 	bl	8001f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001618:	2019      	movs	r0, #25
 800161a:	f000 fc90 	bl	8001f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40012c00 	.word	0x40012c00
 800162c:	40021000 	.word	0x40021000

08001630 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0310 	add.w	r3, r7, #16
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a29      	ldr	r2, [pc, #164]	; (80016f0 <HAL_TIM_MspPostInit+0xc0>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d14b      	bne.n	80016e8 <HAL_TIM_MspPostInit+0xb8>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001650:	4b28      	ldr	r3, [pc, #160]	; (80016f4 <HAL_TIM_MspPostInit+0xc4>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	4a27      	ldr	r2, [pc, #156]	; (80016f4 <HAL_TIM_MspPostInit+0xc4>)
 8001656:	f043 0308 	orr.w	r3, r3, #8
 800165a:	6193      	str	r3, [r2, #24]
 800165c:	4b25      	ldr	r3, [pc, #148]	; (80016f4 <HAL_TIM_MspPostInit+0xc4>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001668:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <HAL_TIM_MspPostInit+0xc4>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	4a21      	ldr	r2, [pc, #132]	; (80016f4 <HAL_TIM_MspPostInit+0xc4>)
 800166e:	f043 0304 	orr.w	r3, r3, #4
 8001672:	6193      	str	r3, [r2, #24]
 8001674:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <HAL_TIM_MspPostInit+0xc4>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = SAN_Pin;
 8001680:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001684:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001686:	2302      	movs	r3, #2
 8001688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2302      	movs	r3, #2
 800168c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAN_GPIO_Port, &GPIO_InitStruct);
 800168e:	f107 0310 	add.w	r3, r7, #16
 8001692:	4619      	mov	r1, r3
 8001694:	4818      	ldr	r0, [pc, #96]	; (80016f8 <HAL_TIM_MspPostInit+0xc8>)
 8001696:	f000 fc6d 	bl	8001f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SBN_Pin|SCN_Pin;
 800169a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800169e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016a4:	2303      	movs	r3, #3
 80016a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a8:	f107 0310 	add.w	r3, r7, #16
 80016ac:	4619      	mov	r1, r3
 80016ae:	4812      	ldr	r0, [pc, #72]	; (80016f8 <HAL_TIM_MspPostInit+0xc8>)
 80016b0:	f000 fc60 	bl	8001f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAP_Pin;
 80016b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2302      	movs	r3, #2
 80016c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAP_GPIO_Port, &GPIO_InitStruct);
 80016c2:	f107 0310 	add.w	r3, r7, #16
 80016c6:	4619      	mov	r1, r3
 80016c8:	480c      	ldr	r0, [pc, #48]	; (80016fc <HAL_TIM_MspPostInit+0xcc>)
 80016ca:	f000 fc53 	bl	8001f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SBP_Pin|SCP_Pin;
 80016ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016dc:	f107 0310 	add.w	r3, r7, #16
 80016e0:	4619      	mov	r1, r3
 80016e2:	4806      	ldr	r0, [pc, #24]	; (80016fc <HAL_TIM_MspPostInit+0xcc>)
 80016e4:	f000 fc46 	bl	8001f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016e8:	bf00      	nop
 80016ea:	3720      	adds	r7, #32
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40012c00 	.word	0x40012c00
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010c00 	.word	0x40010c00
 80016fc:	40010800 	.word	0x40010800

08001700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <NMI_Handler+0x4>

08001706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <HardFault_Handler+0x4>

0800170c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <MemManage_Handler+0x4>

08001712 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <BusFault_Handler+0x4>

08001718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <UsageFault_Handler+0x4>

0800171e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr

0800172a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr

08001736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr

08001742 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001746:	f000 f8b5 	bl	80018b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <TIM1_UP_IRQHandler+0x10>)
 8001756:	f001 fb53 	bl	8002e00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200000e8 	.word	0x200000e8

08001764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800176c:	4a14      	ldr	r2, [pc, #80]	; (80017c0 <_sbrk+0x5c>)
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <_sbrk+0x60>)
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001778:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <_sbrk+0x64>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <_sbrk+0x64>)
 8001782:	4a12      	ldr	r2, [pc, #72]	; (80017cc <_sbrk+0x68>)
 8001784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <_sbrk+0x64>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	429a      	cmp	r2, r3
 8001792:	d207      	bcs.n	80017a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001794:	f003 fa88 	bl	8004ca8 <__errno>
 8001798:	4603      	mov	r3, r0
 800179a:	220c      	movs	r2, #12
 800179c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800179e:	f04f 33ff 	mov.w	r3, #4294967295
 80017a2:	e009      	b.n	80017b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <_sbrk+0x64>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <_sbrk+0x64>)
 80017b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017b6:	68fb      	ldr	r3, [r7, #12]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20002800 	.word	0x20002800
 80017c4:	00000400 	.word	0x00000400
 80017c8:	2000008c 	.word	0x2000008c
 80017cc:	20000338 	.word	0x20000338

080017d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017dc:	f7ff fff8 	bl	80017d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e0:	480b      	ldr	r0, [pc, #44]	; (8001810 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017e2:	490c      	ldr	r1, [pc, #48]	; (8001814 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017e4:	4a0c      	ldr	r2, [pc, #48]	; (8001818 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e8:	e002      	b.n	80017f0 <LoopCopyDataInit>

080017ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ee:	3304      	adds	r3, #4

080017f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f4:	d3f9      	bcc.n	80017ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f6:	4a09      	ldr	r2, [pc, #36]	; (800181c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017f8:	4c09      	ldr	r4, [pc, #36]	; (8001820 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017fc:	e001      	b.n	8001802 <LoopFillZerobss>

080017fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001800:	3204      	adds	r2, #4

08001802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001804:	d3fb      	bcc.n	80017fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001806:	f003 fa55 	bl	8004cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800180a:	f7ff fc71 	bl	80010f0 <main>
  bx lr
 800180e:	4770      	bx	lr
  ldr r0, =_sdata
 8001810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001814:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001818:	08007888 	.word	0x08007888
  ldr r2, =_sbss
 800181c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001820:	20000334 	.word	0x20000334

08001824 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001824:	e7fe      	b.n	8001824 <ADC1_2_IRQHandler>
	...

08001828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <HAL_Init+0x28>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a07      	ldr	r2, [pc, #28]	; (8001850 <HAL_Init+0x28>)
 8001832:	f043 0310 	orr.w	r3, r3, #16
 8001836:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001838:	2003      	movs	r0, #3
 800183a:	f000 fb59 	bl	8001ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800183e:	200f      	movs	r0, #15
 8001840:	f000 f808 	bl	8001854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001844:	f7ff fe60 	bl	8001508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40022000 	.word	0x40022000

08001854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_InitTick+0x54>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_InitTick+0x58>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186a:	fbb3 f3f1 	udiv	r3, r3, r1
 800186e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001872:	4618      	mov	r0, r3
 8001874:	f000 fb71 	bl	8001f5a <HAL_SYSTICK_Config>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e00e      	b.n	80018a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b0f      	cmp	r3, #15
 8001886:	d80a      	bhi.n	800189e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001888:	2200      	movs	r2, #0
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	f04f 30ff 	mov.w	r0, #4294967295
 8001890:	f000 fb39 	bl	8001f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001894:	4a06      	ldr	r2, [pc, #24]	; (80018b0 <HAL_InitTick+0x5c>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	e000      	b.n	80018a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000000 	.word	0x20000000
 80018ac:	20000008 	.word	0x20000008
 80018b0:	20000004 	.word	0x20000004

080018b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <HAL_IncTick+0x1c>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <HAL_IncTick+0x20>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4413      	add	r3, r2
 80018c4:	4a03      	ldr	r2, [pc, #12]	; (80018d4 <HAL_IncTick+0x20>)
 80018c6:	6013      	str	r3, [r2, #0]
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	20000008 	.word	0x20000008
 80018d4:	20000320 	.word	0x20000320

080018d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return uwTick;
 80018dc:	4b02      	ldr	r3, [pc, #8]	; (80018e8 <HAL_GetTick+0x10>)
 80018de:	681b      	ldr	r3, [r3, #0]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	20000320 	.word	0x20000320

080018ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f4:	f7ff fff0 	bl	80018d8 <HAL_GetTick>
 80018f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001904:	d005      	beq.n	8001912 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <HAL_Delay+0x44>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4413      	add	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001912:	bf00      	nop
 8001914:	f7ff ffe0 	bl	80018d8 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	429a      	cmp	r2, r3
 8001922:	d8f7      	bhi.n	8001914 <HAL_Delay+0x28>
  {
  }
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000008 	.word	0x20000008

08001934 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e0be      	b.n	8001ad4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001960:	2b00      	cmp	r3, #0
 8001962:	d109      	bne.n	8001978 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff fdfa 	bl	800156c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 f9ab 	bl	8001cd4 <ADC_ConversionStop_Disable>
 800197e:	4603      	mov	r3, r0
 8001980:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001986:	f003 0310 	and.w	r3, r3, #16
 800198a:	2b00      	cmp	r3, #0
 800198c:	f040 8099 	bne.w	8001ac2 <HAL_ADC_Init+0x18e>
 8001990:	7dfb      	ldrb	r3, [r7, #23]
 8001992:	2b00      	cmp	r3, #0
 8001994:	f040 8095 	bne.w	8001ac2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019a0:	f023 0302 	bic.w	r3, r3, #2
 80019a4:	f043 0202 	orr.w	r2, r3, #2
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019b4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	7b1b      	ldrb	r3, [r3, #12]
 80019ba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80019bc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019cc:	d003      	beq.n	80019d6 <HAL_ADC_Init+0xa2>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d102      	bne.n	80019dc <HAL_ADC_Init+0xa8>
 80019d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019da:	e000      	b.n	80019de <HAL_ADC_Init+0xaa>
 80019dc:	2300      	movs	r3, #0
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	7d1b      	ldrb	r3, [r3, #20]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d119      	bne.n	8001a20 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	7b1b      	ldrb	r3, [r3, #12]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d109      	bne.n	8001a08 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	035a      	lsls	r2, r3, #13
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	e00b      	b.n	8001a20 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0c:	f043 0220 	orr.w	r2, r3, #32
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	f043 0201 	orr.w	r2, r3, #1
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	4b28      	ldr	r3, [pc, #160]	; (8001adc <HAL_ADC_Init+0x1a8>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	68b9      	ldr	r1, [r7, #8]
 8001a44:	430b      	orrs	r3, r1
 8001a46:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a50:	d003      	beq.n	8001a5a <HAL_ADC_Init+0x126>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d104      	bne.n	8001a64 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	051b      	lsls	r3, r3, #20
 8001a62:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <HAL_ADC_Init+0x1ac>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d10b      	bne.n	8001aa0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a92:	f023 0303 	bic.w	r3, r3, #3
 8001a96:	f043 0201 	orr.w	r2, r3, #1
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a9e:	e018      	b.n	8001ad2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa4:	f023 0312 	bic.w	r3, r3, #18
 8001aa8:	f043 0210 	orr.w	r2, r3, #16
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab4:	f043 0201 	orr.w	r2, r3, #1
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ac0:	e007      	b.n	8001ad2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac6:	f043 0210 	orr.w	r2, r3, #16
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	ffe1f7fd 	.word	0xffe1f7fd
 8001ae0:	ff1f0efe 	.word	0xff1f0efe

08001ae4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x20>
 8001b00:	2302      	movs	r3, #2
 8001b02:	e0dc      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x1da>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b06      	cmp	r3, #6
 8001b12:	d81c      	bhi.n	8001b4e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	3b05      	subs	r3, #5
 8001b26:	221f      	movs	r2, #31
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	4019      	ands	r1, r3
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	6818      	ldr	r0, [r3, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3b05      	subs	r3, #5
 8001b40:	fa00 f203 	lsl.w	r2, r0, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	635a      	str	r2, [r3, #52]	; 0x34
 8001b4c:	e03c      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b0c      	cmp	r3, #12
 8001b54:	d81c      	bhi.n	8001b90 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	3b23      	subs	r3, #35	; 0x23
 8001b68:	221f      	movs	r2, #31
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	4019      	ands	r1, r3
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	6818      	ldr	r0, [r3, #0]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	3b23      	subs	r3, #35	; 0x23
 8001b82:	fa00 f203 	lsl.w	r2, r0, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b8e:	e01b      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3b41      	subs	r3, #65	; 0x41
 8001ba2:	221f      	movs	r2, #31
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	4019      	ands	r1, r3
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	3b41      	subs	r3, #65	; 0x41
 8001bbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b09      	cmp	r3, #9
 8001bce:	d91c      	bls.n	8001c0a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68d9      	ldr	r1, [r3, #12]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	4413      	add	r3, r2
 8001be0:	3b1e      	subs	r3, #30
 8001be2:	2207      	movs	r2, #7
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	4019      	ands	r1, r3
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	6898      	ldr	r0, [r3, #8]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3b1e      	subs	r3, #30
 8001bfc:	fa00 f203 	lsl.w	r2, r0, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	60da      	str	r2, [r3, #12]
 8001c08:	e019      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6919      	ldr	r1, [r3, #16]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4613      	mov	r3, r2
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	4413      	add	r3, r2
 8001c1a:	2207      	movs	r2, #7
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	4019      	ands	r1, r3
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	6898      	ldr	r0, [r3, #8]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4413      	add	r3, r2
 8001c32:	fa00 f203 	lsl.w	r2, r0, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b10      	cmp	r3, #16
 8001c44:	d003      	beq.n	8001c4e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c4a:	2b11      	cmp	r3, #17
 8001c4c:	d132      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a1d      	ldr	r2, [pc, #116]	; (8001cc8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d125      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d126      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c74:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2b10      	cmp	r3, #16
 8001c7c:	d11a      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c7e:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <HAL_ADC_ConfigChannel+0x1e8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a13      	ldr	r2, [pc, #76]	; (8001cd0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001c84:	fba2 2303 	umull	r2, r3, r2, r3
 8001c88:	0c9a      	lsrs	r2, r3, #18
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c94:	e002      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f9      	bne.n	8001c96 <HAL_ADC_ConfigChannel+0x1b2>
 8001ca2:	e007      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	f043 0220 	orr.w	r2, r3, #32
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	40012400 	.word	0x40012400
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	431bde83 	.word	0x431bde83

08001cd4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d12e      	bne.n	8001d4c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 0201 	bic.w	r2, r2, #1
 8001cfc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cfe:	f7ff fdeb 	bl	80018d8 <HAL_GetTick>
 8001d02:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d04:	e01b      	b.n	8001d3e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d06:	f7ff fde7 	bl	80018d8 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d914      	bls.n	8001d3e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d10d      	bne.n	8001d3e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d26:	f043 0210 	orr.w	r2, r3, #16
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d32:	f043 0201 	orr.w	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e007      	b.n	8001d4e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d0dc      	beq.n	8001d06 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <__NVIC_SetPriorityGrouping+0x44>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d74:	4013      	ands	r3, r2
 8001d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d8a:	4a04      	ldr	r2, [pc, #16]	; (8001d9c <__NVIC_SetPriorityGrouping+0x44>)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	60d3      	str	r3, [r2, #12]
}
 8001d90:	bf00      	nop
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001da4:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <__NVIC_GetPriorityGrouping+0x18>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	0a1b      	lsrs	r3, r3, #8
 8001daa:	f003 0307 	and.w	r3, r3, #7
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	db0b      	blt.n	8001de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	f003 021f 	and.w	r2, r3, #31
 8001dd4:	4906      	ldr	r1, [pc, #24]	; (8001df0 <__NVIC_EnableIRQ+0x34>)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	095b      	lsrs	r3, r3, #5
 8001ddc:	2001      	movs	r0, #1
 8001dde:	fa00 f202 	lsl.w	r2, r0, r2
 8001de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	e000e100 	.word	0xe000e100

08001df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	6039      	str	r1, [r7, #0]
 8001dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	db0a      	blt.n	8001e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	490c      	ldr	r1, [pc, #48]	; (8001e40 <__NVIC_SetPriority+0x4c>)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	0112      	lsls	r2, r2, #4
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	440b      	add	r3, r1
 8001e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e1c:	e00a      	b.n	8001e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	4908      	ldr	r1, [pc, #32]	; (8001e44 <__NVIC_SetPriority+0x50>)
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	3b04      	subs	r3, #4
 8001e2c:	0112      	lsls	r2, r2, #4
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	440b      	add	r3, r1
 8001e32:	761a      	strb	r2, [r3, #24]
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	e000e100 	.word	0xe000e100
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b089      	sub	sp, #36	; 0x24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f1c3 0307 	rsb	r3, r3, #7
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	bf28      	it	cs
 8001e66:	2304      	movcs	r3, #4
 8001e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	2b06      	cmp	r3, #6
 8001e70:	d902      	bls.n	8001e78 <NVIC_EncodePriority+0x30>
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3b03      	subs	r3, #3
 8001e76:	e000      	b.n	8001e7a <NVIC_EncodePriority+0x32>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43da      	mvns	r2, r3
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	401a      	ands	r2, r3
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e90:	f04f 31ff 	mov.w	r1, #4294967295
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9a:	43d9      	mvns	r1, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea0:	4313      	orrs	r3, r2
         );
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3724      	adds	r7, #36	; 0x24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr

08001eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ebc:	d301      	bcc.n	8001ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e00f      	b.n	8001ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <SysTick_Config+0x40>)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eca:	210f      	movs	r1, #15
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed0:	f7ff ff90 	bl	8001df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <SysTick_Config+0x40>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eda:	4b04      	ldr	r3, [pc, #16]	; (8001eec <SysTick_Config+0x40>)
 8001edc:	2207      	movs	r2, #7
 8001ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	e000e010 	.word	0xe000e010

08001ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ff2d 	bl	8001d58 <__NVIC_SetPriorityGrouping>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b086      	sub	sp, #24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f18:	f7ff ff42 	bl	8001da0 <__NVIC_GetPriorityGrouping>
 8001f1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	6978      	ldr	r0, [r7, #20]
 8001f24:	f7ff ff90 	bl	8001e48 <NVIC_EncodePriority>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff5f 	bl	8001df4 <__NVIC_SetPriority>
}
 8001f36:	bf00      	nop
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff35 	bl	8001dbc <__NVIC_EnableIRQ>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff ffa2 	bl	8001eac <SysTick_Config>
 8001f68:	4603      	mov	r3, r0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b08b      	sub	sp, #44	; 0x2c
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f82:	2300      	movs	r3, #0
 8001f84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f86:	e148      	b.n	800221a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f88:	2201      	movs	r2, #1
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	69fa      	ldr	r2, [r7, #28]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	f040 8137 	bne.w	8002214 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	4aa3      	ldr	r2, [pc, #652]	; (8002238 <HAL_GPIO_Init+0x2c4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d05e      	beq.n	800206e <HAL_GPIO_Init+0xfa>
 8001fb0:	4aa1      	ldr	r2, [pc, #644]	; (8002238 <HAL_GPIO_Init+0x2c4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d875      	bhi.n	80020a2 <HAL_GPIO_Init+0x12e>
 8001fb6:	4aa1      	ldr	r2, [pc, #644]	; (800223c <HAL_GPIO_Init+0x2c8>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d058      	beq.n	800206e <HAL_GPIO_Init+0xfa>
 8001fbc:	4a9f      	ldr	r2, [pc, #636]	; (800223c <HAL_GPIO_Init+0x2c8>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d86f      	bhi.n	80020a2 <HAL_GPIO_Init+0x12e>
 8001fc2:	4a9f      	ldr	r2, [pc, #636]	; (8002240 <HAL_GPIO_Init+0x2cc>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d052      	beq.n	800206e <HAL_GPIO_Init+0xfa>
 8001fc8:	4a9d      	ldr	r2, [pc, #628]	; (8002240 <HAL_GPIO_Init+0x2cc>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d869      	bhi.n	80020a2 <HAL_GPIO_Init+0x12e>
 8001fce:	4a9d      	ldr	r2, [pc, #628]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d04c      	beq.n	800206e <HAL_GPIO_Init+0xfa>
 8001fd4:	4a9b      	ldr	r2, [pc, #620]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d863      	bhi.n	80020a2 <HAL_GPIO_Init+0x12e>
 8001fda:	4a9b      	ldr	r2, [pc, #620]	; (8002248 <HAL_GPIO_Init+0x2d4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d046      	beq.n	800206e <HAL_GPIO_Init+0xfa>
 8001fe0:	4a99      	ldr	r2, [pc, #612]	; (8002248 <HAL_GPIO_Init+0x2d4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d85d      	bhi.n	80020a2 <HAL_GPIO_Init+0x12e>
 8001fe6:	2b12      	cmp	r3, #18
 8001fe8:	d82a      	bhi.n	8002040 <HAL_GPIO_Init+0xcc>
 8001fea:	2b12      	cmp	r3, #18
 8001fec:	d859      	bhi.n	80020a2 <HAL_GPIO_Init+0x12e>
 8001fee:	a201      	add	r2, pc, #4	; (adr r2, 8001ff4 <HAL_GPIO_Init+0x80>)
 8001ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff4:	0800206f 	.word	0x0800206f
 8001ff8:	08002049 	.word	0x08002049
 8001ffc:	0800205b 	.word	0x0800205b
 8002000:	0800209d 	.word	0x0800209d
 8002004:	080020a3 	.word	0x080020a3
 8002008:	080020a3 	.word	0x080020a3
 800200c:	080020a3 	.word	0x080020a3
 8002010:	080020a3 	.word	0x080020a3
 8002014:	080020a3 	.word	0x080020a3
 8002018:	080020a3 	.word	0x080020a3
 800201c:	080020a3 	.word	0x080020a3
 8002020:	080020a3 	.word	0x080020a3
 8002024:	080020a3 	.word	0x080020a3
 8002028:	080020a3 	.word	0x080020a3
 800202c:	080020a3 	.word	0x080020a3
 8002030:	080020a3 	.word	0x080020a3
 8002034:	080020a3 	.word	0x080020a3
 8002038:	08002051 	.word	0x08002051
 800203c:	08002065 	.word	0x08002065
 8002040:	4a82      	ldr	r2, [pc, #520]	; (800224c <HAL_GPIO_Init+0x2d8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d013      	beq.n	800206e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002046:	e02c      	b.n	80020a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	623b      	str	r3, [r7, #32]
          break;
 800204e:	e029      	b.n	80020a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	3304      	adds	r3, #4
 8002056:	623b      	str	r3, [r7, #32]
          break;
 8002058:	e024      	b.n	80020a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	3308      	adds	r3, #8
 8002060:	623b      	str	r3, [r7, #32]
          break;
 8002062:	e01f      	b.n	80020a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	330c      	adds	r3, #12
 800206a:	623b      	str	r3, [r7, #32]
          break;
 800206c:	e01a      	b.n	80020a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d102      	bne.n	800207c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002076:	2304      	movs	r3, #4
 8002078:	623b      	str	r3, [r7, #32]
          break;
 800207a:	e013      	b.n	80020a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d105      	bne.n	8002090 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002084:	2308      	movs	r3, #8
 8002086:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	611a      	str	r2, [r3, #16]
          break;
 800208e:	e009      	b.n	80020a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002090:	2308      	movs	r3, #8
 8002092:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	615a      	str	r2, [r3, #20]
          break;
 800209a:	e003      	b.n	80020a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800209c:	2300      	movs	r3, #0
 800209e:	623b      	str	r3, [r7, #32]
          break;
 80020a0:	e000      	b.n	80020a4 <HAL_GPIO_Init+0x130>
          break;
 80020a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	2bff      	cmp	r3, #255	; 0xff
 80020a8:	d801      	bhi.n	80020ae <HAL_GPIO_Init+0x13a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	e001      	b.n	80020b2 <HAL_GPIO_Init+0x13e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3304      	adds	r3, #4
 80020b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	2bff      	cmp	r3, #255	; 0xff
 80020b8:	d802      	bhi.n	80020c0 <HAL_GPIO_Init+0x14c>
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	e002      	b.n	80020c6 <HAL_GPIO_Init+0x152>
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	3b08      	subs	r3, #8
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	210f      	movs	r1, #15
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	fa01 f303 	lsl.w	r3, r1, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	401a      	ands	r2, r3
 80020d8:	6a39      	ldr	r1, [r7, #32]
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	fa01 f303 	lsl.w	r3, r1, r3
 80020e0:	431a      	orrs	r2, r3
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 8090 	beq.w	8002214 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020f4:	4b56      	ldr	r3, [pc, #344]	; (8002250 <HAL_GPIO_Init+0x2dc>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	4a55      	ldr	r2, [pc, #340]	; (8002250 <HAL_GPIO_Init+0x2dc>)
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	6193      	str	r3, [r2, #24]
 8002100:	4b53      	ldr	r3, [pc, #332]	; (8002250 <HAL_GPIO_Init+0x2dc>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800210c:	4a51      	ldr	r2, [pc, #324]	; (8002254 <HAL_GPIO_Init+0x2e0>)
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	089b      	lsrs	r3, r3, #2
 8002112:	3302      	adds	r3, #2
 8002114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002118:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	220f      	movs	r2, #15
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4013      	ands	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a49      	ldr	r2, [pc, #292]	; (8002258 <HAL_GPIO_Init+0x2e4>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d00d      	beq.n	8002154 <HAL_GPIO_Init+0x1e0>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a48      	ldr	r2, [pc, #288]	; (800225c <HAL_GPIO_Init+0x2e8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d007      	beq.n	8002150 <HAL_GPIO_Init+0x1dc>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a47      	ldr	r2, [pc, #284]	; (8002260 <HAL_GPIO_Init+0x2ec>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d101      	bne.n	800214c <HAL_GPIO_Init+0x1d8>
 8002148:	2302      	movs	r3, #2
 800214a:	e004      	b.n	8002156 <HAL_GPIO_Init+0x1e2>
 800214c:	2303      	movs	r3, #3
 800214e:	e002      	b.n	8002156 <HAL_GPIO_Init+0x1e2>
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <HAL_GPIO_Init+0x1e2>
 8002154:	2300      	movs	r3, #0
 8002156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002158:	f002 0203 	and.w	r2, r2, #3
 800215c:	0092      	lsls	r2, r2, #2
 800215e:	4093      	lsls	r3, r2
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002166:	493b      	ldr	r1, [pc, #236]	; (8002254 <HAL_GPIO_Init+0x2e0>)
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	089b      	lsrs	r3, r3, #2
 800216c:	3302      	adds	r3, #2
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d006      	beq.n	800218e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002180:	4b38      	ldr	r3, [pc, #224]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4937      	ldr	r1, [pc, #220]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	600b      	str	r3, [r1, #0]
 800218c:	e006      	b.n	800219c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800218e:	4b35      	ldr	r3, [pc, #212]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	43db      	mvns	r3, r3
 8002196:	4933      	ldr	r1, [pc, #204]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 8002198:	4013      	ands	r3, r2
 800219a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d006      	beq.n	80021b6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021a8:	4b2e      	ldr	r3, [pc, #184]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	492d      	ldr	r1, [pc, #180]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	604b      	str	r3, [r1, #4]
 80021b4:	e006      	b.n	80021c4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021b6:	4b2b      	ldr	r3, [pc, #172]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	43db      	mvns	r3, r3
 80021be:	4929      	ldr	r1, [pc, #164]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d006      	beq.n	80021de <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021d0:	4b24      	ldr	r3, [pc, #144]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	4923      	ldr	r1, [pc, #140]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	608b      	str	r3, [r1, #8]
 80021dc:	e006      	b.n	80021ec <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021de:	4b21      	ldr	r3, [pc, #132]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	491f      	ldr	r1, [pc, #124]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d006      	beq.n	8002206 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021f8:	4b1a      	ldr	r3, [pc, #104]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	4919      	ldr	r1, [pc, #100]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	4313      	orrs	r3, r2
 8002202:	60cb      	str	r3, [r1, #12]
 8002204:	e006      	b.n	8002214 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002206:	4b17      	ldr	r3, [pc, #92]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	43db      	mvns	r3, r3
 800220e:	4915      	ldr	r1, [pc, #84]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 8002210:	4013      	ands	r3, r2
 8002212:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	3301      	adds	r3, #1
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	fa22 f303 	lsr.w	r3, r2, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	f47f aeaf 	bne.w	8001f88 <HAL_GPIO_Init+0x14>
  }
}
 800222a:	bf00      	nop
 800222c:	bf00      	nop
 800222e:	372c      	adds	r7, #44	; 0x2c
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	10320000 	.word	0x10320000
 800223c:	10310000 	.word	0x10310000
 8002240:	10220000 	.word	0x10220000
 8002244:	10210000 	.word	0x10210000
 8002248:	10120000 	.word	0x10120000
 800224c:	10110000 	.word	0x10110000
 8002250:	40021000 	.word	0x40021000
 8002254:	40010000 	.word	0x40010000
 8002258:	40010800 	.word	0x40010800
 800225c:	40010c00 	.word	0x40010c00
 8002260:	40011000 	.word	0x40011000
 8002264:	40010400 	.word	0x40010400

08002268 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	887b      	ldrh	r3, [r7, #2]
 800227a:	4013      	ands	r3, r2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d002      	beq.n	8002286 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002280:	2301      	movs	r3, #1
 8002282:	73fb      	strb	r3, [r7, #15]
 8002284:	e001      	b.n	800228a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002286:	2300      	movs	r3, #0
 8002288:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800228a:	7bfb      	ldrb	r3, [r7, #15]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr

08002296 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	460b      	mov	r3, r1
 80022a0:	807b      	strh	r3, [r7, #2]
 80022a2:	4613      	mov	r3, r2
 80022a4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022a6:	787b      	ldrb	r3, [r7, #1]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ac:	887a      	ldrh	r2, [r7, #2]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022b2:	e003      	b.n	80022bc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022b4:	887b      	ldrh	r3, [r7, #2]
 80022b6:	041a      	lsls	r2, r3, #16
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	611a      	str	r2, [r3, #16]
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr
	...

080022c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e26c      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 8087 	beq.w	80023f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022e8:	4b92      	ldr	r3, [pc, #584]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 030c 	and.w	r3, r3, #12
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d00c      	beq.n	800230e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022f4:	4b8f      	ldr	r3, [pc, #572]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 030c 	and.w	r3, r3, #12
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d112      	bne.n	8002326 <HAL_RCC_OscConfig+0x5e>
 8002300:	4b8c      	ldr	r3, [pc, #560]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800230c:	d10b      	bne.n	8002326 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230e:	4b89      	ldr	r3, [pc, #548]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d06c      	beq.n	80023f4 <HAL_RCC_OscConfig+0x12c>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d168      	bne.n	80023f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e246      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800232e:	d106      	bne.n	800233e <HAL_RCC_OscConfig+0x76>
 8002330:	4b80      	ldr	r3, [pc, #512]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a7f      	ldr	r2, [pc, #508]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	e02e      	b.n	800239c <HAL_RCC_OscConfig+0xd4>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10c      	bne.n	8002360 <HAL_RCC_OscConfig+0x98>
 8002346:	4b7b      	ldr	r3, [pc, #492]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a7a      	ldr	r2, [pc, #488]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 800234c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	4b78      	ldr	r3, [pc, #480]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a77      	ldr	r2, [pc, #476]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002358:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	e01d      	b.n	800239c <HAL_RCC_OscConfig+0xd4>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002368:	d10c      	bne.n	8002384 <HAL_RCC_OscConfig+0xbc>
 800236a:	4b72      	ldr	r3, [pc, #456]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a71      	ldr	r2, [pc, #452]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	4b6f      	ldr	r3, [pc, #444]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a6e      	ldr	r2, [pc, #440]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 800237c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	e00b      	b.n	800239c <HAL_RCC_OscConfig+0xd4>
 8002384:	4b6b      	ldr	r3, [pc, #428]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a6a      	ldr	r2, [pc, #424]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 800238a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	4b68      	ldr	r3, [pc, #416]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a67      	ldr	r2, [pc, #412]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800239a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d013      	beq.n	80023cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a4:	f7ff fa98 	bl	80018d8 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ac:	f7ff fa94 	bl	80018d8 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b64      	cmp	r3, #100	; 0x64
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e1fa      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023be:	4b5d      	ldr	r3, [pc, #372]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f0      	beq.n	80023ac <HAL_RCC_OscConfig+0xe4>
 80023ca:	e014      	b.n	80023f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023cc:	f7ff fa84 	bl	80018d8 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d4:	f7ff fa80 	bl	80018d8 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b64      	cmp	r3, #100	; 0x64
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e1e6      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e6:	4b53      	ldr	r3, [pc, #332]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0x10c>
 80023f2:	e000      	b.n	80023f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d063      	beq.n	80024ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002402:	4b4c      	ldr	r3, [pc, #304]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00b      	beq.n	8002426 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800240e:	4b49      	ldr	r3, [pc, #292]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b08      	cmp	r3, #8
 8002418:	d11c      	bne.n	8002454 <HAL_RCC_OscConfig+0x18c>
 800241a:	4b46      	ldr	r3, [pc, #280]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d116      	bne.n	8002454 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002426:	4b43      	ldr	r3, [pc, #268]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d005      	beq.n	800243e <HAL_RCC_OscConfig+0x176>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d001      	beq.n	800243e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e1ba      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243e:	4b3d      	ldr	r3, [pc, #244]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4939      	ldr	r1, [pc, #228]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 800244e:	4313      	orrs	r3, r2
 8002450:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002452:	e03a      	b.n	80024ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d020      	beq.n	800249e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800245c:	4b36      	ldr	r3, [pc, #216]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 800245e:	2201      	movs	r2, #1
 8002460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002462:	f7ff fa39 	bl	80018d8 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246a:	f7ff fa35 	bl	80018d8 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e19b      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247c:	4b2d      	ldr	r3, [pc, #180]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002488:	4b2a      	ldr	r3, [pc, #168]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4927      	ldr	r1, [pc, #156]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002498:	4313      	orrs	r3, r2
 800249a:	600b      	str	r3, [r1, #0]
 800249c:	e015      	b.n	80024ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800249e:	4b26      	ldr	r3, [pc, #152]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7ff fa18 	bl	80018d8 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ac:	f7ff fa14 	bl	80018d8 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e17a      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024be:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d03a      	beq.n	800254c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d019      	beq.n	8002512 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024de:	4b17      	ldr	r3, [pc, #92]	; (800253c <HAL_RCC_OscConfig+0x274>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e4:	f7ff f9f8 	bl	80018d8 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ec:	f7ff f9f4 	bl	80018d8 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e15a      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fe:	4b0d      	ldr	r3, [pc, #52]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800250a:	2001      	movs	r0, #1
 800250c:	f000 fab0 	bl	8002a70 <RCC_Delay>
 8002510:	e01c      	b.n	800254c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002512:	4b0a      	ldr	r3, [pc, #40]	; (800253c <HAL_RCC_OscConfig+0x274>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002518:	f7ff f9de 	bl	80018d8 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800251e:	e00f      	b.n	8002540 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002520:	f7ff f9da 	bl	80018d8 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d908      	bls.n	8002540 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e140      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000
 8002538:	42420000 	.word	0x42420000
 800253c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002540:	4b9e      	ldr	r3, [pc, #632]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1e9      	bne.n	8002520 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 80a6 	beq.w	80026a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255a:	2300      	movs	r3, #0
 800255c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800255e:	4b97      	ldr	r3, [pc, #604]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10d      	bne.n	8002586 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800256a:	4b94      	ldr	r3, [pc, #592]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	4a93      	ldr	r2, [pc, #588]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 8002570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002574:	61d3      	str	r3, [r2, #28]
 8002576:	4b91      	ldr	r3, [pc, #580]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257e:	60bb      	str	r3, [r7, #8]
 8002580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002582:	2301      	movs	r3, #1
 8002584:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002586:	4b8e      	ldr	r3, [pc, #568]	; (80027c0 <HAL_RCC_OscConfig+0x4f8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258e:	2b00      	cmp	r3, #0
 8002590:	d118      	bne.n	80025c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002592:	4b8b      	ldr	r3, [pc, #556]	; (80027c0 <HAL_RCC_OscConfig+0x4f8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a8a      	ldr	r2, [pc, #552]	; (80027c0 <HAL_RCC_OscConfig+0x4f8>)
 8002598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800259e:	f7ff f99b 	bl	80018d8 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a6:	f7ff f997 	bl	80018d8 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b64      	cmp	r3, #100	; 0x64
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e0fd      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b8:	4b81      	ldr	r3, [pc, #516]	; (80027c0 <HAL_RCC_OscConfig+0x4f8>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0f0      	beq.n	80025a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d106      	bne.n	80025da <HAL_RCC_OscConfig+0x312>
 80025cc:	4b7b      	ldr	r3, [pc, #492]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	4a7a      	ldr	r2, [pc, #488]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	6213      	str	r3, [r2, #32]
 80025d8:	e02d      	b.n	8002636 <HAL_RCC_OscConfig+0x36e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10c      	bne.n	80025fc <HAL_RCC_OscConfig+0x334>
 80025e2:	4b76      	ldr	r3, [pc, #472]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	4a75      	ldr	r2, [pc, #468]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 80025e8:	f023 0301 	bic.w	r3, r3, #1
 80025ec:	6213      	str	r3, [r2, #32]
 80025ee:	4b73      	ldr	r3, [pc, #460]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	4a72      	ldr	r2, [pc, #456]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 80025f4:	f023 0304 	bic.w	r3, r3, #4
 80025f8:	6213      	str	r3, [r2, #32]
 80025fa:	e01c      	b.n	8002636 <HAL_RCC_OscConfig+0x36e>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	2b05      	cmp	r3, #5
 8002602:	d10c      	bne.n	800261e <HAL_RCC_OscConfig+0x356>
 8002604:	4b6d      	ldr	r3, [pc, #436]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	4a6c      	ldr	r2, [pc, #432]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 800260a:	f043 0304 	orr.w	r3, r3, #4
 800260e:	6213      	str	r3, [r2, #32]
 8002610:	4b6a      	ldr	r3, [pc, #424]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	4a69      	ldr	r2, [pc, #420]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	6213      	str	r3, [r2, #32]
 800261c:	e00b      	b.n	8002636 <HAL_RCC_OscConfig+0x36e>
 800261e:	4b67      	ldr	r3, [pc, #412]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	4a66      	ldr	r2, [pc, #408]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 8002624:	f023 0301 	bic.w	r3, r3, #1
 8002628:	6213      	str	r3, [r2, #32]
 800262a:	4b64      	ldr	r3, [pc, #400]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	4a63      	ldr	r2, [pc, #396]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 8002630:	f023 0304 	bic.w	r3, r3, #4
 8002634:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d015      	beq.n	800266a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263e:	f7ff f94b 	bl	80018d8 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002644:	e00a      	b.n	800265c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002646:	f7ff f947 	bl	80018d8 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	f241 3288 	movw	r2, #5000	; 0x1388
 8002654:	4293      	cmp	r3, r2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e0ab      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800265c:	4b57      	ldr	r3, [pc, #348]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0ee      	beq.n	8002646 <HAL_RCC_OscConfig+0x37e>
 8002668:	e014      	b.n	8002694 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266a:	f7ff f935 	bl	80018d8 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7ff f931 	bl	80018d8 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e095      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002688:	4b4c      	ldr	r3, [pc, #304]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1ee      	bne.n	8002672 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002694:	7dfb      	ldrb	r3, [r7, #23]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d105      	bne.n	80026a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800269a:	4b48      	ldr	r3, [pc, #288]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	4a47      	ldr	r2, [pc, #284]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 80026a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 8081 	beq.w	80027b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026b0:	4b42      	ldr	r3, [pc, #264]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 030c 	and.w	r3, r3, #12
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d061      	beq.n	8002780 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d146      	bne.n	8002752 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c4:	4b3f      	ldr	r3, [pc, #252]	; (80027c4 <HAL_RCC_OscConfig+0x4fc>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ca:	f7ff f905 	bl	80018d8 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d2:	f7ff f901 	bl	80018d8 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e067      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e4:	4b35      	ldr	r3, [pc, #212]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1f0      	bne.n	80026d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f8:	d108      	bne.n	800270c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026fa:	4b30      	ldr	r3, [pc, #192]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	492d      	ldr	r1, [pc, #180]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 8002708:	4313      	orrs	r3, r2
 800270a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800270c:	4b2b      	ldr	r3, [pc, #172]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a19      	ldr	r1, [r3, #32]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	430b      	orrs	r3, r1
 800271e:	4927      	ldr	r1, [pc, #156]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002724:	4b27      	ldr	r3, [pc, #156]	; (80027c4 <HAL_RCC_OscConfig+0x4fc>)
 8002726:	2201      	movs	r2, #1
 8002728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272a:	f7ff f8d5 	bl	80018d8 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002732:	f7ff f8d1 	bl	80018d8 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e037      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002744:	4b1d      	ldr	r3, [pc, #116]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0f0      	beq.n	8002732 <HAL_RCC_OscConfig+0x46a>
 8002750:	e02f      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002752:	4b1c      	ldr	r3, [pc, #112]	; (80027c4 <HAL_RCC_OscConfig+0x4fc>)
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002758:	f7ff f8be 	bl	80018d8 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002760:	f7ff f8ba 	bl	80018d8 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e020      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002772:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x498>
 800277e:	e018      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d101      	bne.n	800278c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e013      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	429a      	cmp	r2, r3
 800279e:	d106      	bne.n	80027ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d001      	beq.n	80027b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40007000 	.word	0x40007000
 80027c4:	42420060 	.word	0x42420060

080027c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0d0      	b.n	800297e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027dc:	4b6a      	ldr	r3, [pc, #424]	; (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d910      	bls.n	800280c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ea:	4b67      	ldr	r3, [pc, #412]	; (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 0207 	bic.w	r2, r3, #7
 80027f2:	4965      	ldr	r1, [pc, #404]	; (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	4b63      	ldr	r3, [pc, #396]	; (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0b8      	b.n	800297e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d020      	beq.n	800285a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002824:	4b59      	ldr	r3, [pc, #356]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	4a58      	ldr	r2, [pc, #352]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 800282a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800282e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800283c:	4b53      	ldr	r3, [pc, #332]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	4a52      	ldr	r2, [pc, #328]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002842:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002846:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002848:	4b50      	ldr	r3, [pc, #320]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	494d      	ldr	r1, [pc, #308]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002856:	4313      	orrs	r3, r2
 8002858:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d040      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d107      	bne.n	800287e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286e:	4b47      	ldr	r3, [pc, #284]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d115      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e07f      	b.n	800297e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d107      	bne.n	8002896 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002886:	4b41      	ldr	r3, [pc, #260]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d109      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e073      	b.n	800297e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002896:	4b3d      	ldr	r3, [pc, #244]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e06b      	b.n	800297e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028a6:	4b39      	ldr	r3, [pc, #228]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f023 0203 	bic.w	r2, r3, #3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4936      	ldr	r1, [pc, #216]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028b8:	f7ff f80e 	bl	80018d8 <HAL_GetTick>
 80028bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028be:	e00a      	b.n	80028d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c0:	f7ff f80a 	bl	80018d8 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e053      	b.n	800297e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d6:	4b2d      	ldr	r3, [pc, #180]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f003 020c 	and.w	r2, r3, #12
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d1eb      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028e8:	4b27      	ldr	r3, [pc, #156]	; (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d210      	bcs.n	8002918 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b24      	ldr	r3, [pc, #144]	; (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 0207 	bic.w	r2, r3, #7
 80028fe:	4922      	ldr	r1, [pc, #136]	; (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	4313      	orrs	r3, r2
 8002904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b20      	ldr	r3, [pc, #128]	; (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e032      	b.n	800297e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002924:	4b19      	ldr	r3, [pc, #100]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4916      	ldr	r1, [pc, #88]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002932:	4313      	orrs	r3, r2
 8002934:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d009      	beq.n	8002956 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002942:	4b12      	ldr	r3, [pc, #72]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	490e      	ldr	r1, [pc, #56]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002952:	4313      	orrs	r3, r2
 8002954:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002956:	f000 f821 	bl	800299c <HAL_RCC_GetSysClockFreq>
 800295a:	4602      	mov	r2, r0
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	490a      	ldr	r1, [pc, #40]	; (8002990 <HAL_RCC_ClockConfig+0x1c8>)
 8002968:	5ccb      	ldrb	r3, [r1, r3]
 800296a:	fa22 f303 	lsr.w	r3, r2, r3
 800296e:	4a09      	ldr	r2, [pc, #36]	; (8002994 <HAL_RCC_ClockConfig+0x1cc>)
 8002970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002972:	4b09      	ldr	r3, [pc, #36]	; (8002998 <HAL_RCC_ClockConfig+0x1d0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe ff6c 	bl	8001854 <HAL_InitTick>

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40022000 	.word	0x40022000
 800298c:	40021000 	.word	0x40021000
 8002990:	08007290 	.word	0x08007290
 8002994:	20000000 	.word	0x20000000
 8002998:	20000004 	.word	0x20000004

0800299c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800299c:	b490      	push	{r4, r7}
 800299e:	b08a      	sub	sp, #40	; 0x28
 80029a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029a2:	4b2a      	ldr	r3, [pc, #168]	; (8002a4c <HAL_RCC_GetSysClockFreq+0xb0>)
 80029a4:	1d3c      	adds	r4, r7, #4
 80029a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029ac:	f240 2301 	movw	r3, #513	; 0x201
 80029b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
 80029b6:	2300      	movs	r3, #0
 80029b8:	61bb      	str	r3, [r7, #24]
 80029ba:	2300      	movs	r3, #0
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029c6:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d002      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0x40>
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d003      	beq.n	80029e2 <HAL_RCC_GetSysClockFreq+0x46>
 80029da:	e02d      	b.n	8002a38 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029dc:	4b1d      	ldr	r3, [pc, #116]	; (8002a54 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029de:	623b      	str	r3, [r7, #32]
      break;
 80029e0:	e02d      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	0c9b      	lsrs	r3, r3, #18
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029ee:	4413      	add	r3, r2
 80029f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d013      	beq.n	8002a28 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a00:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	0c5b      	lsrs	r3, r3, #17
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a0e:	4413      	add	r3, r2
 8002a10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a14:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	4a0e      	ldr	r2, [pc, #56]	; (8002a54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a1a:	fb02 f203 	mul.w	r2, r2, r3
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a24:	627b      	str	r3, [r7, #36]	; 0x24
 8002a26:	e004      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	4a0b      	ldr	r2, [pc, #44]	; (8002a58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a2c:	fb02 f303 	mul.w	r3, r2, r3
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	623b      	str	r3, [r7, #32]
      break;
 8002a36:	e002      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a3a:	623b      	str	r3, [r7, #32]
      break;
 8002a3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3728      	adds	r7, #40	; 0x28
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc90      	pop	{r4, r7}
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	080071f8 	.word	0x080071f8
 8002a50:	40021000 	.word	0x40021000
 8002a54:	007a1200 	.word	0x007a1200
 8002a58:	003d0900 	.word	0x003d0900

08002a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a60:	4b02      	ldr	r3, [pc, #8]	; (8002a6c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a62:	681b      	ldr	r3, [r3, #0]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr
 8002a6c:	20000000 	.word	0x20000000

08002a70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a78:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <RCC_Delay+0x34>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <RCC_Delay+0x38>)
 8002a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a82:	0a5b      	lsrs	r3, r3, #9
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	fb02 f303 	mul.w	r3, r2, r3
 8002a8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a8c:	bf00      	nop
  }
  while (Delay --);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	1e5a      	subs	r2, r3, #1
 8002a92:	60fa      	str	r2, [r7, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1f9      	bne.n	8002a8c <RCC_Delay+0x1c>
}
 8002a98:	bf00      	nop
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	20000000 	.word	0x20000000
 8002aa8:	10624dd3 	.word	0x10624dd3

08002aac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	613b      	str	r3, [r7, #16]
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d07d      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002acc:	4b4f      	ldr	r3, [pc, #316]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10d      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad8:	4b4c      	ldr	r3, [pc, #304]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	4a4b      	ldr	r2, [pc, #300]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae2:	61d3      	str	r3, [r2, #28]
 8002ae4:	4b49      	ldr	r3, [pc, #292]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af0:	2301      	movs	r3, #1
 8002af2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af4:	4b46      	ldr	r3, [pc, #280]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d118      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b00:	4b43      	ldr	r3, [pc, #268]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a42      	ldr	r2, [pc, #264]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b0c:	f7fe fee4 	bl	80018d8 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b12:	e008      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b14:	f7fe fee0 	bl	80018d8 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	; 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e06d      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b26:	4b3a      	ldr	r3, [pc, #232]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b32:	4b36      	ldr	r3, [pc, #216]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d02e      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d027      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b50:	4b2e      	ldr	r3, [pc, #184]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b58:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b5a:	4b2e      	ldr	r3, [pc, #184]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b60:	4b2c      	ldr	r3, [pc, #176]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b66:	4a29      	ldr	r2, [pc, #164]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d014      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b76:	f7fe feaf 	bl	80018d8 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7c:	e00a      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7e:	f7fe feab 	bl	80018d8 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e036      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b94:	4b1d      	ldr	r3, [pc, #116]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0ee      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ba0:	4b1a      	ldr	r3, [pc, #104]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	4917      	ldr	r1, [pc, #92]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bb2:	7dfb      	ldrb	r3, [r7, #23]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d105      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb8:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	4a13      	ldr	r2, [pc, #76]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d008      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bd0:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	490b      	ldr	r1, [pc, #44]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d008      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bee:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	4904      	ldr	r1, [pc, #16]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40007000 	.word	0x40007000
 8002c14:	42420440 	.word	0x42420440

08002c18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e041      	b.n	8002cae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d106      	bne.n	8002c44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7fe fcd0 	bl	80015e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3304      	adds	r3, #4
 8002c54:	4619      	mov	r1, r3
 8002c56:	4610      	mov	r0, r2
 8002c58:	f000 fb80 	bl	800335c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d001      	beq.n	8002cd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e035      	b.n	8002d3c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a16      	ldr	r2, [pc, #88]	; (8002d48 <HAL_TIM_Base_Start_IT+0x90>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d009      	beq.n	8002d06 <HAL_TIM_Base_Start_IT+0x4e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfa:	d004      	beq.n	8002d06 <HAL_TIM_Base_Start_IT+0x4e>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a12      	ldr	r2, [pc, #72]	; (8002d4c <HAL_TIM_Base_Start_IT+0x94>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d111      	bne.n	8002d2a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2b06      	cmp	r3, #6
 8002d16:	d010      	beq.n	8002d3a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0201 	orr.w	r2, r2, #1
 8002d26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d28:	e007      	b.n	8002d3a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 0201 	orr.w	r2, r2, #1
 8002d38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40012c00 	.word	0x40012c00
 8002d4c:	40000400 	.word	0x40000400

08002d50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e041      	b.n	8002de6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d106      	bne.n	8002d7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f839 	bl	8002dee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4610      	mov	r0, r2
 8002d90:	f000 fae4 	bl	800335c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr

08002e00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d122      	bne.n	8002e5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d11b      	bne.n	8002e5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f06f 0202 	mvn.w	r2, #2
 8002e2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fa6f 	bl	8003326 <HAL_TIM_IC_CaptureCallback>
 8002e48:	e005      	b.n	8002e56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 fa62 	bl	8003314 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 fa71 	bl	8003338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d122      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d11b      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f06f 0204 	mvn.w	r2, #4
 8002e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2202      	movs	r2, #2
 8002e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fa45 	bl	8003326 <HAL_TIM_IC_CaptureCallback>
 8002e9c:	e005      	b.n	8002eaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fa38 	bl	8003314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 fa47 	bl	8003338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d122      	bne.n	8002f04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d11b      	bne.n	8002f04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0208 	mvn.w	r2, #8
 8002ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2204      	movs	r2, #4
 8002eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fa1b 	bl	8003326 <HAL_TIM_IC_CaptureCallback>
 8002ef0:	e005      	b.n	8002efe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fa0e 	bl	8003314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fa1d 	bl	8003338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d122      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f003 0310 	and.w	r3, r3, #16
 8002f1c:	2b10      	cmp	r3, #16
 8002f1e:	d11b      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f06f 0210 	mvn.w	r2, #16
 8002f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2208      	movs	r2, #8
 8002f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f9f1 	bl	8003326 <HAL_TIM_IC_CaptureCallback>
 8002f44:	e005      	b.n	8002f52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f9e4 	bl	8003314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 f9f3 	bl	8003338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d10e      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d107      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0201 	mvn.w	r2, #1
 8002f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fe faae 	bl	80014e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8e:	2b80      	cmp	r3, #128	; 0x80
 8002f90:	d10e      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9c:	2b80      	cmp	r3, #128	; 0x80
 8002f9e:	d107      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fcfe 	bl	80039ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fba:	2b40      	cmp	r3, #64	; 0x40
 8002fbc:	d10e      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc8:	2b40      	cmp	r3, #64	; 0x40
 8002fca:	d107      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f9b7 	bl	800334a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0320 	and.w	r3, r3, #32
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	d10e      	bne.n	8003008 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0320 	and.w	r3, r3, #32
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	d107      	bne.n	8003008 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0220 	mvn.w	r2, #32
 8003000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fcc9 	bl	800399a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003008:	bf00      	nop
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003026:	2302      	movs	r3, #2
 8003028:	e0ac      	b.n	8003184 <HAL_TIM_PWM_ConfigChannel+0x174>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b0c      	cmp	r3, #12
 8003036:	f200 809f 	bhi.w	8003178 <HAL_TIM_PWM_ConfigChannel+0x168>
 800303a:	a201      	add	r2, pc, #4	; (adr r2, 8003040 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800303c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003040:	08003075 	.word	0x08003075
 8003044:	08003179 	.word	0x08003179
 8003048:	08003179 	.word	0x08003179
 800304c:	08003179 	.word	0x08003179
 8003050:	080030b5 	.word	0x080030b5
 8003054:	08003179 	.word	0x08003179
 8003058:	08003179 	.word	0x08003179
 800305c:	08003179 	.word	0x08003179
 8003060:	080030f7 	.word	0x080030f7
 8003064:	08003179 	.word	0x08003179
 8003068:	08003179 	.word	0x08003179
 800306c:	08003179 	.word	0x08003179
 8003070:	08003137 	.word	0x08003137
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	4618      	mov	r0, r3
 800307c:	f000 f9c6 	bl	800340c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699a      	ldr	r2, [r3, #24]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0208 	orr.w	r2, r2, #8
 800308e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699a      	ldr	r2, [r3, #24]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0204 	bic.w	r2, r2, #4
 800309e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6999      	ldr	r1, [r3, #24]
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	691a      	ldr	r2, [r3, #16]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	619a      	str	r2, [r3, #24]
      break;
 80030b2:	e062      	b.n	800317a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fa0c 	bl	80034d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699a      	ldr	r2, [r3, #24]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699a      	ldr	r2, [r3, #24]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6999      	ldr	r1, [r3, #24]
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	021a      	lsls	r2, r3, #8
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	619a      	str	r2, [r3, #24]
      break;
 80030f4:	e041      	b.n	800317a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68b9      	ldr	r1, [r7, #8]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 fa55 	bl	80035ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69da      	ldr	r2, [r3, #28]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 0208 	orr.w	r2, r2, #8
 8003110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	69da      	ldr	r2, [r3, #28]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0204 	bic.w	r2, r2, #4
 8003120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	69d9      	ldr	r1, [r3, #28]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	61da      	str	r2, [r3, #28]
      break;
 8003134:	e021      	b.n	800317a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68b9      	ldr	r1, [r7, #8]
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fa9f 	bl	8003680 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	69da      	ldr	r2, [r3, #28]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69da      	ldr	r2, [r3, #28]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	69d9      	ldr	r1, [r3, #28]
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	021a      	lsls	r2, r3, #8
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	61da      	str	r2, [r3, #28]
      break;
 8003176:	e000      	b.n	800317a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003178:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800319c:	2b01      	cmp	r3, #1
 800319e:	d101      	bne.n	80031a4 <HAL_TIM_ConfigClockSource+0x18>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e0b3      	b.n	800330c <HAL_TIM_ConfigClockSource+0x180>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031dc:	d03e      	beq.n	800325c <HAL_TIM_ConfigClockSource+0xd0>
 80031de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031e2:	f200 8087 	bhi.w	80032f4 <HAL_TIM_ConfigClockSource+0x168>
 80031e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ea:	f000 8085 	beq.w	80032f8 <HAL_TIM_ConfigClockSource+0x16c>
 80031ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f2:	d87f      	bhi.n	80032f4 <HAL_TIM_ConfigClockSource+0x168>
 80031f4:	2b70      	cmp	r3, #112	; 0x70
 80031f6:	d01a      	beq.n	800322e <HAL_TIM_ConfigClockSource+0xa2>
 80031f8:	2b70      	cmp	r3, #112	; 0x70
 80031fa:	d87b      	bhi.n	80032f4 <HAL_TIM_ConfigClockSource+0x168>
 80031fc:	2b60      	cmp	r3, #96	; 0x60
 80031fe:	d050      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x116>
 8003200:	2b60      	cmp	r3, #96	; 0x60
 8003202:	d877      	bhi.n	80032f4 <HAL_TIM_ConfigClockSource+0x168>
 8003204:	2b50      	cmp	r3, #80	; 0x50
 8003206:	d03c      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0xf6>
 8003208:	2b50      	cmp	r3, #80	; 0x50
 800320a:	d873      	bhi.n	80032f4 <HAL_TIM_ConfigClockSource+0x168>
 800320c:	2b40      	cmp	r3, #64	; 0x40
 800320e:	d058      	beq.n	80032c2 <HAL_TIM_ConfigClockSource+0x136>
 8003210:	2b40      	cmp	r3, #64	; 0x40
 8003212:	d86f      	bhi.n	80032f4 <HAL_TIM_ConfigClockSource+0x168>
 8003214:	2b30      	cmp	r3, #48	; 0x30
 8003216:	d064      	beq.n	80032e2 <HAL_TIM_ConfigClockSource+0x156>
 8003218:	2b30      	cmp	r3, #48	; 0x30
 800321a:	d86b      	bhi.n	80032f4 <HAL_TIM_ConfigClockSource+0x168>
 800321c:	2b20      	cmp	r3, #32
 800321e:	d060      	beq.n	80032e2 <HAL_TIM_ConfigClockSource+0x156>
 8003220:	2b20      	cmp	r3, #32
 8003222:	d867      	bhi.n	80032f4 <HAL_TIM_ConfigClockSource+0x168>
 8003224:	2b00      	cmp	r3, #0
 8003226:	d05c      	beq.n	80032e2 <HAL_TIM_ConfigClockSource+0x156>
 8003228:	2b10      	cmp	r3, #16
 800322a:	d05a      	beq.n	80032e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800322c:	e062      	b.n	80032f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6818      	ldr	r0, [r3, #0]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	6899      	ldr	r1, [r3, #8]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f000 fae4 	bl	800380a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003250:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	609a      	str	r2, [r3, #8]
      break;
 800325a:	e04e      	b.n	80032fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6818      	ldr	r0, [r3, #0]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	6899      	ldr	r1, [r3, #8]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f000 facd 	bl	800380a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800327e:	609a      	str	r2, [r3, #8]
      break;
 8003280:	e03b      	b.n	80032fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6818      	ldr	r0, [r3, #0]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	6859      	ldr	r1, [r3, #4]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	461a      	mov	r2, r3
 8003290:	f000 fa44 	bl	800371c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2150      	movs	r1, #80	; 0x50
 800329a:	4618      	mov	r0, r3
 800329c:	f000 fa9b 	bl	80037d6 <TIM_ITRx_SetConfig>
      break;
 80032a0:	e02b      	b.n	80032fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6818      	ldr	r0, [r3, #0]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	6859      	ldr	r1, [r3, #4]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	461a      	mov	r2, r3
 80032b0:	f000 fa62 	bl	8003778 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2160      	movs	r1, #96	; 0x60
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fa8b 	bl	80037d6 <TIM_ITRx_SetConfig>
      break;
 80032c0:	e01b      	b.n	80032fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6818      	ldr	r0, [r3, #0]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	6859      	ldr	r1, [r3, #4]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	461a      	mov	r2, r3
 80032d0:	f000 fa24 	bl	800371c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2140      	movs	r1, #64	; 0x40
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fa7b 	bl	80037d6 <TIM_ITRx_SetConfig>
      break;
 80032e0:	e00b      	b.n	80032fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4619      	mov	r1, r3
 80032ec:	4610      	mov	r0, r2
 80032ee:	f000 fa72 	bl	80037d6 <TIM_ITRx_SetConfig>
        break;
 80032f2:	e002      	b.n	80032fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80032f4:	bf00      	nop
 80032f6:	e000      	b.n	80032fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80032f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr

08003326 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr

08003338 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	bc80      	pop	{r7}
 8003348:	4770      	bx	lr

0800334a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr

0800335c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a25      	ldr	r2, [pc, #148]	; (8003404 <TIM_Base_SetConfig+0xa8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d007      	beq.n	8003384 <TIM_Base_SetConfig+0x28>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800337a:	d003      	beq.n	8003384 <TIM_Base_SetConfig+0x28>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a22      	ldr	r2, [pc, #136]	; (8003408 <TIM_Base_SetConfig+0xac>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d108      	bne.n	8003396 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a1a      	ldr	r2, [pc, #104]	; (8003404 <TIM_Base_SetConfig+0xa8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d007      	beq.n	80033ae <TIM_Base_SetConfig+0x52>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a4:	d003      	beq.n	80033ae <TIM_Base_SetConfig+0x52>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a17      	ldr	r2, [pc, #92]	; (8003408 <TIM_Base_SetConfig+0xac>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d108      	bne.n	80033c0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4313      	orrs	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a07      	ldr	r2, [pc, #28]	; (8003404 <TIM_Base_SetConfig+0xa8>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d103      	bne.n	80033f4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	691a      	ldr	r2, [r3, #16]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	615a      	str	r2, [r3, #20]
}
 80033fa:	bf00      	nop
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr
 8003404:	40012c00 	.word	0x40012c00
 8003408:	40000400 	.word	0x40000400

0800340c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	f023 0201 	bic.w	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f023 0303 	bic.w	r3, r3, #3
 8003442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f023 0302 	bic.w	r3, r3, #2
 8003454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a1c      	ldr	r2, [pc, #112]	; (80034d4 <TIM_OC1_SetConfig+0xc8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d10c      	bne.n	8003482 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f023 0308 	bic.w	r3, r3, #8
 800346e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	4313      	orrs	r3, r2
 8003478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f023 0304 	bic.w	r3, r3, #4
 8003480:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a13      	ldr	r2, [pc, #76]	; (80034d4 <TIM_OC1_SetConfig+0xc8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d111      	bne.n	80034ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	621a      	str	r2, [r3, #32]
}
 80034c8:	bf00      	nop
 80034ca:	371c      	adds	r7, #28
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40012c00 	.word	0x40012c00

080034d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034d8:	b480      	push	{r7}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	f023 0210 	bic.w	r2, r3, #16
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800350e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	021b      	lsls	r3, r3, #8
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	4313      	orrs	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f023 0320 	bic.w	r3, r3, #32
 8003522:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4313      	orrs	r3, r2
 800352e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a1d      	ldr	r2, [pc, #116]	; (80035a8 <TIM_OC2_SetConfig+0xd0>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d10d      	bne.n	8003554 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800353e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	4313      	orrs	r3, r2
 800354a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003552:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a14      	ldr	r2, [pc, #80]	; (80035a8 <TIM_OC2_SetConfig+0xd0>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d113      	bne.n	8003584 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003562:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800356a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	621a      	str	r2, [r3, #32]
}
 800359e:	bf00      	nop
 80035a0:	371c      	adds	r7, #28
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr
 80035a8:	40012c00 	.word	0x40012c00

080035ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f023 0303 	bic.w	r3, r3, #3
 80035e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	021b      	lsls	r3, r3, #8
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	4313      	orrs	r3, r2
 8003600:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a1d      	ldr	r2, [pc, #116]	; (800367c <TIM_OC3_SetConfig+0xd0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d10d      	bne.n	8003626 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003610:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	4313      	orrs	r3, r2
 800361c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a14      	ldr	r2, [pc, #80]	; (800367c <TIM_OC3_SetConfig+0xd0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d113      	bne.n	8003656 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800363c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	621a      	str	r2, [r3, #32]
}
 8003670:	bf00      	nop
 8003672:	371c      	adds	r7, #28
 8003674:	46bd      	mov	sp, r7
 8003676:	bc80      	pop	{r7}
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40012c00 	.word	0x40012c00

08003680 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	021b      	lsls	r3, r3, #8
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	031b      	lsls	r3, r3, #12
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a0f      	ldr	r2, [pc, #60]	; (8003718 <TIM_OC4_SetConfig+0x98>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d109      	bne.n	80036f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	019b      	lsls	r3, r3, #6
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	621a      	str	r2, [r3, #32]
}
 800370e:	bf00      	nop
 8003710:	371c      	adds	r7, #28
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr
 8003718:	40012c00 	.word	0x40012c00

0800371c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	f023 0201 	bic.w	r2, r3, #1
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f023 030a 	bic.w	r3, r3, #10
 8003758:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	4313      	orrs	r3, r2
 8003760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	621a      	str	r2, [r3, #32]
}
 800376e:	bf00      	nop
 8003770:	371c      	adds	r7, #28
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr

08003778 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003778:	b480      	push	{r7}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	f023 0210 	bic.w	r2, r3, #16
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	031b      	lsls	r3, r3, #12
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	621a      	str	r2, [r3, #32]
}
 80037cc:	bf00      	nop
 80037ce:	371c      	adds	r7, #28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr

080037d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b085      	sub	sp, #20
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f043 0307 	orr.w	r3, r3, #7
 80037f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	609a      	str	r2, [r3, #8]
}
 8003800:	bf00      	nop
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr

0800380a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800380a:	b480      	push	{r7}
 800380c:	b087      	sub	sp, #28
 800380e:	af00      	add	r7, sp, #0
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	607a      	str	r2, [r7, #4]
 8003816:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003824:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	021a      	lsls	r2, r3, #8
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	431a      	orrs	r2, r3
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	4313      	orrs	r3, r2
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	4313      	orrs	r3, r2
 8003836:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	609a      	str	r2, [r3, #8]
}
 800383e:	bf00      	nop
 8003840:	371c      	adds	r7, #28
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr

08003848 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800385c:	2302      	movs	r3, #2
 800385e:	e041      	b.n	80038e4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003886:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a14      	ldr	r2, [pc, #80]	; (80038f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d009      	beq.n	80038b8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ac:	d004      	beq.n	80038b8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a10      	ldr	r2, [pc, #64]	; (80038f4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d10c      	bne.n	80038d2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	40012c00 	.word	0x40012c00
 80038f4:	40000400 	.word	0x40000400

080038f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003910:	2302      	movs	r3, #2
 8003912:	e03d      	b.n	8003990 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	4313      	orrs	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	4313      	orrs	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	4313      	orrs	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	4313      	orrs	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr

0800399a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr

080039ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bc80      	pop	{r7}
 80039bc:	4770      	bx	lr
	...

080039c0 <app_menu_main>:
 *
 * Descrição mais detalhada da função exemploFuncao.
 *
 * @param parametro Descrição do parâmetro.
 */
void app_menu_main(app_t * app){
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]

	lcd16x2_setCursor(0,0);
 80039c8:	2100      	movs	r1, #0
 80039ca:	2000      	movs	r0, #0
 80039cc:	f000 fdda 	bl	8004584 <lcd16x2_setCursor>
	lcd16x2_printf(app->menu_name[0]);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 fe02 	bl	80045e0 <lcd16x2_printf>
	lcd16x2_setCursor(1,0);
 80039dc:	2100      	movs	r1, #0
 80039de:	2001      	movs	r0, #1
 80039e0:	f000 fdd0 	bl	8004584 <lcd16x2_setCursor>
	lcd16x2_printf("%d-> ", app->menu_selection);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80039ea:	4619      	mov	r1, r3
 80039ec:	4839      	ldr	r0, [pc, #228]	; (8003ad4 <app_menu_main+0x114>)
 80039ee:	f000 fdf7 	bl	80045e0 <lcd16x2_printf>
	lcd16x2_printf(app->menu_name[app->menu_selection]);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	4413      	add	r3, r2
 8003a02:	3304      	adds	r3, #4
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fdeb 	bl	80045e0 <lcd16x2_printf>

	if(BT_PRESS(BT_UP)){
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00f      	beq.n	8003a34 <app_menu_main+0x74>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <app_menu_main+0x74>
		BT_RESET(BT_UP);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
		app->menu_selection ++;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	}
	if(BT_PRESS(BT_DOWN)){
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00f      	beq.n	8003a5e <app_menu_main+0x9e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00a      	beq.n	8003a5e <app_menu_main+0x9e>
		BT_RESET(BT_DOWN);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
		app->menu_selection --;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003a56:	1e5a      	subs	r2, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	}
	limiter_saturation(app->menu_selection, 1, MENU_NUMBERS-1)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	dd03      	ble.n	8003a70 <app_menu_main+0xb0>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	dc03      	bgt.n	8003a82 <app_menu_main+0xc2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

	if(BT_PRESS(BT_MENU)){
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d010      	beq.n	8003aae <app_menu_main+0xee>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00b      	beq.n	8003aae <app_menu_main+0xee>
		BT_RESET(BT_MENU);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
		app->menu_function = app->menu_selection;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
		lcd16x2_clear();
 8003aaa:	f000 fd8f 	bl	80045cc <lcd16x2_clear>
	}

	if(BT_PRESS(BT_ENTER)){
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d008      	beq.n	8003aca <app_menu_main+0x10a>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <app_menu_main+0x10a>
		BT_RESET(BT_ENTER);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	}
}
 8003aca:	bf00      	nop
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	08007208 	.word	0x08007208

08003ad8 <app_menu_monitor>:
 *
 * Descrição mais detalhada da função exemploFuncao.
 *
 * @param parametro Descrição do parâmetro.
 */
void app_menu_monitor(app_t * app){
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]

	lcd16x2_setCursor(0,0);
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	f000 fd4e 	bl	8004584 <lcd16x2_setCursor>
	lcd16x2_printf("Act Freq = %d", (int) app->modulation_freq);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fd fad8 	bl	80010a4 <__aeabi_f2iz>
 8003af4:	4603      	mov	r3, r0
 8003af6:	4619      	mov	r1, r3
 8003af8:	483f      	ldr	r0, [pc, #252]	; (8003bf8 <app_menu_monitor+0x120>)
 8003afa:	f000 fd71 	bl	80045e0 <lcd16x2_printf>
	lcd16x2_setCursor(1,0);
 8003afe:	2100      	movs	r1, #0
 8003b00:	2001      	movs	r0, #1
 8003b02:	f000 fd3f 	bl	8004584 <lcd16x2_setCursor>
	lcd16x2_printf("Ref Freq = %d", (int) app->ref_freq);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fd fac9 	bl	80010a4 <__aeabi_f2iz>
 8003b12:	4603      	mov	r3, r0
 8003b14:	4619      	mov	r1, r3
 8003b16:	4839      	ldr	r0, [pc, #228]	; (8003bfc <app_menu_monitor+0x124>)
 8003b18:	f000 fd62 	bl	80045e0 <lcd16x2_printf>

	if(BT_PRESS(BT_MENU)){
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00e      	beq.n	8003b44 <app_menu_monitor+0x6c>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d009      	beq.n	8003b44 <app_menu_monitor+0x6c>
		BT_RESET(BT_MENU);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
		app->menu_function = 0;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
		lcd16x2_clear();
 8003b40:	f000 fd44 	bl	80045cc <lcd16x2_clear>
	}

	if(BT_PRESS(BT_UP)){
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d015      	beq.n	8003b7a <app_menu_monitor+0xa2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d010      	beq.n	8003b7a <app_menu_monitor+0xa2>
		BT_RESET(BT_UP);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
		app->ref_freq = app->ref_freq + 1.0;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003b66:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fc ffcc 	bl	8000b08 <__addsf3>
 8003b70:	4603      	mov	r3, r0
 8003b72:	461a      	mov	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	}
	if(BT_PRESS(BT_DOWN)){
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d015      	beq.n	8003bb0 <app_menu_monitor+0xd8>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d010      	beq.n	8003bb0 <app_menu_monitor+0xd8>
		BT_RESET(BT_DOWN);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
		app->ref_freq = app->ref_freq - 1.0;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003b9c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fc ffaf 	bl	8000b04 <__aeabi_fsub>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	461a      	mov	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	}
	limiter_saturation(app->ref_freq, 0, 60.0)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003bb6:	4912      	ldr	r1, [pc, #72]	; (8003c00 <app_menu_monitor+0x128>)
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7fd fa5f 	bl	800107c <__aeabi_fcmpge>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <app_menu_monitor+0xf4>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a0e      	ldr	r2, [pc, #56]	; (8003c00 <app_menu_monitor+0x128>)
 8003bc8:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003bd2:	f04f 0100 	mov.w	r1, #0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fd fa46 	bl	8001068 <__aeabi_fcmple>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d100      	bne.n	8003be4 <app_menu_monitor+0x10c>
}
 8003be2:	e004      	b.n	8003bee <app_menu_monitor+0x116>
	limiter_saturation(app->ref_freq, 0, 60.0)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
}
 8003bee:	bf00      	nop
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	08007210 	.word	0x08007210
 8003bfc:	08007220 	.word	0x08007220
 8003c00:	42700000 	.word	0x42700000

08003c04 <app_menu_parameters>:
 * Os botões UP e DOWN são usados para navegar entre os parâmetros.
 * O botão MENU é usado para sair do modo de ajuste de parâmetros.
 *
 * @param app Ponteiro para a estrutura do aplicativo.
 */
void app_menu_parameters(app_t * app){
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]

	lcd16x2_setCursor(0,0);
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	2000      	movs	r0, #0
 8003c10:	f000 fcb8 	bl	8004584 <lcd16x2_setCursor>
	lcd16x2_printf(app->menu_name[app->menu_selection]);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	4413      	add	r3, r2
 8003c24:	3304      	adds	r3, #4
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fcda 	bl	80045e0 <lcd16x2_printf>

	lcd16x2_setCursor(1,0);
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	2001      	movs	r0, #1
 8003c30:	f000 fca8 	bl	8004584 <lcd16x2_setCursor>
	lcd16x2_printf(app->param_name[app->param_index]);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003c3a:	3317      	adds	r3, #23
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	4413      	add	r3, r2
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fccc 	bl	80045e0 <lcd16x2_printf>

	lcd16x2_setCursor(1,8);
 8003c48:	2108      	movs	r1, #8
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	f000 fc9a 	bl	8004584 <lcd16x2_setCursor>
	lcd16x2_printf("%d", (int) * app->param_ptr[app->param_index]);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3256      	adds	r2, #86	; 0x56
 8003c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fd fa1f 	bl	80010a4 <__aeabi_f2iz>
 8003c66:	4603      	mov	r3, r0
 8003c68:	4619      	mov	r1, r3
 8003c6a:	482b      	ldr	r0, [pc, #172]	; (8003d18 <app_menu_parameters+0x114>)
 8003c6c:	f000 fcb8 	bl	80045e0 <lcd16x2_printf>

	if(BT_PRESS(BT_UP)){
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00f      	beq.n	8003c9a <app_menu_parameters+0x96>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00a      	beq.n	8003c9a <app_menu_parameters+0x96>
		BT_RESET(BT_UP);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
		app->param_index ++;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	}
	if(BT_PRESS(BT_DOWN)){
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00f      	beq.n	8003cc4 <app_menu_parameters+0xc0>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <app_menu_parameters+0xc0>
		BT_RESET(BT_DOWN);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
		app->param_index --;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003cbc:	1e5a      	subs	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	}

	limiter_saturation(app->param_index, 0, PARAMETERS_SIZE-1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	dd03      	ble.n	8003cd6 <app_menu_parameters+0xd2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2205      	movs	r2, #5
 8003cd2:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	dc03      	bgt.n	8003ce8 <app_menu_parameters+0xe4>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154

	if(BT_PRESS(BT_MENU)){
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00e      	beq.n	8003d10 <app_menu_parameters+0x10c>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d009      	beq.n	8003d10 <app_menu_parameters+0x10c>
		BT_RESET(BT_MENU);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
		app->menu_function = 0;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
		lcd16x2_clear();
 8003d0c:	f000 fc5e 	bl	80045cc <lcd16x2_clear>
	}
}
 8003d10:	bf00      	nop
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	08007230 	.word	0x08007230

08003d1c <app_init>:
 * Descrição mais detalhada da função exemploFuncao.
 *
 * @param parametro Descrição do parâmetro.
 * @return void
 */
void app_init(app_t * app) {
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af02      	add	r7, sp, #8
 8003d22:	6078      	str	r0, [r7, #4]

    /** Configs **/

	app->fs = 72000000 / TIM1->ARR ;
 8003d24:	4b7a      	ldr	r3, [pc, #488]	; (8003f10 <app_init+0x1f4>)
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	4a7a      	ldr	r2, [pc, #488]	; (8003f14 <app_init+0x1f8>)
 8003d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fc ff9a 	bl	8000c68 <__aeabi_ui2f>
 8003d34:	4602      	mov	r2, r0
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	601a      	str	r2, [r3, #0]
	app->ts = 1.0 / app->fs;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4619      	mov	r1, r3
 8003d40:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003d44:	f7fd f89c 	bl	8000e80 <__aeabi_fdiv>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	605a      	str	r2, [r3, #4]

    /** Bus voltage **/

	so_filter_initialize(&app->lpo  , app->fs, LPO_FC  , LPO_Q  , LPO_TYPE  , LPO_WARP  );
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f103 001c 	add.w	r0, r3, #28
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6819      	ldr	r1, [r3, #0]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	9301      	str	r3, [sp, #4]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003d66:	4a6c      	ldr	r2, [pc, #432]	; (8003f18 <app_init+0x1fc>)
 8003d68:	f000 fede 	bl	8004b28 <so_filter_initialize>
	so_filter_update_coeff_lowpass(&app->lpo);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	331c      	adds	r3, #28
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 fd15 	bl	80047a0 <so_filter_update_coeff_lowpass>
	so_filter_initialize(&app->notch, app->fs, NOTCH_FC, NOTCH_Q, NOTCH_TYPE, NOTCH_WARP);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6819      	ldr	r1, [r3, #0]
 8003d80:	2301      	movs	r3, #1
 8003d82:	9301      	str	r3, [sp, #4]
 8003d84:	2302      	movs	r3, #2
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	4b64      	ldr	r3, [pc, #400]	; (8003f1c <app_init+0x200>)
 8003d8a:	4a65      	ldr	r2, [pc, #404]	; (8003f20 <app_init+0x204>)
 8003d8c:	f000 fecc 	bl	8004b28 <so_filter_initialize>
	so_filter_update_coeff_notch(&app->notch);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3364      	adds	r3, #100	; 0x64
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fdb7 	bl	8004908 <so_filter_update_coeff_notch>

    /** Controle V/F **/

	app->ref_freq = 1.0;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003da0:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	app->modulation_amp = 0.0;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	app->modulation_freq = 0.0;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	limiter_initialize(&app->limiter, app->fs, 1.0);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	f000 fc3a 	bl	8004640 <limiter_initialize>


	WaveGenerator_update(&app->gerador, app->fs, app->modulation_freq, app->modulation_amp);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f103 00ac 	add.w	r0, r3, #172	; 0xac
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6819      	ldr	r1, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003de2:	f000 fee1 	bl	8004ba8 <WaveGenerator_update>

    /** Menus **/

	app->menu_selection = 0;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	app->menu_vector[0] = &app_menu_main;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a4c      	ldr	r2, [pc, #304]	; (8003f24 <app_init+0x208>)
 8003df2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	app->menu_vector[1] = &app_menu_monitor;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a4b      	ldr	r2, [pc, #300]	; (8003f28 <app_init+0x20c>)
 8003dfa:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	app->menu_vector[2] = &app_menu_parameters;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a4a      	ldr	r2, [pc, #296]	; (8003f2c <app_init+0x210>)
 8003e02:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	strcpy(app->menu_name[0], "Main menu");
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8003e0c:	4948      	ldr	r1, [pc, #288]	; (8003f30 <app_init+0x214>)
 8003e0e:	461a      	mov	r2, r3
 8003e10:	460b      	mov	r3, r1
 8003e12:	cb03      	ldmia	r3!, {r0, r1}
 8003e14:	6010      	str	r0, [r2, #0]
 8003e16:	6051      	str	r1, [r2, #4]
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	8113      	strh	r3, [r2, #8]
	strcpy(app->menu_name[1], "Monitor");
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8003e22:	4944      	ldr	r1, [pc, #272]	; (8003f34 <app_init+0x218>)
 8003e24:	461a      	mov	r2, r3
 8003e26:	460b      	mov	r3, r1
 8003e28:	cb03      	ldmia	r3!, {r0, r1}
 8003e2a:	6010      	str	r0, [r2, #0]
 8003e2c:	6051      	str	r1, [r2, #4]
	strcpy(app->menu_name[2], "Parameters");
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003e34:	4940      	ldr	r1, [pc, #256]	; (8003f38 <app_init+0x21c>)
 8003e36:	461a      	mov	r2, r3
 8003e38:	460b      	mov	r3, r1
 8003e3a:	cb03      	ldmia	r3!, {r0, r1}
 8003e3c:	6010      	str	r0, [r2, #0]
 8003e3e:	6051      	str	r1, [r2, #4]
 8003e40:	8819      	ldrh	r1, [r3, #0]
 8003e42:	789b      	ldrb	r3, [r3, #2]
 8003e44:	8111      	strh	r1, [r2, #8]
 8003e46:	7293      	strb	r3, [r2, #10]

    /** Parameters **/

	app->param_ptr[0] = &app->lpo.fc;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	strcpy(app->param_name[0], "LPO Fc");
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8003e5a:	4a38      	ldr	r2, [pc, #224]	; (8003f3c <app_init+0x220>)
 8003e5c:	6810      	ldr	r0, [r2, #0]
 8003e5e:	6018      	str	r0, [r3, #0]
 8003e60:	8891      	ldrh	r1, [r2, #4]
 8003e62:	7992      	ldrb	r2, [r2, #6]
 8003e64:	8099      	strh	r1, [r3, #4]
 8003e66:	719a      	strb	r2, [r3, #6]

	app->param_ptr[1] = &app->lpo.Q;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	strcpy(app->param_name[1], "LPO Q");
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003e7a:	4a31      	ldr	r2, [pc, #196]	; (8003f40 <app_init+0x224>)
 8003e7c:	6810      	ldr	r0, [r2, #0]
 8003e7e:	6018      	str	r0, [r3, #0]
 8003e80:	8892      	ldrh	r2, [r2, #4]
 8003e82:	809a      	strh	r2, [r3, #4]

	app->param_ptr[2] = &app->lpo.fc;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	strcpy(app->param_name[2], "Notch Fc");
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8003e96:	492b      	ldr	r1, [pc, #172]	; (8003f44 <app_init+0x228>)
 8003e98:	461a      	mov	r2, r3
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	cb03      	ldmia	r3!, {r0, r1}
 8003e9e:	6010      	str	r0, [r2, #0]
 8003ea0:	6051      	str	r1, [r2, #4]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	7213      	strb	r3, [r2, #8]

	app->param_ptr[3] = &app->lpo.Q;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	strcpy(app->param_name[3], "Notch Q");
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8003eb8:	4923      	ldr	r1, [pc, #140]	; (8003f48 <app_init+0x22c>)
 8003eba:	461a      	mov	r2, r3
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	cb03      	ldmia	r3!, {r0, r1}
 8003ec0:	6010      	str	r0, [r2, #0]
 8003ec2:	6051      	str	r1, [r2, #4]

	app->param_ptr[4] = &app->limiter.rate;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	strcpy(app->param_name[4], "Rate Lim");
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8003ed6:	491d      	ldr	r1, [pc, #116]	; (8003f4c <app_init+0x230>)
 8003ed8:	461a      	mov	r2, r3
 8003eda:	460b      	mov	r3, r1
 8003edc:	cb03      	ldmia	r3!, {r0, r1}
 8003ede:	6010      	str	r0, [r2, #0]
 8003ee0:	6051      	str	r1, [r2, #4]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	7213      	strb	r3, [r2, #8]

	app->param_ptr[5] = &app->ref_freq;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	strcpy(app->param_name[5], "Ref Freq");
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8003ef8:	4915      	ldr	r1, [pc, #84]	; (8003f50 <app_init+0x234>)
 8003efa:	461a      	mov	r2, r3
 8003efc:	460b      	mov	r3, r1
 8003efe:	cb03      	ldmia	r3!, {r0, r1}
 8003f00:	6010      	str	r0, [r2, #0]
 8003f02:	6051      	str	r1, [r2, #4]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	7213      	strb	r3, [r2, #8]


    /** Buttons **/


}
 8003f08:	bf00      	nop
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40012c00 	.word	0x40012c00
 8003f14:	044aa200 	.word	0x044aa200
 8003f18:	41f00000 	.word	0x41f00000
 8003f1c:	41400000 	.word	0x41400000
 8003f20:	42f00000 	.word	0x42f00000
 8003f24:	080039c1 	.word	0x080039c1
 8003f28:	08003ad9 	.word	0x08003ad9
 8003f2c:	08003c05 	.word	0x08003c05
 8003f30:	08007234 	.word	0x08007234
 8003f34:	08007240 	.word	0x08007240
 8003f38:	08007248 	.word	0x08007248
 8003f3c:	08007254 	.word	0x08007254
 8003f40:	0800725c 	.word	0x0800725c
 8003f44:	08007264 	.word	0x08007264
 8003f48:	08007270 	.word	0x08007270
 8003f4c:	08007278 	.word	0x08007278
 8003f50:	08007284 	.word	0x08007284

08003f54 <app_loop>:

void app_loop(app_t * app){
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]

		app->button[0].state = HAL_GPIO_ReadPin(BT1_GPIO_Port, BT1_Pin);
 8003f5c:	2110      	movs	r1, #16
 8003f5e:	482a      	ldr	r0, [pc, #168]	; (8004008 <app_loop+0xb4>)
 8003f60:	f7fe f982 	bl	8002268 <HAL_GPIO_ReadPin>
 8003f64:	4603      	mov	r3, r0
 8003f66:	461a      	mov	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
		app->button[1].state = HAL_GPIO_ReadPin(BT2_GPIO_Port, BT2_Pin);
 8003f6e:	2120      	movs	r1, #32
 8003f70:	4825      	ldr	r0, [pc, #148]	; (8004008 <app_loop+0xb4>)
 8003f72:	f7fe f979 	bl	8002268 <HAL_GPIO_ReadPin>
 8003f76:	4603      	mov	r3, r0
 8003f78:	461a      	mov	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
		app->button[2].state = HAL_GPIO_ReadPin(BT3_GPIO_Port, BT3_Pin);
 8003f80:	2140      	movs	r1, #64	; 0x40
 8003f82:	4821      	ldr	r0, [pc, #132]	; (8004008 <app_loop+0xb4>)
 8003f84:	f7fe f970 	bl	8002268 <HAL_GPIO_ReadPin>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
		app->button[3].state = HAL_GPIO_ReadPin(BT4_GPIO_Port, BT4_Pin);
 8003f92:	2180      	movs	r1, #128	; 0x80
 8003f94:	481c      	ldr	r0, [pc, #112]	; (8004008 <app_loop+0xb4>)
 8003f96:	f7fe f967 	bl	8002268 <HAL_GPIO_ReadPin>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec

		if(!app->button[0].state) app->button[0].flag = 1;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d103      	bne.n	8003fb6 <app_loop+0x62>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
		if(!app->button[1].state) app->button[1].flag = 1;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d103      	bne.n	8003fc8 <app_loop+0x74>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
		if(!app->button[2].state) app->button[2].flag = 1;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d103      	bne.n	8003fda <app_loop+0x86>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
		if(!app->button[3].state) app->button[3].flag = 1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d103      	bne.n	8003fec <app_loop+0x98>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

		app->menu_vector[app->menu_function](app);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3244      	adds	r2, #68	; 0x44
 8003ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	4798      	blx	r3

}
 8003ffe:	bf00      	nop
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40010c00 	.word	0x40010c00

0800400c <app_isr>:

void app_isr(app_t * app){
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]

	app->timer = app->timer + app->ts;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	4619      	mov	r1, r3
 800401e:	4610      	mov	r0, r2
 8004020:	f7fc fd72 	bl	8000b08 <__addsf3>
 8004024:	4603      	mov	r3, r0
 8004026:	461a      	mov	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	609a      	str	r2, [r3, #8]

	/** Bus voltage **/

	app->vbus.max = fmaxf(app->vbus.raw, app->vbus.max);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	4619      	mov	r1, r3
 8004036:	4610      	mov	r0, r2
 8004038:	f001 facc 	bl	80055d4 <fmaxf>
 800403c:	4602      	mov	r2, r0
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	611a      	str	r2, [r3, #16]
	app->vbus.min = fmaxf(app->vbus.raw, app->vbus.min);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	4619      	mov	r1, r3
 800404c:	4610      	mov	r0, r2
 800404e:	f001 fac1 	bl	80055d4 <fmaxf>
 8004052:	4602      	mov	r2, r0
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	615a      	str	r2, [r3, #20]

	so_filter_run(&app->lpo,   app->vbus.raw);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f103 021c 	add.w	r2, r3, #28
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	4619      	mov	r1, r3
 8004064:	4610      	mov	r0, r2
 8004066:	f000 fcf9 	bl	8004a5c <so_filter_run>
	app->vbus.filtered = so_filter_run(&app->notch, app->lpo.states.y0);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004074:	4619      	mov	r1, r3
 8004076:	4610      	mov	r0, r2
 8004078:	f000 fcf0 	bl	8004a5c <so_filter_run>
 800407c:	4602      	mov	r2, r0
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	619a      	str	r2, [r3, #24]

    /** Controle V/F **/

	limiter_rate_run(&app->limiter, app->ref_freq);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800408e:	4619      	mov	r1, r3
 8004090:	4610      	mov	r0, r2
 8004092:	f000 faf6 	bl	8004682 <limiter_rate_run>

	app->modulation_freq = app->limiter.output;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	app->modulation_amp  = app->limiter.output * GENERATOR_NOMINAL_TS;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040a8:	4918      	ldr	r1, [pc, #96]	; (800410c <app_isr+0x100>)
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fc fee8 	bl	8000e80 <__aeabi_fdiv>
 80040b0:	4603      	mov	r3, r0
 80040b2:	461a      	mov	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

	WaveGenerator_update(&app->gerador, app->fs, app->modulation_freq, app->modulation_amp);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f103 00ac 	add.w	r0, r3, #172	; 0xac
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6819      	ldr	r1, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80040d0:	f000 fd6a 	bl	8004ba8 <WaveGenerator_update>
	WaveGenerator_sine_single_run(&app->gerador);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	33ac      	adds	r3, #172	; 0xac
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 fd9d 	bl	8004c18 <WaveGenerator_sine_single_run>

	app->sa = app->gerador.a;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	app->sb = app->gerador.b;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	app->sc = app->gerador.c;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    /** PWM **/


}
 8004102:	bf00      	nop
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	42700000 	.word	0x42700000

08004110 <DWT_Delay_Init>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8004114:	4b14      	ldr	r3, [pc, #80]	; (8004168 <DWT_Delay_Init+0x58>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	4a13      	ldr	r2, [pc, #76]	; (8004168 <DWT_Delay_Init+0x58>)
 800411a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800411e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004120:	4b11      	ldr	r3, [pc, #68]	; (8004168 <DWT_Delay_Init+0x58>)
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	4a10      	ldr	r2, [pc, #64]	; (8004168 <DWT_Delay_Init+0x58>)
 8004126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800412a:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 800412c:	4b0f      	ldr	r3, [pc, #60]	; (800416c <DWT_Delay_Init+0x5c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a0e      	ldr	r2, [pc, #56]	; (800416c <DWT_Delay_Init+0x5c>)
 8004132:	f023 0301 	bic.w	r3, r3, #1
 8004136:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004138:	4b0c      	ldr	r3, [pc, #48]	; (800416c <DWT_Delay_Init+0x5c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a0b      	ldr	r2, [pc, #44]	; (800416c <DWT_Delay_Init+0x5c>)
 800413e:	f043 0301 	orr.w	r3, r3, #1
 8004142:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8004144:	4b09      	ldr	r3, [pc, #36]	; (800416c <DWT_Delay_Init+0x5c>)
 8004146:	2200      	movs	r2, #0
 8004148:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 800414a:	bf00      	nop
  __NOP();
 800414c:	bf00      	nop
  __NOP();
 800414e:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 8004150:	4b06      	ldr	r3, [pc, #24]	; (800416c <DWT_Delay_Init+0x5c>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <DWT_Delay_Init+0x4c>
  {
    return 0;
 8004158:	2300      	movs	r3, #0
 800415a:	e000      	b.n	800415e <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1;
 800415c:	2301      	movs	r3, #1
  }
}
 800415e:	4618      	mov	r0, r3
 8004160:	46bd      	mov	sp, r7
 8004162:	bc80      	pop	{r7}
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	e000edf0 	.word	0xe000edf0
 800416c:	e0001000 	.word	0xe0001000

08004170 <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 8004178:	4b0d      	ldr	r3, [pc, #52]	; (80041b0 <DWT_Delay_us+0x40>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800417e:	f7fe fc6d 	bl	8002a5c <HAL_RCC_GetHCLKFreq>
 8004182:	4603      	mov	r3, r0
 8004184:	4a0b      	ldr	r2, [pc, #44]	; (80041b4 <DWT_Delay_us+0x44>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	0c9b      	lsrs	r3, r3, #18
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	fb02 f303 	mul.w	r3, r2, r3
 8004192:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 8004194:	bf00      	nop
 8004196:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <DWT_Delay_us+0x40>)
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	1ad2      	subs	r2, r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d3f8      	bcc.n	8004196 <DWT_Delay_us+0x26>
}
 80041a4:	bf00      	nop
 80041a6:	bf00      	nop
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	e0001000 	.word	0xe0001000
 80041b4:	431bde83 	.word	0x431bde83

080041b8 <lcd16x2_enablePulse>:

/**
 * @brief Enable Pulse function
 */
static void lcd16x2_enablePulse(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 80041bc:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <lcd16x2_enablePulse+0x34>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a0b      	ldr	r2, [pc, #44]	; (80041f0 <lcd16x2_enablePulse+0x38>)
 80041c2:	8811      	ldrh	r1, [r2, #0]
 80041c4:	2201      	movs	r2, #1
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fe f865 	bl	8002296 <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 80041cc:	2014      	movs	r0, #20
 80041ce:	f7ff ffcf 	bl	8004170 <DWT_Delay_us>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 80041d2:	4b06      	ldr	r3, [pc, #24]	; (80041ec <lcd16x2_enablePulse+0x34>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a06      	ldr	r2, [pc, #24]	; (80041f0 <lcd16x2_enablePulse+0x38>)
 80041d8:	8811      	ldrh	r1, [r2, #0]
 80041da:	2200      	movs	r2, #0
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fe f85a 	bl	8002296 <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 80041e2:	203c      	movs	r0, #60	; 0x3c
 80041e4:	f7ff ffc4 	bl	8004170 <DWT_Delay_us>
}
 80041e8:	bf00      	nop
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	20000090 	.word	0x20000090
 80041f0:	20000096 	.word	0x20000096

080041f4 <lcd16x2_rs>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	4603      	mov	r3, r0
 80041fc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 80041fe:	4b06      	ldr	r3, [pc, #24]	; (8004218 <lcd16x2_rs+0x24>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a06      	ldr	r2, [pc, #24]	; (800421c <lcd16x2_rs+0x28>)
 8004204:	8811      	ldrh	r1, [r2, #0]
 8004206:	79fa      	ldrb	r2, [r7, #7]
 8004208:	4618      	mov	r0, r3
 800420a:	f7fe f844 	bl	8002296 <HAL_GPIO_WritePin>
}
 800420e:	bf00      	nop
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	20000090 	.word	0x20000090
 800421c:	20000094 	.word	0x20000094

08004220 <lcd16x2_write>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	4603      	mov	r3, r0
 8004228:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 800422a:	79fb      	ldrb	r3, [r7, #7]
 800422c:	f003 030f 	and.w	r3, r3, #15
 8004230:	73fb      	strb	r3, [r7, #15]
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	091b      	lsrs	r3, r3, #4
 8004236:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 8004238:	4b5f      	ldr	r3, [pc, #380]	; (80043b8 <lcd16x2_write+0x198>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d05a      	beq.n	80042f6 <lcd16x2_write+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8004240:	4b5e      	ldr	r3, [pc, #376]	; (80043bc <lcd16x2_write+0x19c>)
 8004242:	6818      	ldr	r0, [r3, #0]
 8004244:	4b5e      	ldr	r3, [pc, #376]	; (80043c0 <lcd16x2_write+0x1a0>)
 8004246:	8819      	ldrh	r1, [r3, #0]
 8004248:	7bfb      	ldrb	r3, [r7, #15]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	b2db      	uxtb	r3, r3
 8004250:	461a      	mov	r2, r3
 8004252:	f7fe f820 	bl	8002296 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8004256:	4b59      	ldr	r3, [pc, #356]	; (80043bc <lcd16x2_write+0x19c>)
 8004258:	6818      	ldr	r0, [r3, #0]
 800425a:	4b5a      	ldr	r3, [pc, #360]	; (80043c4 <lcd16x2_write+0x1a4>)
 800425c:	8819      	ldrh	r1, [r3, #0]
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	b2db      	uxtb	r3, r3
 8004266:	461a      	mov	r2, r3
 8004268:	f7fe f815 	bl	8002296 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 800426c:	4b53      	ldr	r3, [pc, #332]	; (80043bc <lcd16x2_write+0x19c>)
 800426e:	6818      	ldr	r0, [r3, #0]
 8004270:	4b55      	ldr	r3, [pc, #340]	; (80043c8 <lcd16x2_write+0x1a8>)
 8004272:	8819      	ldrh	r1, [r3, #0]
 8004274:	7bfb      	ldrb	r3, [r7, #15]
 8004276:	f003 0304 	and.w	r3, r3, #4
 800427a:	b2db      	uxtb	r3, r3
 800427c:	461a      	mov	r2, r3
 800427e:	f7fe f80a 	bl	8002296 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8004282:	4b4e      	ldr	r3, [pc, #312]	; (80043bc <lcd16x2_write+0x19c>)
 8004284:	6818      	ldr	r0, [r3, #0]
 8004286:	4b51      	ldr	r3, [pc, #324]	; (80043cc <lcd16x2_write+0x1ac>)
 8004288:	8819      	ldrh	r1, [r3, #0]
 800428a:	7bfb      	ldrb	r3, [r7, #15]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	b2db      	uxtb	r3, r3
 8004292:	461a      	mov	r2, r3
 8004294:	f7fd ffff 	bl	8002296 <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8004298:	4b4d      	ldr	r3, [pc, #308]	; (80043d0 <lcd16x2_write+0x1b0>)
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	4b4d      	ldr	r3, [pc, #308]	; (80043d4 <lcd16x2_write+0x1b4>)
 800429e:	8819      	ldrh	r1, [r3, #0]
 80042a0:	7bbb      	ldrb	r3, [r7, #14]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	461a      	mov	r2, r3
 80042aa:	f7fd fff4 	bl	8002296 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 80042ae:	4b48      	ldr	r3, [pc, #288]	; (80043d0 <lcd16x2_write+0x1b0>)
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	4b49      	ldr	r3, [pc, #292]	; (80043d8 <lcd16x2_write+0x1b8>)
 80042b4:	8819      	ldrh	r1, [r3, #0]
 80042b6:	7bbb      	ldrb	r3, [r7, #14]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	461a      	mov	r2, r3
 80042c0:	f7fd ffe9 	bl	8002296 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 80042c4:	4b42      	ldr	r3, [pc, #264]	; (80043d0 <lcd16x2_write+0x1b0>)
 80042c6:	6818      	ldr	r0, [r3, #0]
 80042c8:	4b44      	ldr	r3, [pc, #272]	; (80043dc <lcd16x2_write+0x1bc>)
 80042ca:	8819      	ldrh	r1, [r3, #0]
 80042cc:	7bbb      	ldrb	r3, [r7, #14]
 80042ce:	f003 0304 	and.w	r3, r3, #4
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	461a      	mov	r2, r3
 80042d6:	f7fd ffde 	bl	8002296 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80042da:	4b3d      	ldr	r3, [pc, #244]	; (80043d0 <lcd16x2_write+0x1b0>)
 80042dc:	6818      	ldr	r0, [r3, #0]
 80042de:	4b40      	ldr	r3, [pc, #256]	; (80043e0 <lcd16x2_write+0x1c0>)
 80042e0:	8819      	ldrh	r1, [r3, #0]
 80042e2:	7bbb      	ldrb	r3, [r7, #14]
 80042e4:	f003 0308 	and.w	r3, r3, #8
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	461a      	mov	r2, r3
 80042ec:	f7fd ffd3 	bl	8002296 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 80042f0:	f7ff ff62 	bl	80041b8 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 80042f4:	e05b      	b.n	80043ae <lcd16x2_write+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 80042f6:	4b36      	ldr	r3, [pc, #216]	; (80043d0 <lcd16x2_write+0x1b0>)
 80042f8:	6818      	ldr	r0, [r3, #0]
 80042fa:	4b36      	ldr	r3, [pc, #216]	; (80043d4 <lcd16x2_write+0x1b4>)
 80042fc:	8819      	ldrh	r1, [r3, #0]
 80042fe:	7bbb      	ldrb	r3, [r7, #14]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	b2db      	uxtb	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	f7fd ffc5 	bl	8002296 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 800430c:	4b30      	ldr	r3, [pc, #192]	; (80043d0 <lcd16x2_write+0x1b0>)
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	4b31      	ldr	r3, [pc, #196]	; (80043d8 <lcd16x2_write+0x1b8>)
 8004312:	8819      	ldrh	r1, [r3, #0]
 8004314:	7bbb      	ldrb	r3, [r7, #14]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	b2db      	uxtb	r3, r3
 800431c:	461a      	mov	r2, r3
 800431e:	f7fd ffba 	bl	8002296 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8004322:	4b2b      	ldr	r3, [pc, #172]	; (80043d0 <lcd16x2_write+0x1b0>)
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	4b2d      	ldr	r3, [pc, #180]	; (80043dc <lcd16x2_write+0x1bc>)
 8004328:	8819      	ldrh	r1, [r3, #0]
 800432a:	7bbb      	ldrb	r3, [r7, #14]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	b2db      	uxtb	r3, r3
 8004332:	461a      	mov	r2, r3
 8004334:	f7fd ffaf 	bl	8002296 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8004338:	4b25      	ldr	r3, [pc, #148]	; (80043d0 <lcd16x2_write+0x1b0>)
 800433a:	6818      	ldr	r0, [r3, #0]
 800433c:	4b28      	ldr	r3, [pc, #160]	; (80043e0 <lcd16x2_write+0x1c0>)
 800433e:	8819      	ldrh	r1, [r3, #0]
 8004340:	7bbb      	ldrb	r3, [r7, #14]
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	b2db      	uxtb	r3, r3
 8004348:	461a      	mov	r2, r3
 800434a:	f7fd ffa4 	bl	8002296 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 800434e:	f7ff ff33 	bl	80041b8 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8004352:	4b1f      	ldr	r3, [pc, #124]	; (80043d0 <lcd16x2_write+0x1b0>)
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	4b1f      	ldr	r3, [pc, #124]	; (80043d4 <lcd16x2_write+0x1b4>)
 8004358:	8819      	ldrh	r1, [r3, #0]
 800435a:	7bfb      	ldrb	r3, [r7, #15]
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	b2db      	uxtb	r3, r3
 8004362:	461a      	mov	r2, r3
 8004364:	f7fd ff97 	bl	8002296 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8004368:	4b19      	ldr	r3, [pc, #100]	; (80043d0 <lcd16x2_write+0x1b0>)
 800436a:	6818      	ldr	r0, [r3, #0]
 800436c:	4b1a      	ldr	r3, [pc, #104]	; (80043d8 <lcd16x2_write+0x1b8>)
 800436e:	8819      	ldrh	r1, [r3, #0]
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	b2db      	uxtb	r3, r3
 8004378:	461a      	mov	r2, r3
 800437a:	f7fd ff8c 	bl	8002296 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 800437e:	4b14      	ldr	r3, [pc, #80]	; (80043d0 <lcd16x2_write+0x1b0>)
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	4b16      	ldr	r3, [pc, #88]	; (80043dc <lcd16x2_write+0x1bc>)
 8004384:	8819      	ldrh	r1, [r3, #0]
 8004386:	7bfb      	ldrb	r3, [r7, #15]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	b2db      	uxtb	r3, r3
 800438e:	461a      	mov	r2, r3
 8004390:	f7fd ff81 	bl	8002296 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8004394:	4b0e      	ldr	r3, [pc, #56]	; (80043d0 <lcd16x2_write+0x1b0>)
 8004396:	6818      	ldr	r0, [r3, #0]
 8004398:	4b11      	ldr	r3, [pc, #68]	; (80043e0 <lcd16x2_write+0x1c0>)
 800439a:	8819      	ldrh	r1, [r3, #0]
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	461a      	mov	r2, r3
 80043a6:	f7fd ff76 	bl	8002296 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 80043aa:	f7ff ff05 	bl	80041b8 <lcd16x2_enablePulse>
}
 80043ae:	bf00      	nop
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20000009 	.word	0x20000009
 80043bc:	20000098 	.word	0x20000098
 80043c0:	2000009c 	.word	0x2000009c
 80043c4:	2000009e 	.word	0x2000009e
 80043c8:	200000a0 	.word	0x200000a0
 80043cc:	200000a2 	.word	0x200000a2
 80043d0:	200000a4 	.word	0x200000a4
 80043d4:	200000a8 	.word	0x200000a8
 80043d8:	200000aa 	.word	0x200000aa
 80043dc:	200000ac 	.word	0x200000ac
 80043e0:	200000ae 	.word	0x200000ae

080043e4 <lcd16x2_writeCommand>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	4603      	mov	r3, r0
 80043ec:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 80043ee:	2000      	movs	r0, #0
 80043f0:	f7ff ff00 	bl	80041f4 <lcd16x2_rs>
  lcd16x2_write(cmd);
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff ff12 	bl	8004220 <lcd16x2_write>
}
 80043fc:	bf00      	nop
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <lcd16x2_writeData>:

/**
 * @brief Write data
 */
static void lcd16x2_writeData(uint8_t data)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	4603      	mov	r3, r0
 800440c:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(true);
 800440e:	2001      	movs	r0, #1
 8004410:	f7ff fef0 	bl	80041f4 <lcd16x2_rs>
  lcd16x2_write(data);
 8004414:	79fb      	ldrb	r3, [r7, #7]
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff ff02 	bl	8004220 <lcd16x2_write>
}
 800441c:	bf00      	nop
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <lcd16x2_write4>:

/**
 * @brief 4-bits write
 */
static void lcd16x2_write4(uint8_t nib)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	4603      	mov	r3, r0
 800442c:	71fb      	strb	r3, [r7, #7]
  nib &= 0xF;
 800442e:	79fb      	ldrb	r3, [r7, #7]
 8004430:	f003 030f 	and.w	r3, r3, #15
 8004434:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 8004436:	2000      	movs	r0, #0
 8004438:	f7ff fedc 	bl	80041f4 <lcd16x2_rs>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 800443c:	4b18      	ldr	r3, [pc, #96]	; (80044a0 <lcd16x2_write4+0x7c>)
 800443e:	6818      	ldr	r0, [r3, #0]
 8004440:	4b18      	ldr	r3, [pc, #96]	; (80044a4 <lcd16x2_write4+0x80>)
 8004442:	8819      	ldrh	r1, [r3, #0]
 8004444:	79fb      	ldrb	r3, [r7, #7]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	b2db      	uxtb	r3, r3
 800444c:	461a      	mov	r2, r3
 800444e:	f7fd ff22 	bl	8002296 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 8004452:	4b13      	ldr	r3, [pc, #76]	; (80044a0 <lcd16x2_write4+0x7c>)
 8004454:	6818      	ldr	r0, [r3, #0]
 8004456:	4b14      	ldr	r3, [pc, #80]	; (80044a8 <lcd16x2_write4+0x84>)
 8004458:	8819      	ldrh	r1, [r3, #0]
 800445a:	79fb      	ldrb	r3, [r7, #7]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	b2db      	uxtb	r3, r3
 8004462:	461a      	mov	r2, r3
 8004464:	f7fd ff17 	bl	8002296 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 8004468:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <lcd16x2_write4+0x7c>)
 800446a:	6818      	ldr	r0, [r3, #0]
 800446c:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <lcd16x2_write4+0x88>)
 800446e:	8819      	ldrh	r1, [r3, #0]
 8004470:	79fb      	ldrb	r3, [r7, #7]
 8004472:	f003 0304 	and.w	r3, r3, #4
 8004476:	b2db      	uxtb	r3, r3
 8004478:	461a      	mov	r2, r3
 800447a:	f7fd ff0c 	bl	8002296 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 800447e:	4b08      	ldr	r3, [pc, #32]	; (80044a0 <lcd16x2_write4+0x7c>)
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <lcd16x2_write4+0x8c>)
 8004484:	8819      	ldrh	r1, [r3, #0]
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	f003 0308 	and.w	r3, r3, #8
 800448c:	b2db      	uxtb	r3, r3
 800448e:	461a      	mov	r2, r3
 8004490:	f7fd ff01 	bl	8002296 <HAL_GPIO_WritePin>
  lcd16x2_enablePulse();
 8004494:	f7ff fe90 	bl	80041b8 <lcd16x2_enablePulse>
}
 8004498:	bf00      	nop
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	200000a4 	.word	0x200000a4
 80044a4:	200000a8 	.word	0x200000a8
 80044a8:	200000aa 	.word	0x200000aa
 80044ac:	200000ac 	.word	0x200000ac
 80044b0:	200000ae 	.word	0x200000ae

080044b4 <lcd16x2_init_4bits>:
 * @param[in] x_pin GPIO pin (e.g. GPIO_PIN_1)
 */
void lcd16x2_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	607b      	str	r3, [r7, #4]
 80044be:	460b      	mov	r3, r1
 80044c0:	817b      	strh	r3, [r7, #10]
 80044c2:	4613      	mov	r3, r2
 80044c4:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 80044c6:	f7ff fe23 	bl	8004110 <DWT_Delay_Init>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 80044ca:	4a24      	ldr	r2, [pc, #144]	; (800455c <lcd16x2_init_4bits+0xa8>)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 80044d0:	4a23      	ldr	r2, [pc, #140]	; (8004560 <lcd16x2_init_4bits+0xac>)
 80044d2:	897b      	ldrh	r3, [r7, #10]
 80044d4:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 80044d6:	4a23      	ldr	r2, [pc, #140]	; (8004564 <lcd16x2_init_4bits+0xb0>)
 80044d8:	893b      	ldrh	r3, [r7, #8]
 80044da:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 80044dc:	4a22      	ldr	r2, [pc, #136]	; (8004568 <lcd16x2_init_4bits+0xb4>)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 80044e2:	4a22      	ldr	r2, [pc, #136]	; (800456c <lcd16x2_init_4bits+0xb8>)
 80044e4:	8b3b      	ldrh	r3, [r7, #24]
 80044e6:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 80044e8:	4a21      	ldr	r2, [pc, #132]	; (8004570 <lcd16x2_init_4bits+0xbc>)
 80044ea:	8bbb      	ldrh	r3, [r7, #28]
 80044ec:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 80044ee:	4a21      	ldr	r2, [pc, #132]	; (8004574 <lcd16x2_init_4bits+0xc0>)
 80044f0:	8c3b      	ldrh	r3, [r7, #32]
 80044f2:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 80044f4:	4a20      	ldr	r2, [pc, #128]	; (8004578 <lcd16x2_init_4bits+0xc4>)
 80044f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044f8:	8013      	strh	r3, [r2, #0]
  is8BitsMode = false;
 80044fa:	4b20      	ldr	r3, [pc, #128]	; (800457c <lcd16x2_init_4bits+0xc8>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 8004500:	4b1f      	ldr	r3, [pc, #124]	; (8004580 <lcd16x2_init_4bits+0xcc>)
 8004502:	2228      	movs	r2, #40	; 0x28
 8004504:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 8004506:	2014      	movs	r0, #20
 8004508:	f7fd f9f0 	bl	80018ec <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_write4(0x3);
 800450c:	2003      	movs	r0, #3
 800450e:	f7ff ff89 	bl	8004424 <lcd16x2_write4>
  LCD_MS_DELAY(5);
 8004512:	2005      	movs	r0, #5
 8004514:	f7fd f9ea 	bl	80018ec <HAL_Delay>
  lcd16x2_write4(0x3);
 8004518:	2003      	movs	r0, #3
 800451a:	f7ff ff83 	bl	8004424 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 800451e:	2001      	movs	r0, #1
 8004520:	f7fd f9e4 	bl	80018ec <HAL_Delay>
  lcd16x2_write4(0x3);
 8004524:	2003      	movs	r0, #3
 8004526:	f7ff ff7d 	bl	8004424 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 800452a:	2001      	movs	r0, #1
 800452c:	f7fd f9de 	bl	80018ec <HAL_Delay>
  lcd16x2_write4(0x2);  //4 bit mode
 8004530:	2002      	movs	r0, #2
 8004532:	f7ff ff77 	bl	8004424 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8004536:	2001      	movs	r0, #1
 8004538:	f7fd f9d8 	bl	80018ec <HAL_Delay>
  //4. Function set; Enable 2 lines, Data length to 4 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 800453c:	2028      	movs	r0, #40	; 0x28
 800453e:	f7ff ff51 	bl	80043e4 <lcd16x2_writeCommand>
  //3. Display control (Display ON, Cursor ON, blink cursor)
  //lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
  //3. Display control (Display ON, Cursor OFF, blink cursor OFF)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D );
 8004542:	200c      	movs	r0, #12
 8004544:	f7ff ff4e 	bl	80043e4 <lcd16x2_writeCommand>
  //4. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8004548:	2001      	movs	r0, #1
 800454a:	f7ff ff4b 	bl	80043e4 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 800454e:	2003      	movs	r0, #3
 8004550:	f7fd f9cc 	bl	80018ec <HAL_Delay>
}
 8004554:	bf00      	nop
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	20000090 	.word	0x20000090
 8004560:	20000094 	.word	0x20000094
 8004564:	20000096 	.word	0x20000096
 8004568:	200000a4 	.word	0x200000a4
 800456c:	200000a8 	.word	0x200000a8
 8004570:	200000aa 	.word	0x200000aa
 8004574:	200000ac 	.word	0x200000ac
 8004578:	200000ae 	.word	0x200000ae
 800457c:	20000009 	.word	0x20000009
 8004580:	2000000a 	.word	0x2000000a

08004584 <lcd16x2_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_setCursor(uint8_t row, uint8_t col)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	4603      	mov	r3, r0
 800458c:	460a      	mov	r2, r1
 800458e:	71fb      	strb	r3, [r7, #7]
 8004590:	4613      	mov	r3, r2
 8004592:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8004594:	79bb      	ldrb	r3, [r7, #6]
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 800459c:	79fb      	ldrb	r3, [r7, #7]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d108      	bne.n	80045b4 <lcd16x2_setCursor+0x30>
  {
    maskData |= (0x80);
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045a8:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7ff ff19 	bl	80043e4 <lcd16x2_writeCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_writeCommand(maskData);
  }
}
 80045b2:	e007      	b.n	80045c4 <lcd16x2_setCursor+0x40>
    maskData |= (0xc0);
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80045ba:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff ff10 	bl	80043e4 <lcd16x2_writeCommand>
}
 80045c4:	bf00      	nop
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <lcd16x2_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_clear(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 80045d0:	2001      	movs	r0, #1
 80045d2:	f7ff ff07 	bl	80043e4 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 80045d6:	2003      	movs	r0, #3
 80045d8:	f7fd f988 	bl	80018ec <HAL_Delay>
}
 80045dc:	bf00      	nop
 80045de:	bd80      	pop	{r7, pc}

080045e0 <lcd16x2_printf>:

/**
 * @brief Print to display any datatype (e.g. lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 80045e0:	b40f      	push	{r0, r1, r2, r3}
 80045e2:	b590      	push	{r4, r7, lr}
 80045e4:	b089      	sub	sp, #36	; 0x24
 80045e6:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 80045e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80045ec:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 80045ee:	f107 0308 	add.w	r3, r7, #8
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fb9e 	bl	8004d38 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80045fc:	2300      	movs	r3, #0
 80045fe:	77fb      	strb	r3, [r7, #31]
 8004600:	e00b      	b.n	800461a <lcd16x2_printf+0x3a>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 8004602:	7ffb      	ldrb	r3, [r7, #31]
 8004604:	f107 0220 	add.w	r2, r7, #32
 8004608:	4413      	add	r3, r2
 800460a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff fef8 	bl	8004404 <lcd16x2_writeData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8004614:	7ffb      	ldrb	r3, [r7, #31]
 8004616:	3301      	adds	r3, #1
 8004618:	77fb      	strb	r3, [r7, #31]
 800461a:	7ffc      	ldrb	r4, [r7, #31]
 800461c:	f107 0308 	add.w	r3, r7, #8
 8004620:	4618      	mov	r0, r3
 8004622:	f7fb fd95 	bl	8000150 <strlen>
 8004626:	4603      	mov	r3, r0
 8004628:	429c      	cmp	r4, r3
 800462a:	d202      	bcs.n	8004632 <lcd16x2_printf+0x52>
 800462c:	7ffb      	ldrb	r3, [r7, #31]
 800462e:	2b0f      	cmp	r3, #15
 8004630:	d9e7      	bls.n	8004602 <lcd16x2_printf+0x22>
  }
}
 8004632:	bf00      	nop
 8004634:	3724      	adds	r7, #36	; 0x24
 8004636:	46bd      	mov	sp, r7
 8004638:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800463c:	b004      	add	sp, #16
 800463e:	4770      	bx	lr

08004640 <limiter_initialize>:
 *
 * @param limiter  Ponteiro para a estrutura do limiter
 * @param fs    Frequencia de atualizacao do limiter
 */
void limiter_initialize(limiter_t *limiter, float fs, float rate)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
    limiter->fs = fs;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	601a      	str	r2, [r3, #0]
    limiter->ts = 1.0 / fs;
 8004652:	68b9      	ldr	r1, [r7, #8]
 8004654:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004658:	f7fc fc12 	bl	8000e80 <__aeabi_fdiv>
 800465c:	4603      	mov	r3, r0
 800465e:	461a      	mov	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	605a      	str	r2, [r3, #4]
    limiter->input = 0.0;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f04f 0200 	mov.w	r2, #0
 800466a:	615a      	str	r2, [r3, #20]
    limiter->output = 0.0;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f04f 0200 	mov.w	r2, #0
 8004672:	61da      	str	r2, [r3, #28]
    limiter->rate = rate;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	609a      	str	r2, [r3, #8]
}
 800467a:	bf00      	nop
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <limiter_rate_run>:
 * @param[in] limiter Ponteiro para a estrutura do limiter.
 * @param[in] input Entrada para o limitador de taxa.
 * @return Saída limitada pelo limite de taxa.
 */
float limiter_rate_run(limiter_t *limiter, float input)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b084      	sub	sp, #16
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	6039      	str	r1, [r7, #0]
    float delta    = input - limiter->output;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	4619      	mov	r1, r3
 8004692:	6838      	ldr	r0, [r7, #0]
 8004694:	f7fc fa36 	bl	8000b04 <__aeabi_fsub>
 8004698:	4603      	mov	r3, r0
 800469a:	60fb      	str	r3, [r7, #12]
    float maxDelta = limiter->rate * limiter->ts;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	4619      	mov	r1, r3
 80046a6:	4610      	mov	r0, r2
 80046a8:	f7fc fb36 	bl	8000d18 <__aeabi_fmul>
 80046ac:	4603      	mov	r3, r0
 80046ae:	60bb      	str	r3, [r7, #8]

    if (delta > maxDelta) {
 80046b0:	68b9      	ldr	r1, [r7, #8]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f7fc fcec 	bl	8001090 <__aeabi_fcmpgt>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d008      	beq.n	80046d0 <limiter_rate_run+0x4e>
        input = limiter->output + maxDelta;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	4619      	mov	r1, r3
 80046c4:	68b8      	ldr	r0, [r7, #8]
 80046c6:	f7fc fa1f 	bl	8000b08 <__addsf3>
 80046ca:	4603      	mov	r3, r0
 80046cc:	603b      	str	r3, [r7, #0]
 80046ce:	e011      	b.n	80046f4 <limiter_rate_run+0x72>
    } else if (delta < -maxDelta) {
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80046d6:	4619      	mov	r1, r3
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f7fc fcbb 	bl	8001054 <__aeabi_fcmplt>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d007      	beq.n	80046f4 <limiter_rate_run+0x72>
        input = limiter->output - maxDelta;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fc fa0a 	bl	8000b04 <__aeabi_fsub>
 80046f0:	4603      	mov	r3, r0
 80046f2:	603b      	str	r3, [r7, #0]
    }

    limiter->output = input;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	61da      	str	r2, [r3, #28]
    return limiter->output;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	69db      	ldr	r3, [r3, #28]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
	...

08004708 <so_filter_prewarp_frequency>:
 *
 * @param   fc              Frequencia de atualizacao do so_filter em Hz
 * @return  wp              Retorna a frequencia de corte pre distorcida em radianos
 */
void so_filter_prewarp_frequency(so_filter_t * so_filter, float fc)
{
 8004708:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800470c:	b082      	sub	sp, #8
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	6039      	str	r1, [r7, #0]
    so_filter->fc = fc;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	615a      	str	r2, [r3, #20]
    so_filter->wc = 2.0 * so_filter->fs * tan( 3.1415926535897932384626433832795 * fc * so_filter->ts );
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	4618      	mov	r0, r3
 8004720:	f7fb fe82 	bl	8000428 <__aeabi_f2d>
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	f7fb fd20 	bl	800016c <__adddf3>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4614      	mov	r4, r2
 8004732:	461d      	mov	r5, r3
 8004734:	6838      	ldr	r0, [r7, #0]
 8004736:	f7fb fe77 	bl	8000428 <__aeabi_f2d>
 800473a:	a317      	add	r3, pc, #92	; (adr r3, 8004798 <so_filter_prewarp_frequency+0x90>)
 800473c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004740:	f7fb feca 	bl	80004d8 <__aeabi_dmul>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	4690      	mov	r8, r2
 800474a:	4699      	mov	r9, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	4618      	mov	r0, r3
 8004752:	f7fb fe69 	bl	8000428 <__aeabi_f2d>
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	4640      	mov	r0, r8
 800475c:	4649      	mov	r1, r9
 800475e:	f7fb febb 	bl	80004d8 <__aeabi_dmul>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	4610      	mov	r0, r2
 8004768:	4619      	mov	r1, r3
 800476a:	f000 ff09 	bl	8005580 <tan>
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	4620      	mov	r0, r4
 8004774:	4629      	mov	r1, r5
 8004776:	f7fb feaf 	bl	80004d8 <__aeabi_dmul>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4610      	mov	r0, r2
 8004780:	4619      	mov	r1, r3
 8004782:	f7fc f96b 	bl	8000a5c <__aeabi_d2f>
 8004786:	4602      	mov	r2, r0
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	619a      	str	r2, [r3, #24]
}
 800478c:	bf00      	nop
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004796:	bf00      	nop
 8004798:	54442d18 	.word	0x54442d18
 800479c:	400921fb 	.word	0x400921fb

080047a0 <so_filter_update_coeff_lowpass>:
 * @param fs            Frequencia de atualizacao do so_filter em Hz
 * @param Q             Fator de qualidade do filtro
 * @param fc            Frequencia de corte em Hertz
 */
void so_filter_update_coeff_lowpass(so_filter_t * so_filter)
{
 80047a0:	b5b0      	push	{r4, r5, r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
    //!< Variaveis auxiliares para minimizar processamento
    float a = so_filter->ts * so_filter->ts * so_filter->wc *  so_filter->wc;   //!< (ts*wc)^2
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	4619      	mov	r1, r3
 80047b2:	4610      	mov	r0, r2
 80047b4:	f7fc fab0 	bl	8000d18 <__aeabi_fmul>
 80047b8:	4603      	mov	r3, r0
 80047ba:	461a      	mov	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	4619      	mov	r1, r3
 80047c2:	4610      	mov	r0, r2
 80047c4:	f7fc faa8 	bl	8000d18 <__aeabi_fmul>
 80047c8:	4603      	mov	r3, r0
 80047ca:	461a      	mov	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	4619      	mov	r1, r3
 80047d2:	4610      	mov	r0, r2
 80047d4:	f7fc faa0 	bl	8000d18 <__aeabi_fmul>
 80047d8:	4603      	mov	r3, r0
 80047da:	617b      	str	r3, [r7, #20]
    float b = (2.0 * so_filter->ts * so_filter->wc) / so_filter->Q;             //!< 2*ts*wc/Q
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7fb fe21 	bl	8000428 <__aeabi_f2d>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	f7fb fcbf 	bl	800016c <__adddf3>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	4614      	mov	r4, r2
 80047f4:	461d      	mov	r5, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fb fe14 	bl	8000428 <__aeabi_f2d>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4620      	mov	r0, r4
 8004806:	4629      	mov	r1, r5
 8004808:	f7fb fe66 	bl	80004d8 <__aeabi_dmul>
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	4614      	mov	r4, r2
 8004812:	461d      	mov	r5, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	4618      	mov	r0, r3
 800481a:	f7fb fe05 	bl	8000428 <__aeabi_f2d>
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	4620      	mov	r0, r4
 8004824:	4629      	mov	r1, r5
 8004826:	f7fb ff81 	bl	800072c <__aeabi_ddiv>
 800482a:	4602      	mov	r2, r0
 800482c:	460b      	mov	r3, r1
 800482e:	4610      	mov	r0, r2
 8004830:	4619      	mov	r1, r3
 8004832:	f7fc f913 	bl	8000a5c <__aeabi_d2f>
 8004836:	4603      	mov	r3, r0
 8004838:	613b      	str	r3, [r7, #16]
    float aux_div = 1.0 / ( 4 + b + a );                                        //!< 1 / (4 + 2*ts*wc/Q + (ts*wc)^2)
 800483a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800483e:	6938      	ldr	r0, [r7, #16]
 8004840:	f7fc f962 	bl	8000b08 <__addsf3>
 8004844:	4603      	mov	r3, r0
 8004846:	6979      	ldr	r1, [r7, #20]
 8004848:	4618      	mov	r0, r3
 800484a:	f7fc f95d 	bl	8000b08 <__addsf3>
 800484e:	4603      	mov	r3, r0
 8004850:	4619      	mov	r1, r3
 8004852:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004856:	f7fc fb13 	bl	8000e80 <__aeabi_fdiv>
 800485a:	4603      	mov	r3, r0
 800485c:	60fb      	str	r3, [r7, #12]

    //!< Coeficientes do filtro de eixo direto
    so_filter->coeffs.a1 = ( (2.0 * a) - 8) * aux_div;
 800485e:	6978      	ldr	r0, [r7, #20]
 8004860:	f7fb fde2 	bl	8000428 <__aeabi_f2d>
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	f7fb fc80 	bl	800016c <__adddf3>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	4610      	mov	r0, r2
 8004872:	4619      	mov	r1, r3
 8004874:	f04f 0200 	mov.w	r2, #0
 8004878:	4b22      	ldr	r3, [pc, #136]	; (8004904 <so_filter_update_coeff_lowpass+0x164>)
 800487a:	f7fb fc75 	bl	8000168 <__aeabi_dsub>
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	4614      	mov	r4, r2
 8004884:	461d      	mov	r5, r3
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f7fb fdce 	bl	8000428 <__aeabi_f2d>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4620      	mov	r0, r4
 8004892:	4629      	mov	r1, r5
 8004894:	f7fb fe20 	bl	80004d8 <__aeabi_dmul>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4610      	mov	r0, r2
 800489e:	4619      	mov	r1, r3
 80048a0:	f7fc f8dc 	bl	8000a5c <__aeabi_d2f>
 80048a4:	4602      	mov	r2, r0
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	61da      	str	r2, [r3, #28]
    so_filter->coeffs.a2 = (a - b + 4)      * aux_div;
 80048aa:	6939      	ldr	r1, [r7, #16]
 80048ac:	6978      	ldr	r0, [r7, #20]
 80048ae:	f7fc f929 	bl	8000b04 <__aeabi_fsub>
 80048b2:	4603      	mov	r3, r0
 80048b4:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7fc f925 	bl	8000b08 <__addsf3>
 80048be:	4603      	mov	r3, r0
 80048c0:	68f9      	ldr	r1, [r7, #12]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fc fa28 	bl	8000d18 <__aeabi_fmul>
 80048c8:	4603      	mov	r3, r0
 80048ca:	461a      	mov	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	621a      	str	r2, [r3, #32]
    so_filter->coeffs.b0 = a                * aux_div;
 80048d0:	68f9      	ldr	r1, [r7, #12]
 80048d2:	6978      	ldr	r0, [r7, #20]
 80048d4:	f7fc fa20 	bl	8000d18 <__aeabi_fmul>
 80048d8:	4603      	mov	r3, r0
 80048da:	461a      	mov	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	625a      	str	r2, [r3, #36]	; 0x24
    so_filter->coeffs.b1 = 2.0 * so_filter->coeffs.b0;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	4619      	mov	r1, r3
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fc f90e 	bl	8000b08 <__addsf3>
 80048ec:	4603      	mov	r3, r0
 80048ee:	461a      	mov	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	629a      	str	r2, [r3, #40]	; 0x28
    so_filter->coeffs.b2 = so_filter->coeffs.b0;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80048fc:	bf00      	nop
 80048fe:	3718      	adds	r7, #24
 8004900:	46bd      	mov	sp, r7
 8004902:	bdb0      	pop	{r4, r5, r7, pc}
 8004904:	40200000 	.word	0x40200000

08004908 <so_filter_update_coeff_notch>:
 * @param fs            Frequencia de atualizacao do so_filter em Hz
 * @param Q             Fator de qualidade do filtro
 * @param fc            Frequencia de corte em Hertz
 */
void so_filter_update_coeff_notch(so_filter_t * so_filter)
{
 8004908:	b5b0      	push	{r4, r5, r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
    //!< Variaveis auxiliares para minimizar processamento
    float a = so_filter->ts * so_filter->ts * so_filter->wc *  so_filter->wc;   //!< (ts*wc)^2
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691a      	ldr	r2, [r3, #16]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	4619      	mov	r1, r3
 800491a:	4610      	mov	r0, r2
 800491c:	f7fc f9fc 	bl	8000d18 <__aeabi_fmul>
 8004920:	4603      	mov	r3, r0
 8004922:	461a      	mov	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	4619      	mov	r1, r3
 800492a:	4610      	mov	r0, r2
 800492c:	f7fc f9f4 	bl	8000d18 <__aeabi_fmul>
 8004930:	4603      	mov	r3, r0
 8004932:	461a      	mov	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	4619      	mov	r1, r3
 800493a:	4610      	mov	r0, r2
 800493c:	f7fc f9ec 	bl	8000d18 <__aeabi_fmul>
 8004940:	4603      	mov	r3, r0
 8004942:	617b      	str	r3, [r7, #20]
    float b = 2.0 * so_filter->ts * so_filter->wc / so_filter->Q;               //!< 2*ts*wc/Q
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	4618      	mov	r0, r3
 800494a:	f7fb fd6d 	bl	8000428 <__aeabi_f2d>
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	f7fb fc0b 	bl	800016c <__adddf3>
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	4614      	mov	r4, r2
 800495c:	461d      	mov	r5, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	4618      	mov	r0, r3
 8004964:	f7fb fd60 	bl	8000428 <__aeabi_f2d>
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	4620      	mov	r0, r4
 800496e:	4629      	mov	r1, r5
 8004970:	f7fb fdb2 	bl	80004d8 <__aeabi_dmul>
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	4614      	mov	r4, r2
 800497a:	461d      	mov	r5, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	4618      	mov	r0, r3
 8004982:	f7fb fd51 	bl	8000428 <__aeabi_f2d>
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	4620      	mov	r0, r4
 800498c:	4629      	mov	r1, r5
 800498e:	f7fb fecd 	bl	800072c <__aeabi_ddiv>
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	4610      	mov	r0, r2
 8004998:	4619      	mov	r1, r3
 800499a:	f7fc f85f 	bl	8000a5c <__aeabi_d2f>
 800499e:	4603      	mov	r3, r0
 80049a0:	613b      	str	r3, [r7, #16]
    float c = a + 4;                                                            //!< (ts*wc)^2 + 4
 80049a2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80049a6:	6978      	ldr	r0, [r7, #20]
 80049a8:	f7fc f8ae 	bl	8000b08 <__addsf3>
 80049ac:	4603      	mov	r3, r0
 80049ae:	60fb      	str	r3, [r7, #12]
    float aux_div = 1.0 / ( b + c );                                            //!< 1 / (4 + 2*ts*wc/Q + (ts*wc)^2)
 80049b0:	68f9      	ldr	r1, [r7, #12]
 80049b2:	6938      	ldr	r0, [r7, #16]
 80049b4:	f7fc f8a8 	bl	8000b08 <__addsf3>
 80049b8:	4603      	mov	r3, r0
 80049ba:	4619      	mov	r1, r3
 80049bc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80049c0:	f7fc fa5e 	bl	8000e80 <__aeabi_fdiv>
 80049c4:	4603      	mov	r3, r0
 80049c6:	60bb      	str	r3, [r7, #8]

    //!< Coeficientes do filtro de eixo direto
    so_filter->coeffs.a1 = (2.0 * a - 8)    * aux_div;
 80049c8:	6978      	ldr	r0, [r7, #20]
 80049ca:	f7fb fd2d 	bl	8000428 <__aeabi_f2d>
 80049ce:	4602      	mov	r2, r0
 80049d0:	460b      	mov	r3, r1
 80049d2:	f7fb fbcb 	bl	800016c <__adddf3>
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	4610      	mov	r0, r2
 80049dc:	4619      	mov	r1, r3
 80049de:	f04f 0200 	mov.w	r2, #0
 80049e2:	4b1d      	ldr	r3, [pc, #116]	; (8004a58 <so_filter_update_coeff_notch+0x150>)
 80049e4:	f7fb fbc0 	bl	8000168 <__aeabi_dsub>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4614      	mov	r4, r2
 80049ee:	461d      	mov	r5, r3
 80049f0:	68b8      	ldr	r0, [r7, #8]
 80049f2:	f7fb fd19 	bl	8000428 <__aeabi_f2d>
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	4620      	mov	r0, r4
 80049fc:	4629      	mov	r1, r5
 80049fe:	f7fb fd6b 	bl	80004d8 <__aeabi_dmul>
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4610      	mov	r0, r2
 8004a08:	4619      	mov	r1, r3
 8004a0a:	f7fc f827 	bl	8000a5c <__aeabi_d2f>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	61da      	str	r2, [r3, #28]
    so_filter->coeffs.a2 = (c - b)          * aux_div;
 8004a14:	6939      	ldr	r1, [r7, #16]
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f7fc f874 	bl	8000b04 <__aeabi_fsub>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	68b9      	ldr	r1, [r7, #8]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fc f979 	bl	8000d18 <__aeabi_fmul>
 8004a26:	4603      	mov	r3, r0
 8004a28:	461a      	mov	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	621a      	str	r2, [r3, #32]
    so_filter->coeffs.b0 = c                * aux_div;
 8004a2e:	68b9      	ldr	r1, [r7, #8]
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f7fc f971 	bl	8000d18 <__aeabi_fmul>
 8004a36:	4603      	mov	r3, r0
 8004a38:	461a      	mov	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	625a      	str	r2, [r3, #36]	; 0x24
    so_filter->coeffs.b1 = so_filter->coeffs.a1;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69da      	ldr	r2, [r3, #28]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	629a      	str	r2, [r3, #40]	; 0x28
    so_filter->coeffs.b2 = so_filter->coeffs.b0;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004a4e:	bf00      	nop
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bdb0      	pop	{r4, r5, r7, pc}
 8004a56:	bf00      	nop
 8004a58:	40200000 	.word	0x40200000

08004a5c <so_filter_run>:
 * @brief Roda a estrutura do filtro SO
 *
 * @param so_filter Ponteiro para a estrutura do filtro
 * @param input     Entrada do filtro
 */
float so_filter_run(so_filter_t * so_filter, float input){
 8004a5c:	b590      	push	{r4, r7, lr}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
    so_filter->states.u2 = so_filter->states.u1;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	639a      	str	r2, [r3, #56]	; 0x38
    so_filter->states.u1 = so_filter->states.u0;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	635a      	str	r2, [r3, #52]	; 0x34
    so_filter->states.u0 = input;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	631a      	str	r2, [r3, #48]	; 0x30
    so_filter->states.y2 = so_filter->states.y1;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	645a      	str	r2, [r3, #68]	; 0x44
    so_filter->states.y1 = so_filter->states.y0;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	641a      	str	r2, [r3, #64]	; 0x40
    so_filter->states.y0 =  so_filter->states.u0 * so_filter->coeffs.b0 +
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	4619      	mov	r1, r3
 8004a96:	4610      	mov	r0, r2
 8004a98:	f7fc f93e 	bl	8000d18 <__aeabi_fmul>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	461c      	mov	r4, r3
                            so_filter->states.u1 * so_filter->coeffs.b1 +
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4610      	mov	r0, r2
 8004aac:	f7fc f934 	bl	8000d18 <__aeabi_fmul>
 8004ab0:	4603      	mov	r3, r0
    so_filter->states.y0 =  so_filter->states.u0 * so_filter->coeffs.b0 +
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	f7fc f827 	bl	8000b08 <__addsf3>
 8004aba:	4603      	mov	r3, r0
 8004abc:	461c      	mov	r4, r3
                            so_filter->states.u2 * so_filter->coeffs.b2 -
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4610      	mov	r0, r2
 8004aca:	f7fc f925 	bl	8000d18 <__aeabi_fmul>
 8004ace:	4603      	mov	r3, r0
                            so_filter->states.u1 * so_filter->coeffs.b1 +
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	f7fc f818 	bl	8000b08 <__addsf3>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	461c      	mov	r4, r3
                            so_filter->states.y2 * so_filter->coeffs.a2 -
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	f7fc f916 	bl	8000d18 <__aeabi_fmul>
 8004aec:	4603      	mov	r3, r0
                            so_filter->states.u2 * so_filter->coeffs.b2 -
 8004aee:	4619      	mov	r1, r3
 8004af0:	4620      	mov	r0, r4
 8004af2:	f7fc f807 	bl	8000b04 <__aeabi_fsub>
 8004af6:	4603      	mov	r3, r0
 8004af8:	461c      	mov	r4, r3
                            so_filter->states.y1 * so_filter->coeffs.a1;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	4619      	mov	r1, r3
 8004b04:	4610      	mov	r0, r2
 8004b06:	f7fc f907 	bl	8000d18 <__aeabi_fmul>
 8004b0a:	4603      	mov	r3, r0
                            so_filter->states.y2 * so_filter->coeffs.a2 -
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4620      	mov	r0, r4
 8004b10:	f7fb fff8 	bl	8000b04 <__aeabi_fsub>
 8004b14:	4603      	mov	r3, r0
 8004b16:	461a      	mov	r2, r3
    so_filter->states.y0 =  so_filter->states.u0 * so_filter->coeffs.b0 +
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	63da      	str	r2, [r3, #60]	; 0x3c
    return so_filter->states.y0;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd90      	pop	{r4, r7, pc}

08004b28 <so_filter_initialize>:
 * @param Q             Fator de qualidade do filtro
 * @param fc            Frequencia de corte em Hertz
 * @param Type          Tipo do filtro: 0 lowpass, 1 bandpass, 2 notch e 3 highpass
 */
void so_filter_initialize(so_filter_t * so_filter, float fs, float fc, float Q, int type, int is_prewarped)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	603b      	str	r3, [r7, #0]
    //!< Atualiza os parametros usado no filtro
    so_filter->type = type;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	601a      	str	r2, [r3, #0]
    so_filter->Q  = Q;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	609a      	str	r2, [r3, #8]
    so_filter->fs = fs;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	60da      	str	r2, [r3, #12]
    so_filter->ts = 1.0 / fs;
 8004b48:	68b9      	ldr	r1, [r7, #8]
 8004b4a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004b4e:	f7fc f997 	bl	8000e80 <__aeabi_fdiv>
 8004b52:	4603      	mov	r3, r0
 8004b54:	461a      	mov	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	611a      	str	r2, [r3, #16]
    so_filter->fc = fc;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	615a      	str	r2, [r3, #20]
    so_filter->is_prewarped = is_prewarped;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	69fa      	ldr	r2, [r7, #28]
 8004b64:	605a      	str	r2, [r3, #4]

    if (is_prewarped){
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d004      	beq.n	8004b76 <so_filter_initialize+0x4e>
        so_filter_prewarp_frequency(so_filter, fc);
 8004b6c:	6879      	ldr	r1, [r7, #4]
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f7ff fdca 	bl	8004708 <so_filter_prewarp_frequency>
    }else{
        so_filter->wc = 6.28318530717958647692528676655900 * fc;
    }
}
 8004b74:	e010      	b.n	8004b98 <so_filter_initialize+0x70>
        so_filter->wc = 6.28318530717958647692528676655900 * fc;
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fb fc56 	bl	8000428 <__aeabi_f2d>
 8004b7c:	a308      	add	r3, pc, #32	; (adr r3, 8004ba0 <so_filter_initialize+0x78>)
 8004b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b82:	f7fb fca9 	bl	80004d8 <__aeabi_dmul>
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	f7fb ff65 	bl	8000a5c <__aeabi_d2f>
 8004b92:	4602      	mov	r2, r0
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	619a      	str	r2, [r3, #24]
}
 8004b98:	bf00      	nop
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	54442d18 	.word	0x54442d18
 8004ba4:	401921fb 	.word	0x401921fb

08004ba8 <WaveGenerator_update>:
 * @param SineWave Ponteiro para estrutura WaveGenerator
 *
 * @warning
 */
void WaveGenerator_update(WaveGenerator_t * SineWave, float Fs, float Fg, float A)
{
 8004ba8:	b5b0      	push	{r4, r5, r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
 8004bb4:	603b      	str	r3, [r7, #0]
    //!< Atualiza frequencia da integra��o do gerador
    //SineWave->Fs = Fs;
    //!< Atualiza periodo da integra��o do gerador
    //SineWave->Ts = 1.0 / Fs;
    //!< Atualiza Passo de integra��o
    SineWave->Delta = TWOPI * Fg * SineWave->Ts;
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7fb fc36 	bl	8000428 <__aeabi_f2d>
 8004bbc:	a314      	add	r3, pc, #80	; (adr r3, 8004c10 <WaveGenerator_update+0x68>)
 8004bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc2:	f7fb fc89 	bl	80004d8 <__aeabi_dmul>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	460b      	mov	r3, r1
 8004bca:	4614      	mov	r4, r2
 8004bcc:	461d      	mov	r5, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fb fc28 	bl	8000428 <__aeabi_f2d>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4620      	mov	r0, r4
 8004bde:	4629      	mov	r1, r5
 8004be0:	f7fb fc7a 	bl	80004d8 <__aeabi_dmul>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4610      	mov	r0, r2
 8004bea:	4619      	mov	r1, r3
 8004bec:	f7fb ff36 	bl	8000a5c <__aeabi_d2f>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	609a      	str	r2, [r3, #8]
    //!< Atualiza frequencia fundamental da gera��o
    SineWave->Fg = Fg;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	611a      	str	r2, [r3, #16]
    //!< Atualiza amplitude do sinal de gera��o
    SineWave->A = A;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	615a      	str	r2, [r3, #20]

}
 8004c02:	bf00      	nop
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bdb0      	pop	{r4, r5, r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	f3af 8000 	nop.w
 8004c10:	54442d18 	.word	0x54442d18
 8004c14:	401921fb 	.word	0x401921fb

08004c18 <WaveGenerator_sine_single_run>:
 * @param SineWave Ponteiro para estrutura WaveGenerator
 *
 * @warning
 */
void WaveGenerator_sine_single_run(WaveGenerator_t * SineWave)
{
 8004c18:	b590      	push	{r4, r7, lr}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
    //!< Atualiza tempo
    SineWave->t = SineWave->t + SineWave->Delta;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	f7fb ff6c 	bl	8000b08 <__addsf3>
 8004c30:	4603      	mov	r3, r0
 8004c32:	461a      	mov	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	60da      	str	r2, [r3, #12]

    //!< Reseta quando complar um ciclo
    if (SineWave->t >= TWOPI){
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fb fbf3 	bl	8000428 <__aeabi_f2d>
 8004c42:	a317      	add	r3, pc, #92	; (adr r3, 8004ca0 <WaveGenerator_sine_single_run+0x88>)
 8004c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c48:	f7fb fecc 	bl	80009e4 <__aeabi_dcmpge>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d012      	beq.n	8004c78 <WaveGenerator_sine_single_run+0x60>
        SineWave->t -= TWOPI;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fb fbe6 	bl	8000428 <__aeabi_f2d>
 8004c5c:	a310      	add	r3, pc, #64	; (adr r3, 8004ca0 <WaveGenerator_sine_single_run+0x88>)
 8004c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c62:	f7fb fa81 	bl	8000168 <__aeabi_dsub>
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	f7fb fef5 	bl	8000a5c <__aeabi_d2f>
 8004c72:	4602      	mov	r2, r0
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	60da      	str	r2, [r3, #12]
    }

    //!< Atualiza as saidas
    SineWave->a = SineWave->A * sinf(SineWave->t + THETA_A);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	695c      	ldr	r4, [r3, #20]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 fcd3 	bl	800562c <sinf>
 8004c86:	4603      	mov	r3, r0
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	f7fc f844 	bl	8000d18 <__aeabi_fmul>
 8004c90:	4603      	mov	r3, r0
 8004c92:	461a      	mov	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	621a      	str	r2, [r3, #32]

}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd90      	pop	{r4, r7, pc}
 8004ca0:	54442d18 	.word	0x54442d18
 8004ca4:	401921fb 	.word	0x401921fb

08004ca8 <__errno>:
 8004ca8:	4b01      	ldr	r3, [pc, #4]	; (8004cb0 <__errno+0x8>)
 8004caa:	6818      	ldr	r0, [r3, #0]
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	2000000c 	.word	0x2000000c

08004cb4 <__libc_init_array>:
 8004cb4:	b570      	push	{r4, r5, r6, lr}
 8004cb6:	2600      	movs	r6, #0
 8004cb8:	4d0c      	ldr	r5, [pc, #48]	; (8004cec <__libc_init_array+0x38>)
 8004cba:	4c0d      	ldr	r4, [pc, #52]	; (8004cf0 <__libc_init_array+0x3c>)
 8004cbc:	1b64      	subs	r4, r4, r5
 8004cbe:	10a4      	asrs	r4, r4, #2
 8004cc0:	42a6      	cmp	r6, r4
 8004cc2:	d109      	bne.n	8004cd8 <__libc_init_array+0x24>
 8004cc4:	f002 fa8c 	bl	80071e0 <_init>
 8004cc8:	2600      	movs	r6, #0
 8004cca:	4d0a      	ldr	r5, [pc, #40]	; (8004cf4 <__libc_init_array+0x40>)
 8004ccc:	4c0a      	ldr	r4, [pc, #40]	; (8004cf8 <__libc_init_array+0x44>)
 8004cce:	1b64      	subs	r4, r4, r5
 8004cd0:	10a4      	asrs	r4, r4, #2
 8004cd2:	42a6      	cmp	r6, r4
 8004cd4:	d105      	bne.n	8004ce2 <__libc_init_array+0x2e>
 8004cd6:	bd70      	pop	{r4, r5, r6, pc}
 8004cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cdc:	4798      	blx	r3
 8004cde:	3601      	adds	r6, #1
 8004ce0:	e7ee      	b.n	8004cc0 <__libc_init_array+0xc>
 8004ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce6:	4798      	blx	r3
 8004ce8:	3601      	adds	r6, #1
 8004cea:	e7f2      	b.n	8004cd2 <__libc_init_array+0x1e>
 8004cec:	08007880 	.word	0x08007880
 8004cf0:	08007880 	.word	0x08007880
 8004cf4:	08007880 	.word	0x08007880
 8004cf8:	08007884 	.word	0x08007884

08004cfc <memset>:
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	4402      	add	r2, r0
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d100      	bne.n	8004d06 <memset+0xa>
 8004d04:	4770      	bx	lr
 8004d06:	f803 1b01 	strb.w	r1, [r3], #1
 8004d0a:	e7f9      	b.n	8004d00 <memset+0x4>

08004d0c <_vsiprintf_r>:
 8004d0c:	b500      	push	{lr}
 8004d0e:	b09b      	sub	sp, #108	; 0x6c
 8004d10:	9100      	str	r1, [sp, #0]
 8004d12:	9104      	str	r1, [sp, #16]
 8004d14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d18:	9105      	str	r1, [sp, #20]
 8004d1a:	9102      	str	r1, [sp, #8]
 8004d1c:	4905      	ldr	r1, [pc, #20]	; (8004d34 <_vsiprintf_r+0x28>)
 8004d1e:	9103      	str	r1, [sp, #12]
 8004d20:	4669      	mov	r1, sp
 8004d22:	f000 f86f 	bl	8004e04 <_svfiprintf_r>
 8004d26:	2200      	movs	r2, #0
 8004d28:	9b00      	ldr	r3, [sp, #0]
 8004d2a:	701a      	strb	r2, [r3, #0]
 8004d2c:	b01b      	add	sp, #108	; 0x6c
 8004d2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d32:	bf00      	nop
 8004d34:	ffff0208 	.word	0xffff0208

08004d38 <vsiprintf>:
 8004d38:	4613      	mov	r3, r2
 8004d3a:	460a      	mov	r2, r1
 8004d3c:	4601      	mov	r1, r0
 8004d3e:	4802      	ldr	r0, [pc, #8]	; (8004d48 <vsiprintf+0x10>)
 8004d40:	6800      	ldr	r0, [r0, #0]
 8004d42:	f7ff bfe3 	b.w	8004d0c <_vsiprintf_r>
 8004d46:	bf00      	nop
 8004d48:	2000000c 	.word	0x2000000c

08004d4c <__ssputs_r>:
 8004d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d50:	688e      	ldr	r6, [r1, #8]
 8004d52:	4682      	mov	sl, r0
 8004d54:	429e      	cmp	r6, r3
 8004d56:	460c      	mov	r4, r1
 8004d58:	4690      	mov	r8, r2
 8004d5a:	461f      	mov	r7, r3
 8004d5c:	d838      	bhi.n	8004dd0 <__ssputs_r+0x84>
 8004d5e:	898a      	ldrh	r2, [r1, #12]
 8004d60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d64:	d032      	beq.n	8004dcc <__ssputs_r+0x80>
 8004d66:	6825      	ldr	r5, [r4, #0]
 8004d68:	6909      	ldr	r1, [r1, #16]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	eba5 0901 	sub.w	r9, r5, r1
 8004d70:	6965      	ldr	r5, [r4, #20]
 8004d72:	444b      	add	r3, r9
 8004d74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d7c:	106d      	asrs	r5, r5, #1
 8004d7e:	429d      	cmp	r5, r3
 8004d80:	bf38      	it	cc
 8004d82:	461d      	movcc	r5, r3
 8004d84:	0553      	lsls	r3, r2, #21
 8004d86:	d531      	bpl.n	8004dec <__ssputs_r+0xa0>
 8004d88:	4629      	mov	r1, r5
 8004d8a:	f000 fb53 	bl	8005434 <_malloc_r>
 8004d8e:	4606      	mov	r6, r0
 8004d90:	b950      	cbnz	r0, 8004da8 <__ssputs_r+0x5c>
 8004d92:	230c      	movs	r3, #12
 8004d94:	f04f 30ff 	mov.w	r0, #4294967295
 8004d98:	f8ca 3000 	str.w	r3, [sl]
 8004d9c:	89a3      	ldrh	r3, [r4, #12]
 8004d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004da2:	81a3      	strh	r3, [r4, #12]
 8004da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004da8:	464a      	mov	r2, r9
 8004daa:	6921      	ldr	r1, [r4, #16]
 8004dac:	f000 face 	bl	800534c <memcpy>
 8004db0:	89a3      	ldrh	r3, [r4, #12]
 8004db2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dba:	81a3      	strh	r3, [r4, #12]
 8004dbc:	6126      	str	r6, [r4, #16]
 8004dbe:	444e      	add	r6, r9
 8004dc0:	6026      	str	r6, [r4, #0]
 8004dc2:	463e      	mov	r6, r7
 8004dc4:	6165      	str	r5, [r4, #20]
 8004dc6:	eba5 0509 	sub.w	r5, r5, r9
 8004dca:	60a5      	str	r5, [r4, #8]
 8004dcc:	42be      	cmp	r6, r7
 8004dce:	d900      	bls.n	8004dd2 <__ssputs_r+0x86>
 8004dd0:	463e      	mov	r6, r7
 8004dd2:	4632      	mov	r2, r6
 8004dd4:	4641      	mov	r1, r8
 8004dd6:	6820      	ldr	r0, [r4, #0]
 8004dd8:	f000 fac6 	bl	8005368 <memmove>
 8004ddc:	68a3      	ldr	r3, [r4, #8]
 8004dde:	6822      	ldr	r2, [r4, #0]
 8004de0:	1b9b      	subs	r3, r3, r6
 8004de2:	4432      	add	r2, r6
 8004de4:	2000      	movs	r0, #0
 8004de6:	60a3      	str	r3, [r4, #8]
 8004de8:	6022      	str	r2, [r4, #0]
 8004dea:	e7db      	b.n	8004da4 <__ssputs_r+0x58>
 8004dec:	462a      	mov	r2, r5
 8004dee:	f000 fb7b 	bl	80054e8 <_realloc_r>
 8004df2:	4606      	mov	r6, r0
 8004df4:	2800      	cmp	r0, #0
 8004df6:	d1e1      	bne.n	8004dbc <__ssputs_r+0x70>
 8004df8:	4650      	mov	r0, sl
 8004dfa:	6921      	ldr	r1, [r4, #16]
 8004dfc:	f000 face 	bl	800539c <_free_r>
 8004e00:	e7c7      	b.n	8004d92 <__ssputs_r+0x46>
	...

08004e04 <_svfiprintf_r>:
 8004e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e08:	4698      	mov	r8, r3
 8004e0a:	898b      	ldrh	r3, [r1, #12]
 8004e0c:	4607      	mov	r7, r0
 8004e0e:	061b      	lsls	r3, r3, #24
 8004e10:	460d      	mov	r5, r1
 8004e12:	4614      	mov	r4, r2
 8004e14:	b09d      	sub	sp, #116	; 0x74
 8004e16:	d50e      	bpl.n	8004e36 <_svfiprintf_r+0x32>
 8004e18:	690b      	ldr	r3, [r1, #16]
 8004e1a:	b963      	cbnz	r3, 8004e36 <_svfiprintf_r+0x32>
 8004e1c:	2140      	movs	r1, #64	; 0x40
 8004e1e:	f000 fb09 	bl	8005434 <_malloc_r>
 8004e22:	6028      	str	r0, [r5, #0]
 8004e24:	6128      	str	r0, [r5, #16]
 8004e26:	b920      	cbnz	r0, 8004e32 <_svfiprintf_r+0x2e>
 8004e28:	230c      	movs	r3, #12
 8004e2a:	603b      	str	r3, [r7, #0]
 8004e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e30:	e0d1      	b.n	8004fd6 <_svfiprintf_r+0x1d2>
 8004e32:	2340      	movs	r3, #64	; 0x40
 8004e34:	616b      	str	r3, [r5, #20]
 8004e36:	2300      	movs	r3, #0
 8004e38:	9309      	str	r3, [sp, #36]	; 0x24
 8004e3a:	2320      	movs	r3, #32
 8004e3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e40:	2330      	movs	r3, #48	; 0x30
 8004e42:	f04f 0901 	mov.w	r9, #1
 8004e46:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004ff0 <_svfiprintf_r+0x1ec>
 8004e4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e52:	4623      	mov	r3, r4
 8004e54:	469a      	mov	sl, r3
 8004e56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e5a:	b10a      	cbz	r2, 8004e60 <_svfiprintf_r+0x5c>
 8004e5c:	2a25      	cmp	r2, #37	; 0x25
 8004e5e:	d1f9      	bne.n	8004e54 <_svfiprintf_r+0x50>
 8004e60:	ebba 0b04 	subs.w	fp, sl, r4
 8004e64:	d00b      	beq.n	8004e7e <_svfiprintf_r+0x7a>
 8004e66:	465b      	mov	r3, fp
 8004e68:	4622      	mov	r2, r4
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	4638      	mov	r0, r7
 8004e6e:	f7ff ff6d 	bl	8004d4c <__ssputs_r>
 8004e72:	3001      	adds	r0, #1
 8004e74:	f000 80aa 	beq.w	8004fcc <_svfiprintf_r+0x1c8>
 8004e78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e7a:	445a      	add	r2, fp
 8004e7c:	9209      	str	r2, [sp, #36]	; 0x24
 8004e7e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 80a2 	beq.w	8004fcc <_svfiprintf_r+0x1c8>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e92:	f10a 0a01 	add.w	sl, sl, #1
 8004e96:	9304      	str	r3, [sp, #16]
 8004e98:	9307      	str	r3, [sp, #28]
 8004e9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e9e:	931a      	str	r3, [sp, #104]	; 0x68
 8004ea0:	4654      	mov	r4, sl
 8004ea2:	2205      	movs	r2, #5
 8004ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ea8:	4851      	ldr	r0, [pc, #324]	; (8004ff0 <_svfiprintf_r+0x1ec>)
 8004eaa:	f000 fa41 	bl	8005330 <memchr>
 8004eae:	9a04      	ldr	r2, [sp, #16]
 8004eb0:	b9d8      	cbnz	r0, 8004eea <_svfiprintf_r+0xe6>
 8004eb2:	06d0      	lsls	r0, r2, #27
 8004eb4:	bf44      	itt	mi
 8004eb6:	2320      	movmi	r3, #32
 8004eb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ebc:	0711      	lsls	r1, r2, #28
 8004ebe:	bf44      	itt	mi
 8004ec0:	232b      	movmi	r3, #43	; 0x2b
 8004ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ec6:	f89a 3000 	ldrb.w	r3, [sl]
 8004eca:	2b2a      	cmp	r3, #42	; 0x2a
 8004ecc:	d015      	beq.n	8004efa <_svfiprintf_r+0xf6>
 8004ece:	4654      	mov	r4, sl
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	f04f 0c0a 	mov.w	ip, #10
 8004ed6:	9a07      	ldr	r2, [sp, #28]
 8004ed8:	4621      	mov	r1, r4
 8004eda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ede:	3b30      	subs	r3, #48	; 0x30
 8004ee0:	2b09      	cmp	r3, #9
 8004ee2:	d94e      	bls.n	8004f82 <_svfiprintf_r+0x17e>
 8004ee4:	b1b0      	cbz	r0, 8004f14 <_svfiprintf_r+0x110>
 8004ee6:	9207      	str	r2, [sp, #28]
 8004ee8:	e014      	b.n	8004f14 <_svfiprintf_r+0x110>
 8004eea:	eba0 0308 	sub.w	r3, r0, r8
 8004eee:	fa09 f303 	lsl.w	r3, r9, r3
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	46a2      	mov	sl, r4
 8004ef6:	9304      	str	r3, [sp, #16]
 8004ef8:	e7d2      	b.n	8004ea0 <_svfiprintf_r+0x9c>
 8004efa:	9b03      	ldr	r3, [sp, #12]
 8004efc:	1d19      	adds	r1, r3, #4
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	9103      	str	r1, [sp, #12]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	bfbb      	ittet	lt
 8004f06:	425b      	neglt	r3, r3
 8004f08:	f042 0202 	orrlt.w	r2, r2, #2
 8004f0c:	9307      	strge	r3, [sp, #28]
 8004f0e:	9307      	strlt	r3, [sp, #28]
 8004f10:	bfb8      	it	lt
 8004f12:	9204      	strlt	r2, [sp, #16]
 8004f14:	7823      	ldrb	r3, [r4, #0]
 8004f16:	2b2e      	cmp	r3, #46	; 0x2e
 8004f18:	d10c      	bne.n	8004f34 <_svfiprintf_r+0x130>
 8004f1a:	7863      	ldrb	r3, [r4, #1]
 8004f1c:	2b2a      	cmp	r3, #42	; 0x2a
 8004f1e:	d135      	bne.n	8004f8c <_svfiprintf_r+0x188>
 8004f20:	9b03      	ldr	r3, [sp, #12]
 8004f22:	3402      	adds	r4, #2
 8004f24:	1d1a      	adds	r2, r3, #4
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	9203      	str	r2, [sp, #12]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	bfb8      	it	lt
 8004f2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f32:	9305      	str	r3, [sp, #20]
 8004f34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005000 <_svfiprintf_r+0x1fc>
 8004f38:	2203      	movs	r2, #3
 8004f3a:	4650      	mov	r0, sl
 8004f3c:	7821      	ldrb	r1, [r4, #0]
 8004f3e:	f000 f9f7 	bl	8005330 <memchr>
 8004f42:	b140      	cbz	r0, 8004f56 <_svfiprintf_r+0x152>
 8004f44:	2340      	movs	r3, #64	; 0x40
 8004f46:	eba0 000a 	sub.w	r0, r0, sl
 8004f4a:	fa03 f000 	lsl.w	r0, r3, r0
 8004f4e:	9b04      	ldr	r3, [sp, #16]
 8004f50:	3401      	adds	r4, #1
 8004f52:	4303      	orrs	r3, r0
 8004f54:	9304      	str	r3, [sp, #16]
 8004f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f5a:	2206      	movs	r2, #6
 8004f5c:	4825      	ldr	r0, [pc, #148]	; (8004ff4 <_svfiprintf_r+0x1f0>)
 8004f5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f62:	f000 f9e5 	bl	8005330 <memchr>
 8004f66:	2800      	cmp	r0, #0
 8004f68:	d038      	beq.n	8004fdc <_svfiprintf_r+0x1d8>
 8004f6a:	4b23      	ldr	r3, [pc, #140]	; (8004ff8 <_svfiprintf_r+0x1f4>)
 8004f6c:	bb1b      	cbnz	r3, 8004fb6 <_svfiprintf_r+0x1b2>
 8004f6e:	9b03      	ldr	r3, [sp, #12]
 8004f70:	3307      	adds	r3, #7
 8004f72:	f023 0307 	bic.w	r3, r3, #7
 8004f76:	3308      	adds	r3, #8
 8004f78:	9303      	str	r3, [sp, #12]
 8004f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f7c:	4433      	add	r3, r6
 8004f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f80:	e767      	b.n	8004e52 <_svfiprintf_r+0x4e>
 8004f82:	460c      	mov	r4, r1
 8004f84:	2001      	movs	r0, #1
 8004f86:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f8a:	e7a5      	b.n	8004ed8 <_svfiprintf_r+0xd4>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f04f 0c0a 	mov.w	ip, #10
 8004f92:	4619      	mov	r1, r3
 8004f94:	3401      	adds	r4, #1
 8004f96:	9305      	str	r3, [sp, #20]
 8004f98:	4620      	mov	r0, r4
 8004f9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f9e:	3a30      	subs	r2, #48	; 0x30
 8004fa0:	2a09      	cmp	r2, #9
 8004fa2:	d903      	bls.n	8004fac <_svfiprintf_r+0x1a8>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0c5      	beq.n	8004f34 <_svfiprintf_r+0x130>
 8004fa8:	9105      	str	r1, [sp, #20]
 8004faa:	e7c3      	b.n	8004f34 <_svfiprintf_r+0x130>
 8004fac:	4604      	mov	r4, r0
 8004fae:	2301      	movs	r3, #1
 8004fb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fb4:	e7f0      	b.n	8004f98 <_svfiprintf_r+0x194>
 8004fb6:	ab03      	add	r3, sp, #12
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	462a      	mov	r2, r5
 8004fbc:	4638      	mov	r0, r7
 8004fbe:	4b0f      	ldr	r3, [pc, #60]	; (8004ffc <_svfiprintf_r+0x1f8>)
 8004fc0:	a904      	add	r1, sp, #16
 8004fc2:	f3af 8000 	nop.w
 8004fc6:	1c42      	adds	r2, r0, #1
 8004fc8:	4606      	mov	r6, r0
 8004fca:	d1d6      	bne.n	8004f7a <_svfiprintf_r+0x176>
 8004fcc:	89ab      	ldrh	r3, [r5, #12]
 8004fce:	065b      	lsls	r3, r3, #25
 8004fd0:	f53f af2c 	bmi.w	8004e2c <_svfiprintf_r+0x28>
 8004fd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fd6:	b01d      	add	sp, #116	; 0x74
 8004fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fdc:	ab03      	add	r3, sp, #12
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	462a      	mov	r2, r5
 8004fe2:	4638      	mov	r0, r7
 8004fe4:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <_svfiprintf_r+0x1f8>)
 8004fe6:	a904      	add	r1, sp, #16
 8004fe8:	f000 f87c 	bl	80050e4 <_printf_i>
 8004fec:	e7eb      	b.n	8004fc6 <_svfiprintf_r+0x1c2>
 8004fee:	bf00      	nop
 8004ff0:	080072a0 	.word	0x080072a0
 8004ff4:	080072aa 	.word	0x080072aa
 8004ff8:	00000000 	.word	0x00000000
 8004ffc:	08004d4d 	.word	0x08004d4d
 8005000:	080072a6 	.word	0x080072a6

08005004 <_printf_common>:
 8005004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005008:	4616      	mov	r6, r2
 800500a:	4699      	mov	r9, r3
 800500c:	688a      	ldr	r2, [r1, #8]
 800500e:	690b      	ldr	r3, [r1, #16]
 8005010:	4607      	mov	r7, r0
 8005012:	4293      	cmp	r3, r2
 8005014:	bfb8      	it	lt
 8005016:	4613      	movlt	r3, r2
 8005018:	6033      	str	r3, [r6, #0]
 800501a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800501e:	460c      	mov	r4, r1
 8005020:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005024:	b10a      	cbz	r2, 800502a <_printf_common+0x26>
 8005026:	3301      	adds	r3, #1
 8005028:	6033      	str	r3, [r6, #0]
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	0699      	lsls	r1, r3, #26
 800502e:	bf42      	ittt	mi
 8005030:	6833      	ldrmi	r3, [r6, #0]
 8005032:	3302      	addmi	r3, #2
 8005034:	6033      	strmi	r3, [r6, #0]
 8005036:	6825      	ldr	r5, [r4, #0]
 8005038:	f015 0506 	ands.w	r5, r5, #6
 800503c:	d106      	bne.n	800504c <_printf_common+0x48>
 800503e:	f104 0a19 	add.w	sl, r4, #25
 8005042:	68e3      	ldr	r3, [r4, #12]
 8005044:	6832      	ldr	r2, [r6, #0]
 8005046:	1a9b      	subs	r3, r3, r2
 8005048:	42ab      	cmp	r3, r5
 800504a:	dc28      	bgt.n	800509e <_printf_common+0x9a>
 800504c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005050:	1e13      	subs	r3, r2, #0
 8005052:	6822      	ldr	r2, [r4, #0]
 8005054:	bf18      	it	ne
 8005056:	2301      	movne	r3, #1
 8005058:	0692      	lsls	r2, r2, #26
 800505a:	d42d      	bmi.n	80050b8 <_printf_common+0xb4>
 800505c:	4649      	mov	r1, r9
 800505e:	4638      	mov	r0, r7
 8005060:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005064:	47c0      	blx	r8
 8005066:	3001      	adds	r0, #1
 8005068:	d020      	beq.n	80050ac <_printf_common+0xa8>
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	68e5      	ldr	r5, [r4, #12]
 800506e:	f003 0306 	and.w	r3, r3, #6
 8005072:	2b04      	cmp	r3, #4
 8005074:	bf18      	it	ne
 8005076:	2500      	movne	r5, #0
 8005078:	6832      	ldr	r2, [r6, #0]
 800507a:	f04f 0600 	mov.w	r6, #0
 800507e:	68a3      	ldr	r3, [r4, #8]
 8005080:	bf08      	it	eq
 8005082:	1aad      	subeq	r5, r5, r2
 8005084:	6922      	ldr	r2, [r4, #16]
 8005086:	bf08      	it	eq
 8005088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800508c:	4293      	cmp	r3, r2
 800508e:	bfc4      	itt	gt
 8005090:	1a9b      	subgt	r3, r3, r2
 8005092:	18ed      	addgt	r5, r5, r3
 8005094:	341a      	adds	r4, #26
 8005096:	42b5      	cmp	r5, r6
 8005098:	d11a      	bne.n	80050d0 <_printf_common+0xcc>
 800509a:	2000      	movs	r0, #0
 800509c:	e008      	b.n	80050b0 <_printf_common+0xac>
 800509e:	2301      	movs	r3, #1
 80050a0:	4652      	mov	r2, sl
 80050a2:	4649      	mov	r1, r9
 80050a4:	4638      	mov	r0, r7
 80050a6:	47c0      	blx	r8
 80050a8:	3001      	adds	r0, #1
 80050aa:	d103      	bne.n	80050b4 <_printf_common+0xb0>
 80050ac:	f04f 30ff 	mov.w	r0, #4294967295
 80050b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b4:	3501      	adds	r5, #1
 80050b6:	e7c4      	b.n	8005042 <_printf_common+0x3e>
 80050b8:	2030      	movs	r0, #48	; 0x30
 80050ba:	18e1      	adds	r1, r4, r3
 80050bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050c6:	4422      	add	r2, r4
 80050c8:	3302      	adds	r3, #2
 80050ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050ce:	e7c5      	b.n	800505c <_printf_common+0x58>
 80050d0:	2301      	movs	r3, #1
 80050d2:	4622      	mov	r2, r4
 80050d4:	4649      	mov	r1, r9
 80050d6:	4638      	mov	r0, r7
 80050d8:	47c0      	blx	r8
 80050da:	3001      	adds	r0, #1
 80050dc:	d0e6      	beq.n	80050ac <_printf_common+0xa8>
 80050de:	3601      	adds	r6, #1
 80050e0:	e7d9      	b.n	8005096 <_printf_common+0x92>
	...

080050e4 <_printf_i>:
 80050e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050e8:	460c      	mov	r4, r1
 80050ea:	7e27      	ldrb	r7, [r4, #24]
 80050ec:	4691      	mov	r9, r2
 80050ee:	2f78      	cmp	r7, #120	; 0x78
 80050f0:	4680      	mov	r8, r0
 80050f2:	469a      	mov	sl, r3
 80050f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80050f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050fa:	d807      	bhi.n	800510c <_printf_i+0x28>
 80050fc:	2f62      	cmp	r7, #98	; 0x62
 80050fe:	d80a      	bhi.n	8005116 <_printf_i+0x32>
 8005100:	2f00      	cmp	r7, #0
 8005102:	f000 80d9 	beq.w	80052b8 <_printf_i+0x1d4>
 8005106:	2f58      	cmp	r7, #88	; 0x58
 8005108:	f000 80a4 	beq.w	8005254 <_printf_i+0x170>
 800510c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005110:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005114:	e03a      	b.n	800518c <_printf_i+0xa8>
 8005116:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800511a:	2b15      	cmp	r3, #21
 800511c:	d8f6      	bhi.n	800510c <_printf_i+0x28>
 800511e:	a001      	add	r0, pc, #4	; (adr r0, 8005124 <_printf_i+0x40>)
 8005120:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005124:	0800517d 	.word	0x0800517d
 8005128:	08005191 	.word	0x08005191
 800512c:	0800510d 	.word	0x0800510d
 8005130:	0800510d 	.word	0x0800510d
 8005134:	0800510d 	.word	0x0800510d
 8005138:	0800510d 	.word	0x0800510d
 800513c:	08005191 	.word	0x08005191
 8005140:	0800510d 	.word	0x0800510d
 8005144:	0800510d 	.word	0x0800510d
 8005148:	0800510d 	.word	0x0800510d
 800514c:	0800510d 	.word	0x0800510d
 8005150:	0800529f 	.word	0x0800529f
 8005154:	080051c1 	.word	0x080051c1
 8005158:	08005281 	.word	0x08005281
 800515c:	0800510d 	.word	0x0800510d
 8005160:	0800510d 	.word	0x0800510d
 8005164:	080052c1 	.word	0x080052c1
 8005168:	0800510d 	.word	0x0800510d
 800516c:	080051c1 	.word	0x080051c1
 8005170:	0800510d 	.word	0x0800510d
 8005174:	0800510d 	.word	0x0800510d
 8005178:	08005289 	.word	0x08005289
 800517c:	680b      	ldr	r3, [r1, #0]
 800517e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005182:	1d1a      	adds	r2, r3, #4
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	600a      	str	r2, [r1, #0]
 8005188:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800518c:	2301      	movs	r3, #1
 800518e:	e0a4      	b.n	80052da <_printf_i+0x1f6>
 8005190:	6825      	ldr	r5, [r4, #0]
 8005192:	6808      	ldr	r0, [r1, #0]
 8005194:	062e      	lsls	r6, r5, #24
 8005196:	f100 0304 	add.w	r3, r0, #4
 800519a:	d50a      	bpl.n	80051b2 <_printf_i+0xce>
 800519c:	6805      	ldr	r5, [r0, #0]
 800519e:	600b      	str	r3, [r1, #0]
 80051a0:	2d00      	cmp	r5, #0
 80051a2:	da03      	bge.n	80051ac <_printf_i+0xc8>
 80051a4:	232d      	movs	r3, #45	; 0x2d
 80051a6:	426d      	negs	r5, r5
 80051a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ac:	230a      	movs	r3, #10
 80051ae:	485e      	ldr	r0, [pc, #376]	; (8005328 <_printf_i+0x244>)
 80051b0:	e019      	b.n	80051e6 <_printf_i+0x102>
 80051b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80051b6:	6805      	ldr	r5, [r0, #0]
 80051b8:	600b      	str	r3, [r1, #0]
 80051ba:	bf18      	it	ne
 80051bc:	b22d      	sxthne	r5, r5
 80051be:	e7ef      	b.n	80051a0 <_printf_i+0xbc>
 80051c0:	680b      	ldr	r3, [r1, #0]
 80051c2:	6825      	ldr	r5, [r4, #0]
 80051c4:	1d18      	adds	r0, r3, #4
 80051c6:	6008      	str	r0, [r1, #0]
 80051c8:	0628      	lsls	r0, r5, #24
 80051ca:	d501      	bpl.n	80051d0 <_printf_i+0xec>
 80051cc:	681d      	ldr	r5, [r3, #0]
 80051ce:	e002      	b.n	80051d6 <_printf_i+0xf2>
 80051d0:	0669      	lsls	r1, r5, #25
 80051d2:	d5fb      	bpl.n	80051cc <_printf_i+0xe8>
 80051d4:	881d      	ldrh	r5, [r3, #0]
 80051d6:	2f6f      	cmp	r7, #111	; 0x6f
 80051d8:	bf0c      	ite	eq
 80051da:	2308      	moveq	r3, #8
 80051dc:	230a      	movne	r3, #10
 80051de:	4852      	ldr	r0, [pc, #328]	; (8005328 <_printf_i+0x244>)
 80051e0:	2100      	movs	r1, #0
 80051e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051e6:	6866      	ldr	r6, [r4, #4]
 80051e8:	2e00      	cmp	r6, #0
 80051ea:	bfa8      	it	ge
 80051ec:	6821      	ldrge	r1, [r4, #0]
 80051ee:	60a6      	str	r6, [r4, #8]
 80051f0:	bfa4      	itt	ge
 80051f2:	f021 0104 	bicge.w	r1, r1, #4
 80051f6:	6021      	strge	r1, [r4, #0]
 80051f8:	b90d      	cbnz	r5, 80051fe <_printf_i+0x11a>
 80051fa:	2e00      	cmp	r6, #0
 80051fc:	d04d      	beq.n	800529a <_printf_i+0x1b6>
 80051fe:	4616      	mov	r6, r2
 8005200:	fbb5 f1f3 	udiv	r1, r5, r3
 8005204:	fb03 5711 	mls	r7, r3, r1, r5
 8005208:	5dc7      	ldrb	r7, [r0, r7]
 800520a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800520e:	462f      	mov	r7, r5
 8005210:	42bb      	cmp	r3, r7
 8005212:	460d      	mov	r5, r1
 8005214:	d9f4      	bls.n	8005200 <_printf_i+0x11c>
 8005216:	2b08      	cmp	r3, #8
 8005218:	d10b      	bne.n	8005232 <_printf_i+0x14e>
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	07df      	lsls	r7, r3, #31
 800521e:	d508      	bpl.n	8005232 <_printf_i+0x14e>
 8005220:	6923      	ldr	r3, [r4, #16]
 8005222:	6861      	ldr	r1, [r4, #4]
 8005224:	4299      	cmp	r1, r3
 8005226:	bfde      	ittt	le
 8005228:	2330      	movle	r3, #48	; 0x30
 800522a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800522e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005232:	1b92      	subs	r2, r2, r6
 8005234:	6122      	str	r2, [r4, #16]
 8005236:	464b      	mov	r3, r9
 8005238:	4621      	mov	r1, r4
 800523a:	4640      	mov	r0, r8
 800523c:	f8cd a000 	str.w	sl, [sp]
 8005240:	aa03      	add	r2, sp, #12
 8005242:	f7ff fedf 	bl	8005004 <_printf_common>
 8005246:	3001      	adds	r0, #1
 8005248:	d14c      	bne.n	80052e4 <_printf_i+0x200>
 800524a:	f04f 30ff 	mov.w	r0, #4294967295
 800524e:	b004      	add	sp, #16
 8005250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005254:	4834      	ldr	r0, [pc, #208]	; (8005328 <_printf_i+0x244>)
 8005256:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800525a:	680e      	ldr	r6, [r1, #0]
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005262:	061f      	lsls	r7, r3, #24
 8005264:	600e      	str	r6, [r1, #0]
 8005266:	d514      	bpl.n	8005292 <_printf_i+0x1ae>
 8005268:	07d9      	lsls	r1, r3, #31
 800526a:	bf44      	itt	mi
 800526c:	f043 0320 	orrmi.w	r3, r3, #32
 8005270:	6023      	strmi	r3, [r4, #0]
 8005272:	b91d      	cbnz	r5, 800527c <_printf_i+0x198>
 8005274:	6823      	ldr	r3, [r4, #0]
 8005276:	f023 0320 	bic.w	r3, r3, #32
 800527a:	6023      	str	r3, [r4, #0]
 800527c:	2310      	movs	r3, #16
 800527e:	e7af      	b.n	80051e0 <_printf_i+0xfc>
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	f043 0320 	orr.w	r3, r3, #32
 8005286:	6023      	str	r3, [r4, #0]
 8005288:	2378      	movs	r3, #120	; 0x78
 800528a:	4828      	ldr	r0, [pc, #160]	; (800532c <_printf_i+0x248>)
 800528c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005290:	e7e3      	b.n	800525a <_printf_i+0x176>
 8005292:	065e      	lsls	r6, r3, #25
 8005294:	bf48      	it	mi
 8005296:	b2ad      	uxthmi	r5, r5
 8005298:	e7e6      	b.n	8005268 <_printf_i+0x184>
 800529a:	4616      	mov	r6, r2
 800529c:	e7bb      	b.n	8005216 <_printf_i+0x132>
 800529e:	680b      	ldr	r3, [r1, #0]
 80052a0:	6826      	ldr	r6, [r4, #0]
 80052a2:	1d1d      	adds	r5, r3, #4
 80052a4:	6960      	ldr	r0, [r4, #20]
 80052a6:	600d      	str	r5, [r1, #0]
 80052a8:	0635      	lsls	r5, r6, #24
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	d501      	bpl.n	80052b2 <_printf_i+0x1ce>
 80052ae:	6018      	str	r0, [r3, #0]
 80052b0:	e002      	b.n	80052b8 <_printf_i+0x1d4>
 80052b2:	0671      	lsls	r1, r6, #25
 80052b4:	d5fb      	bpl.n	80052ae <_printf_i+0x1ca>
 80052b6:	8018      	strh	r0, [r3, #0]
 80052b8:	2300      	movs	r3, #0
 80052ba:	4616      	mov	r6, r2
 80052bc:	6123      	str	r3, [r4, #16]
 80052be:	e7ba      	b.n	8005236 <_printf_i+0x152>
 80052c0:	680b      	ldr	r3, [r1, #0]
 80052c2:	1d1a      	adds	r2, r3, #4
 80052c4:	600a      	str	r2, [r1, #0]
 80052c6:	681e      	ldr	r6, [r3, #0]
 80052c8:	2100      	movs	r1, #0
 80052ca:	4630      	mov	r0, r6
 80052cc:	6862      	ldr	r2, [r4, #4]
 80052ce:	f000 f82f 	bl	8005330 <memchr>
 80052d2:	b108      	cbz	r0, 80052d8 <_printf_i+0x1f4>
 80052d4:	1b80      	subs	r0, r0, r6
 80052d6:	6060      	str	r0, [r4, #4]
 80052d8:	6863      	ldr	r3, [r4, #4]
 80052da:	6123      	str	r3, [r4, #16]
 80052dc:	2300      	movs	r3, #0
 80052de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052e2:	e7a8      	b.n	8005236 <_printf_i+0x152>
 80052e4:	4632      	mov	r2, r6
 80052e6:	4649      	mov	r1, r9
 80052e8:	4640      	mov	r0, r8
 80052ea:	6923      	ldr	r3, [r4, #16]
 80052ec:	47d0      	blx	sl
 80052ee:	3001      	adds	r0, #1
 80052f0:	d0ab      	beq.n	800524a <_printf_i+0x166>
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	079b      	lsls	r3, r3, #30
 80052f6:	d413      	bmi.n	8005320 <_printf_i+0x23c>
 80052f8:	68e0      	ldr	r0, [r4, #12]
 80052fa:	9b03      	ldr	r3, [sp, #12]
 80052fc:	4298      	cmp	r0, r3
 80052fe:	bfb8      	it	lt
 8005300:	4618      	movlt	r0, r3
 8005302:	e7a4      	b.n	800524e <_printf_i+0x16a>
 8005304:	2301      	movs	r3, #1
 8005306:	4632      	mov	r2, r6
 8005308:	4649      	mov	r1, r9
 800530a:	4640      	mov	r0, r8
 800530c:	47d0      	blx	sl
 800530e:	3001      	adds	r0, #1
 8005310:	d09b      	beq.n	800524a <_printf_i+0x166>
 8005312:	3501      	adds	r5, #1
 8005314:	68e3      	ldr	r3, [r4, #12]
 8005316:	9903      	ldr	r1, [sp, #12]
 8005318:	1a5b      	subs	r3, r3, r1
 800531a:	42ab      	cmp	r3, r5
 800531c:	dcf2      	bgt.n	8005304 <_printf_i+0x220>
 800531e:	e7eb      	b.n	80052f8 <_printf_i+0x214>
 8005320:	2500      	movs	r5, #0
 8005322:	f104 0619 	add.w	r6, r4, #25
 8005326:	e7f5      	b.n	8005314 <_printf_i+0x230>
 8005328:	080072b1 	.word	0x080072b1
 800532c:	080072c2 	.word	0x080072c2

08005330 <memchr>:
 8005330:	4603      	mov	r3, r0
 8005332:	b510      	push	{r4, lr}
 8005334:	b2c9      	uxtb	r1, r1
 8005336:	4402      	add	r2, r0
 8005338:	4293      	cmp	r3, r2
 800533a:	4618      	mov	r0, r3
 800533c:	d101      	bne.n	8005342 <memchr+0x12>
 800533e:	2000      	movs	r0, #0
 8005340:	e003      	b.n	800534a <memchr+0x1a>
 8005342:	7804      	ldrb	r4, [r0, #0]
 8005344:	3301      	adds	r3, #1
 8005346:	428c      	cmp	r4, r1
 8005348:	d1f6      	bne.n	8005338 <memchr+0x8>
 800534a:	bd10      	pop	{r4, pc}

0800534c <memcpy>:
 800534c:	440a      	add	r2, r1
 800534e:	4291      	cmp	r1, r2
 8005350:	f100 33ff 	add.w	r3, r0, #4294967295
 8005354:	d100      	bne.n	8005358 <memcpy+0xc>
 8005356:	4770      	bx	lr
 8005358:	b510      	push	{r4, lr}
 800535a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800535e:	4291      	cmp	r1, r2
 8005360:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005364:	d1f9      	bne.n	800535a <memcpy+0xe>
 8005366:	bd10      	pop	{r4, pc}

08005368 <memmove>:
 8005368:	4288      	cmp	r0, r1
 800536a:	b510      	push	{r4, lr}
 800536c:	eb01 0402 	add.w	r4, r1, r2
 8005370:	d902      	bls.n	8005378 <memmove+0x10>
 8005372:	4284      	cmp	r4, r0
 8005374:	4623      	mov	r3, r4
 8005376:	d807      	bhi.n	8005388 <memmove+0x20>
 8005378:	1e43      	subs	r3, r0, #1
 800537a:	42a1      	cmp	r1, r4
 800537c:	d008      	beq.n	8005390 <memmove+0x28>
 800537e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005382:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005386:	e7f8      	b.n	800537a <memmove+0x12>
 8005388:	4601      	mov	r1, r0
 800538a:	4402      	add	r2, r0
 800538c:	428a      	cmp	r2, r1
 800538e:	d100      	bne.n	8005392 <memmove+0x2a>
 8005390:	bd10      	pop	{r4, pc}
 8005392:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005396:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800539a:	e7f7      	b.n	800538c <memmove+0x24>

0800539c <_free_r>:
 800539c:	b538      	push	{r3, r4, r5, lr}
 800539e:	4605      	mov	r5, r0
 80053a0:	2900      	cmp	r1, #0
 80053a2:	d043      	beq.n	800542c <_free_r+0x90>
 80053a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053a8:	1f0c      	subs	r4, r1, #4
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	bfb8      	it	lt
 80053ae:	18e4      	addlt	r4, r4, r3
 80053b0:	f000 f8d0 	bl	8005554 <__malloc_lock>
 80053b4:	4a1e      	ldr	r2, [pc, #120]	; (8005430 <_free_r+0x94>)
 80053b6:	6813      	ldr	r3, [r2, #0]
 80053b8:	4610      	mov	r0, r2
 80053ba:	b933      	cbnz	r3, 80053ca <_free_r+0x2e>
 80053bc:	6063      	str	r3, [r4, #4]
 80053be:	6014      	str	r4, [r2, #0]
 80053c0:	4628      	mov	r0, r5
 80053c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053c6:	f000 b8cb 	b.w	8005560 <__malloc_unlock>
 80053ca:	42a3      	cmp	r3, r4
 80053cc:	d90a      	bls.n	80053e4 <_free_r+0x48>
 80053ce:	6821      	ldr	r1, [r4, #0]
 80053d0:	1862      	adds	r2, r4, r1
 80053d2:	4293      	cmp	r3, r2
 80053d4:	bf01      	itttt	eq
 80053d6:	681a      	ldreq	r2, [r3, #0]
 80053d8:	685b      	ldreq	r3, [r3, #4]
 80053da:	1852      	addeq	r2, r2, r1
 80053dc:	6022      	streq	r2, [r4, #0]
 80053de:	6063      	str	r3, [r4, #4]
 80053e0:	6004      	str	r4, [r0, #0]
 80053e2:	e7ed      	b.n	80053c0 <_free_r+0x24>
 80053e4:	461a      	mov	r2, r3
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	b10b      	cbz	r3, 80053ee <_free_r+0x52>
 80053ea:	42a3      	cmp	r3, r4
 80053ec:	d9fa      	bls.n	80053e4 <_free_r+0x48>
 80053ee:	6811      	ldr	r1, [r2, #0]
 80053f0:	1850      	adds	r0, r2, r1
 80053f2:	42a0      	cmp	r0, r4
 80053f4:	d10b      	bne.n	800540e <_free_r+0x72>
 80053f6:	6820      	ldr	r0, [r4, #0]
 80053f8:	4401      	add	r1, r0
 80053fa:	1850      	adds	r0, r2, r1
 80053fc:	4283      	cmp	r3, r0
 80053fe:	6011      	str	r1, [r2, #0]
 8005400:	d1de      	bne.n	80053c0 <_free_r+0x24>
 8005402:	6818      	ldr	r0, [r3, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	4401      	add	r1, r0
 8005408:	6011      	str	r1, [r2, #0]
 800540a:	6053      	str	r3, [r2, #4]
 800540c:	e7d8      	b.n	80053c0 <_free_r+0x24>
 800540e:	d902      	bls.n	8005416 <_free_r+0x7a>
 8005410:	230c      	movs	r3, #12
 8005412:	602b      	str	r3, [r5, #0]
 8005414:	e7d4      	b.n	80053c0 <_free_r+0x24>
 8005416:	6820      	ldr	r0, [r4, #0]
 8005418:	1821      	adds	r1, r4, r0
 800541a:	428b      	cmp	r3, r1
 800541c:	bf01      	itttt	eq
 800541e:	6819      	ldreq	r1, [r3, #0]
 8005420:	685b      	ldreq	r3, [r3, #4]
 8005422:	1809      	addeq	r1, r1, r0
 8005424:	6021      	streq	r1, [r4, #0]
 8005426:	6063      	str	r3, [r4, #4]
 8005428:	6054      	str	r4, [r2, #4]
 800542a:	e7c9      	b.n	80053c0 <_free_r+0x24>
 800542c:	bd38      	pop	{r3, r4, r5, pc}
 800542e:	bf00      	nop
 8005430:	200000b0 	.word	0x200000b0

08005434 <_malloc_r>:
 8005434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005436:	1ccd      	adds	r5, r1, #3
 8005438:	f025 0503 	bic.w	r5, r5, #3
 800543c:	3508      	adds	r5, #8
 800543e:	2d0c      	cmp	r5, #12
 8005440:	bf38      	it	cc
 8005442:	250c      	movcc	r5, #12
 8005444:	2d00      	cmp	r5, #0
 8005446:	4606      	mov	r6, r0
 8005448:	db01      	blt.n	800544e <_malloc_r+0x1a>
 800544a:	42a9      	cmp	r1, r5
 800544c:	d903      	bls.n	8005456 <_malloc_r+0x22>
 800544e:	230c      	movs	r3, #12
 8005450:	6033      	str	r3, [r6, #0]
 8005452:	2000      	movs	r0, #0
 8005454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005456:	f000 f87d 	bl	8005554 <__malloc_lock>
 800545a:	4921      	ldr	r1, [pc, #132]	; (80054e0 <_malloc_r+0xac>)
 800545c:	680a      	ldr	r2, [r1, #0]
 800545e:	4614      	mov	r4, r2
 8005460:	b99c      	cbnz	r4, 800548a <_malloc_r+0x56>
 8005462:	4f20      	ldr	r7, [pc, #128]	; (80054e4 <_malloc_r+0xb0>)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	b923      	cbnz	r3, 8005472 <_malloc_r+0x3e>
 8005468:	4621      	mov	r1, r4
 800546a:	4630      	mov	r0, r6
 800546c:	f000 f862 	bl	8005534 <_sbrk_r>
 8005470:	6038      	str	r0, [r7, #0]
 8005472:	4629      	mov	r1, r5
 8005474:	4630      	mov	r0, r6
 8005476:	f000 f85d 	bl	8005534 <_sbrk_r>
 800547a:	1c43      	adds	r3, r0, #1
 800547c:	d123      	bne.n	80054c6 <_malloc_r+0x92>
 800547e:	230c      	movs	r3, #12
 8005480:	4630      	mov	r0, r6
 8005482:	6033      	str	r3, [r6, #0]
 8005484:	f000 f86c 	bl	8005560 <__malloc_unlock>
 8005488:	e7e3      	b.n	8005452 <_malloc_r+0x1e>
 800548a:	6823      	ldr	r3, [r4, #0]
 800548c:	1b5b      	subs	r3, r3, r5
 800548e:	d417      	bmi.n	80054c0 <_malloc_r+0x8c>
 8005490:	2b0b      	cmp	r3, #11
 8005492:	d903      	bls.n	800549c <_malloc_r+0x68>
 8005494:	6023      	str	r3, [r4, #0]
 8005496:	441c      	add	r4, r3
 8005498:	6025      	str	r5, [r4, #0]
 800549a:	e004      	b.n	80054a6 <_malloc_r+0x72>
 800549c:	6863      	ldr	r3, [r4, #4]
 800549e:	42a2      	cmp	r2, r4
 80054a0:	bf0c      	ite	eq
 80054a2:	600b      	streq	r3, [r1, #0]
 80054a4:	6053      	strne	r3, [r2, #4]
 80054a6:	4630      	mov	r0, r6
 80054a8:	f000 f85a 	bl	8005560 <__malloc_unlock>
 80054ac:	f104 000b 	add.w	r0, r4, #11
 80054b0:	1d23      	adds	r3, r4, #4
 80054b2:	f020 0007 	bic.w	r0, r0, #7
 80054b6:	1ac2      	subs	r2, r0, r3
 80054b8:	d0cc      	beq.n	8005454 <_malloc_r+0x20>
 80054ba:	1a1b      	subs	r3, r3, r0
 80054bc:	50a3      	str	r3, [r4, r2]
 80054be:	e7c9      	b.n	8005454 <_malloc_r+0x20>
 80054c0:	4622      	mov	r2, r4
 80054c2:	6864      	ldr	r4, [r4, #4]
 80054c4:	e7cc      	b.n	8005460 <_malloc_r+0x2c>
 80054c6:	1cc4      	adds	r4, r0, #3
 80054c8:	f024 0403 	bic.w	r4, r4, #3
 80054cc:	42a0      	cmp	r0, r4
 80054ce:	d0e3      	beq.n	8005498 <_malloc_r+0x64>
 80054d0:	1a21      	subs	r1, r4, r0
 80054d2:	4630      	mov	r0, r6
 80054d4:	f000 f82e 	bl	8005534 <_sbrk_r>
 80054d8:	3001      	adds	r0, #1
 80054da:	d1dd      	bne.n	8005498 <_malloc_r+0x64>
 80054dc:	e7cf      	b.n	800547e <_malloc_r+0x4a>
 80054de:	bf00      	nop
 80054e0:	200000b0 	.word	0x200000b0
 80054e4:	200000b4 	.word	0x200000b4

080054e8 <_realloc_r>:
 80054e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ea:	4607      	mov	r7, r0
 80054ec:	4614      	mov	r4, r2
 80054ee:	460e      	mov	r6, r1
 80054f0:	b921      	cbnz	r1, 80054fc <_realloc_r+0x14>
 80054f2:	4611      	mov	r1, r2
 80054f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80054f8:	f7ff bf9c 	b.w	8005434 <_malloc_r>
 80054fc:	b922      	cbnz	r2, 8005508 <_realloc_r+0x20>
 80054fe:	f7ff ff4d 	bl	800539c <_free_r>
 8005502:	4625      	mov	r5, r4
 8005504:	4628      	mov	r0, r5
 8005506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005508:	f000 f830 	bl	800556c <_malloc_usable_size_r>
 800550c:	42a0      	cmp	r0, r4
 800550e:	d20f      	bcs.n	8005530 <_realloc_r+0x48>
 8005510:	4621      	mov	r1, r4
 8005512:	4638      	mov	r0, r7
 8005514:	f7ff ff8e 	bl	8005434 <_malloc_r>
 8005518:	4605      	mov	r5, r0
 800551a:	2800      	cmp	r0, #0
 800551c:	d0f2      	beq.n	8005504 <_realloc_r+0x1c>
 800551e:	4631      	mov	r1, r6
 8005520:	4622      	mov	r2, r4
 8005522:	f7ff ff13 	bl	800534c <memcpy>
 8005526:	4631      	mov	r1, r6
 8005528:	4638      	mov	r0, r7
 800552a:	f7ff ff37 	bl	800539c <_free_r>
 800552e:	e7e9      	b.n	8005504 <_realloc_r+0x1c>
 8005530:	4635      	mov	r5, r6
 8005532:	e7e7      	b.n	8005504 <_realloc_r+0x1c>

08005534 <_sbrk_r>:
 8005534:	b538      	push	{r3, r4, r5, lr}
 8005536:	2300      	movs	r3, #0
 8005538:	4d05      	ldr	r5, [pc, #20]	; (8005550 <_sbrk_r+0x1c>)
 800553a:	4604      	mov	r4, r0
 800553c:	4608      	mov	r0, r1
 800553e:	602b      	str	r3, [r5, #0]
 8005540:	f7fc f910 	bl	8001764 <_sbrk>
 8005544:	1c43      	adds	r3, r0, #1
 8005546:	d102      	bne.n	800554e <_sbrk_r+0x1a>
 8005548:	682b      	ldr	r3, [r5, #0]
 800554a:	b103      	cbz	r3, 800554e <_sbrk_r+0x1a>
 800554c:	6023      	str	r3, [r4, #0]
 800554e:	bd38      	pop	{r3, r4, r5, pc}
 8005550:	20000324 	.word	0x20000324

08005554 <__malloc_lock>:
 8005554:	4801      	ldr	r0, [pc, #4]	; (800555c <__malloc_lock+0x8>)
 8005556:	f000 b811 	b.w	800557c <__retarget_lock_acquire_recursive>
 800555a:	bf00      	nop
 800555c:	2000032c 	.word	0x2000032c

08005560 <__malloc_unlock>:
 8005560:	4801      	ldr	r0, [pc, #4]	; (8005568 <__malloc_unlock+0x8>)
 8005562:	f000 b80c 	b.w	800557e <__retarget_lock_release_recursive>
 8005566:	bf00      	nop
 8005568:	2000032c 	.word	0x2000032c

0800556c <_malloc_usable_size_r>:
 800556c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005570:	1f18      	subs	r0, r3, #4
 8005572:	2b00      	cmp	r3, #0
 8005574:	bfbc      	itt	lt
 8005576:	580b      	ldrlt	r3, [r1, r0]
 8005578:	18c0      	addlt	r0, r0, r3
 800557a:	4770      	bx	lr

0800557c <__retarget_lock_acquire_recursive>:
 800557c:	4770      	bx	lr

0800557e <__retarget_lock_release_recursive>:
 800557e:	4770      	bx	lr

08005580 <tan>:
 8005580:	b530      	push	{r4, r5, lr}
 8005582:	4a12      	ldr	r2, [pc, #72]	; (80055cc <tan+0x4c>)
 8005584:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005588:	4293      	cmp	r3, r2
 800558a:	b087      	sub	sp, #28
 800558c:	dc06      	bgt.n	800559c <tan+0x1c>
 800558e:	2301      	movs	r3, #1
 8005590:	2200      	movs	r2, #0
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	2300      	movs	r3, #0
 8005596:	f000 ff17 	bl	80063c8 <__kernel_tan>
 800559a:	e006      	b.n	80055aa <tan+0x2a>
 800559c:	4a0c      	ldr	r2, [pc, #48]	; (80055d0 <tan+0x50>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	dd05      	ble.n	80055ae <tan+0x2e>
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	f7fa fddf 	bl	8000168 <__aeabi_dsub>
 80055aa:	b007      	add	sp, #28
 80055ac:	bd30      	pop	{r4, r5, pc}
 80055ae:	aa02      	add	r2, sp, #8
 80055b0:	f000 f872 	bl	8005698 <__ieee754_rem_pio2>
 80055b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055b8:	0040      	lsls	r0, r0, #1
 80055ba:	f000 0002 	and.w	r0, r0, #2
 80055be:	f1c0 0001 	rsb	r0, r0, #1
 80055c2:	9000      	str	r0, [sp, #0]
 80055c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055c8:	e7e5      	b.n	8005596 <tan+0x16>
 80055ca:	bf00      	nop
 80055cc:	3fe921fb 	.word	0x3fe921fb
 80055d0:	7fefffff 	.word	0x7fefffff

080055d4 <fmaxf>:
 80055d4:	b538      	push	{r3, r4, r5, lr}
 80055d6:	4604      	mov	r4, r0
 80055d8:	460d      	mov	r5, r1
 80055da:	f000 f80d 	bl	80055f8 <__fpclassifyf>
 80055de:	b140      	cbz	r0, 80055f2 <fmaxf+0x1e>
 80055e0:	4628      	mov	r0, r5
 80055e2:	f000 f809 	bl	80055f8 <__fpclassifyf>
 80055e6:	b128      	cbz	r0, 80055f4 <fmaxf+0x20>
 80055e8:	4629      	mov	r1, r5
 80055ea:	4620      	mov	r0, r4
 80055ec:	f7fb fd50 	bl	8001090 <__aeabi_fcmpgt>
 80055f0:	b900      	cbnz	r0, 80055f4 <fmaxf+0x20>
 80055f2:	462c      	mov	r4, r5
 80055f4:	4620      	mov	r0, r4
 80055f6:	bd38      	pop	{r3, r4, r5, pc}

080055f8 <__fpclassifyf>:
 80055f8:	f030 4000 	bics.w	r0, r0, #2147483648	; 0x80000000
 80055fc:	d00d      	beq.n	800561a <__fpclassifyf+0x22>
 80055fe:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8005602:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8005606:	d30a      	bcc.n	800561e <__fpclassifyf+0x26>
 8005608:	4b07      	ldr	r3, [pc, #28]	; (8005628 <__fpclassifyf+0x30>)
 800560a:	1e42      	subs	r2, r0, #1
 800560c:	429a      	cmp	r2, r3
 800560e:	d908      	bls.n	8005622 <__fpclassifyf+0x2a>
 8005610:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8005614:	4258      	negs	r0, r3
 8005616:	4158      	adcs	r0, r3
 8005618:	4770      	bx	lr
 800561a:	2002      	movs	r0, #2
 800561c:	4770      	bx	lr
 800561e:	2004      	movs	r0, #4
 8005620:	4770      	bx	lr
 8005622:	2003      	movs	r0, #3
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	007ffffe 	.word	0x007ffffe

0800562c <sinf>:
 800562c:	b507      	push	{r0, r1, r2, lr}
 800562e:	4a19      	ldr	r2, [pc, #100]	; (8005694 <sinf+0x68>)
 8005630:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8005634:	4293      	cmp	r3, r2
 8005636:	4601      	mov	r1, r0
 8005638:	dc04      	bgt.n	8005644 <sinf+0x18>
 800563a:	2200      	movs	r2, #0
 800563c:	2100      	movs	r1, #0
 800563e:	f001 fbbd 	bl	8006dbc <__kernel_sinf>
 8005642:	e004      	b.n	800564e <sinf+0x22>
 8005644:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005648:	db04      	blt.n	8005654 <sinf+0x28>
 800564a:	f7fb fa5b 	bl	8000b04 <__aeabi_fsub>
 800564e:	b003      	add	sp, #12
 8005650:	f85d fb04 	ldr.w	pc, [sp], #4
 8005654:	4669      	mov	r1, sp
 8005656:	f000 fa0f 	bl	8005a78 <__ieee754_rem_pio2f>
 800565a:	f000 0003 	and.w	r0, r0, #3
 800565e:	2801      	cmp	r0, #1
 8005660:	d006      	beq.n	8005670 <sinf+0x44>
 8005662:	2802      	cmp	r0, #2
 8005664:	d009      	beq.n	800567a <sinf+0x4e>
 8005666:	b980      	cbnz	r0, 800568a <sinf+0x5e>
 8005668:	2201      	movs	r2, #1
 800566a:	9901      	ldr	r1, [sp, #4]
 800566c:	9800      	ldr	r0, [sp, #0]
 800566e:	e7e6      	b.n	800563e <sinf+0x12>
 8005670:	9901      	ldr	r1, [sp, #4]
 8005672:	9800      	ldr	r0, [sp, #0]
 8005674:	f001 f86c 	bl	8006750 <__kernel_cosf>
 8005678:	e7e9      	b.n	800564e <sinf+0x22>
 800567a:	2201      	movs	r2, #1
 800567c:	9901      	ldr	r1, [sp, #4]
 800567e:	9800      	ldr	r0, [sp, #0]
 8005680:	f001 fb9c 	bl	8006dbc <__kernel_sinf>
 8005684:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005688:	e7e1      	b.n	800564e <sinf+0x22>
 800568a:	9901      	ldr	r1, [sp, #4]
 800568c:	9800      	ldr	r0, [sp, #0]
 800568e:	f001 f85f 	bl	8006750 <__kernel_cosf>
 8005692:	e7f7      	b.n	8005684 <sinf+0x58>
 8005694:	3f490fd8 	.word	0x3f490fd8

08005698 <__ieee754_rem_pio2>:
 8005698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800569c:	4614      	mov	r4, r2
 800569e:	4ac4      	ldr	r2, [pc, #784]	; (80059b0 <__ieee754_rem_pio2+0x318>)
 80056a0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80056a4:	b08d      	sub	sp, #52	; 0x34
 80056a6:	4592      	cmp	sl, r2
 80056a8:	9104      	str	r1, [sp, #16]
 80056aa:	dc07      	bgt.n	80056bc <__ieee754_rem_pio2+0x24>
 80056ac:	2200      	movs	r2, #0
 80056ae:	2300      	movs	r3, #0
 80056b0:	e9c4 0100 	strd	r0, r1, [r4]
 80056b4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80056b8:	2500      	movs	r5, #0
 80056ba:	e024      	b.n	8005706 <__ieee754_rem_pio2+0x6e>
 80056bc:	4abd      	ldr	r2, [pc, #756]	; (80059b4 <__ieee754_rem_pio2+0x31c>)
 80056be:	4592      	cmp	sl, r2
 80056c0:	dc72      	bgt.n	80057a8 <__ieee754_rem_pio2+0x110>
 80056c2:	9b04      	ldr	r3, [sp, #16]
 80056c4:	4dbc      	ldr	r5, [pc, #752]	; (80059b8 <__ieee754_rem_pio2+0x320>)
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	a3ab      	add	r3, pc, #684	; (adr r3, 8005978 <__ieee754_rem_pio2+0x2e0>)
 80056ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ce:	dd36      	ble.n	800573e <__ieee754_rem_pio2+0xa6>
 80056d0:	f7fa fd4a 	bl	8000168 <__aeabi_dsub>
 80056d4:	45aa      	cmp	sl, r5
 80056d6:	4606      	mov	r6, r0
 80056d8:	460f      	mov	r7, r1
 80056da:	d018      	beq.n	800570e <__ieee754_rem_pio2+0x76>
 80056dc:	a3a8      	add	r3, pc, #672	; (adr r3, 8005980 <__ieee754_rem_pio2+0x2e8>)
 80056de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e2:	f7fa fd41 	bl	8000168 <__aeabi_dsub>
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	4630      	mov	r0, r6
 80056ec:	e9c4 2300 	strd	r2, r3, [r4]
 80056f0:	4639      	mov	r1, r7
 80056f2:	f7fa fd39 	bl	8000168 <__aeabi_dsub>
 80056f6:	a3a2      	add	r3, pc, #648	; (adr r3, 8005980 <__ieee754_rem_pio2+0x2e8>)
 80056f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fc:	f7fa fd34 	bl	8000168 <__aeabi_dsub>
 8005700:	2501      	movs	r5, #1
 8005702:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005706:	4628      	mov	r0, r5
 8005708:	b00d      	add	sp, #52	; 0x34
 800570a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800570e:	a39e      	add	r3, pc, #632	; (adr r3, 8005988 <__ieee754_rem_pio2+0x2f0>)
 8005710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005714:	f7fa fd28 	bl	8000168 <__aeabi_dsub>
 8005718:	a39d      	add	r3, pc, #628	; (adr r3, 8005990 <__ieee754_rem_pio2+0x2f8>)
 800571a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571e:	4606      	mov	r6, r0
 8005720:	460f      	mov	r7, r1
 8005722:	f7fa fd21 	bl	8000168 <__aeabi_dsub>
 8005726:	4602      	mov	r2, r0
 8005728:	460b      	mov	r3, r1
 800572a:	4630      	mov	r0, r6
 800572c:	e9c4 2300 	strd	r2, r3, [r4]
 8005730:	4639      	mov	r1, r7
 8005732:	f7fa fd19 	bl	8000168 <__aeabi_dsub>
 8005736:	a396      	add	r3, pc, #600	; (adr r3, 8005990 <__ieee754_rem_pio2+0x2f8>)
 8005738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573c:	e7de      	b.n	80056fc <__ieee754_rem_pio2+0x64>
 800573e:	f7fa fd15 	bl	800016c <__adddf3>
 8005742:	45aa      	cmp	sl, r5
 8005744:	4606      	mov	r6, r0
 8005746:	460f      	mov	r7, r1
 8005748:	d016      	beq.n	8005778 <__ieee754_rem_pio2+0xe0>
 800574a:	a38d      	add	r3, pc, #564	; (adr r3, 8005980 <__ieee754_rem_pio2+0x2e8>)
 800574c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005750:	f7fa fd0c 	bl	800016c <__adddf3>
 8005754:	4602      	mov	r2, r0
 8005756:	460b      	mov	r3, r1
 8005758:	4630      	mov	r0, r6
 800575a:	e9c4 2300 	strd	r2, r3, [r4]
 800575e:	4639      	mov	r1, r7
 8005760:	f7fa fd02 	bl	8000168 <__aeabi_dsub>
 8005764:	a386      	add	r3, pc, #536	; (adr r3, 8005980 <__ieee754_rem_pio2+0x2e8>)
 8005766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576a:	f7fa fcff 	bl	800016c <__adddf3>
 800576e:	f04f 35ff 	mov.w	r5, #4294967295
 8005772:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005776:	e7c6      	b.n	8005706 <__ieee754_rem_pio2+0x6e>
 8005778:	a383      	add	r3, pc, #524	; (adr r3, 8005988 <__ieee754_rem_pio2+0x2f0>)
 800577a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577e:	f7fa fcf5 	bl	800016c <__adddf3>
 8005782:	a383      	add	r3, pc, #524	; (adr r3, 8005990 <__ieee754_rem_pio2+0x2f8>)
 8005784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005788:	4606      	mov	r6, r0
 800578a:	460f      	mov	r7, r1
 800578c:	f7fa fcee 	bl	800016c <__adddf3>
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	4630      	mov	r0, r6
 8005796:	e9c4 2300 	strd	r2, r3, [r4]
 800579a:	4639      	mov	r1, r7
 800579c:	f7fa fce4 	bl	8000168 <__aeabi_dsub>
 80057a0:	a37b      	add	r3, pc, #492	; (adr r3, 8005990 <__ieee754_rem_pio2+0x2f8>)
 80057a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a6:	e7e0      	b.n	800576a <__ieee754_rem_pio2+0xd2>
 80057a8:	4a84      	ldr	r2, [pc, #528]	; (80059bc <__ieee754_rem_pio2+0x324>)
 80057aa:	4592      	cmp	sl, r2
 80057ac:	f300 80d5 	bgt.w	800595a <__ieee754_rem_pio2+0x2c2>
 80057b0:	f001 fb7a 	bl	8006ea8 <fabs>
 80057b4:	a378      	add	r3, pc, #480	; (adr r3, 8005998 <__ieee754_rem_pio2+0x300>)
 80057b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ba:	4606      	mov	r6, r0
 80057bc:	460f      	mov	r7, r1
 80057be:	f7fa fe8b 	bl	80004d8 <__aeabi_dmul>
 80057c2:	2200      	movs	r2, #0
 80057c4:	4b7e      	ldr	r3, [pc, #504]	; (80059c0 <__ieee754_rem_pio2+0x328>)
 80057c6:	f7fa fcd1 	bl	800016c <__adddf3>
 80057ca:	f7fb f91f 	bl	8000a0c <__aeabi_d2iz>
 80057ce:	4605      	mov	r5, r0
 80057d0:	f7fa fe18 	bl	8000404 <__aeabi_i2d>
 80057d4:	4602      	mov	r2, r0
 80057d6:	460b      	mov	r3, r1
 80057d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80057dc:	a366      	add	r3, pc, #408	; (adr r3, 8005978 <__ieee754_rem_pio2+0x2e0>)
 80057de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e2:	f7fa fe79 	bl	80004d8 <__aeabi_dmul>
 80057e6:	4602      	mov	r2, r0
 80057e8:	460b      	mov	r3, r1
 80057ea:	4630      	mov	r0, r6
 80057ec:	4639      	mov	r1, r7
 80057ee:	f7fa fcbb 	bl	8000168 <__aeabi_dsub>
 80057f2:	a363      	add	r3, pc, #396	; (adr r3, 8005980 <__ieee754_rem_pio2+0x2e8>)
 80057f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f8:	4680      	mov	r8, r0
 80057fa:	4689      	mov	r9, r1
 80057fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005800:	f7fa fe6a 	bl	80004d8 <__aeabi_dmul>
 8005804:	2d1f      	cmp	r5, #31
 8005806:	4606      	mov	r6, r0
 8005808:	460f      	mov	r7, r1
 800580a:	dc0e      	bgt.n	800582a <__ieee754_rem_pio2+0x192>
 800580c:	4b6d      	ldr	r3, [pc, #436]	; (80059c4 <__ieee754_rem_pio2+0x32c>)
 800580e:	1e6a      	subs	r2, r5, #1
 8005810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005814:	4553      	cmp	r3, sl
 8005816:	d008      	beq.n	800582a <__ieee754_rem_pio2+0x192>
 8005818:	4632      	mov	r2, r6
 800581a:	463b      	mov	r3, r7
 800581c:	4640      	mov	r0, r8
 800581e:	4649      	mov	r1, r9
 8005820:	f7fa fca2 	bl	8000168 <__aeabi_dsub>
 8005824:	e9c4 0100 	strd	r0, r1, [r4]
 8005828:	e013      	b.n	8005852 <__ieee754_rem_pio2+0x1ba>
 800582a:	463b      	mov	r3, r7
 800582c:	4632      	mov	r2, r6
 800582e:	4640      	mov	r0, r8
 8005830:	4649      	mov	r1, r9
 8005832:	f7fa fc99 	bl	8000168 <__aeabi_dsub>
 8005836:	ea4f 532a 	mov.w	r3, sl, asr #20
 800583a:	9305      	str	r3, [sp, #20]
 800583c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005840:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8005844:	f1ba 0f10 	cmp.w	sl, #16
 8005848:	dc1f      	bgt.n	800588a <__ieee754_rem_pio2+0x1f2>
 800584a:	4602      	mov	r2, r0
 800584c:	460b      	mov	r3, r1
 800584e:	e9c4 2300 	strd	r2, r3, [r4]
 8005852:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8005856:	4640      	mov	r0, r8
 8005858:	4653      	mov	r3, sl
 800585a:	4649      	mov	r1, r9
 800585c:	f7fa fc84 	bl	8000168 <__aeabi_dsub>
 8005860:	4632      	mov	r2, r6
 8005862:	463b      	mov	r3, r7
 8005864:	f7fa fc80 	bl	8000168 <__aeabi_dsub>
 8005868:	460b      	mov	r3, r1
 800586a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800586e:	9904      	ldr	r1, [sp, #16]
 8005870:	4602      	mov	r2, r0
 8005872:	2900      	cmp	r1, #0
 8005874:	f6bf af47 	bge.w	8005706 <__ieee754_rem_pio2+0x6e>
 8005878:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800587c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8005880:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005884:	60e3      	str	r3, [r4, #12]
 8005886:	426d      	negs	r5, r5
 8005888:	e73d      	b.n	8005706 <__ieee754_rem_pio2+0x6e>
 800588a:	a33f      	add	r3, pc, #252	; (adr r3, 8005988 <__ieee754_rem_pio2+0x2f0>)
 800588c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005890:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005894:	f7fa fe20 	bl	80004d8 <__aeabi_dmul>
 8005898:	4606      	mov	r6, r0
 800589a:	460f      	mov	r7, r1
 800589c:	4602      	mov	r2, r0
 800589e:	460b      	mov	r3, r1
 80058a0:	4640      	mov	r0, r8
 80058a2:	4649      	mov	r1, r9
 80058a4:	f7fa fc60 	bl	8000168 <__aeabi_dsub>
 80058a8:	4602      	mov	r2, r0
 80058aa:	460b      	mov	r3, r1
 80058ac:	4682      	mov	sl, r0
 80058ae:	468b      	mov	fp, r1
 80058b0:	4640      	mov	r0, r8
 80058b2:	4649      	mov	r1, r9
 80058b4:	f7fa fc58 	bl	8000168 <__aeabi_dsub>
 80058b8:	4632      	mov	r2, r6
 80058ba:	463b      	mov	r3, r7
 80058bc:	f7fa fc54 	bl	8000168 <__aeabi_dsub>
 80058c0:	a333      	add	r3, pc, #204	; (adr r3, 8005990 <__ieee754_rem_pio2+0x2f8>)
 80058c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c6:	4606      	mov	r6, r0
 80058c8:	460f      	mov	r7, r1
 80058ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058ce:	f7fa fe03 	bl	80004d8 <__aeabi_dmul>
 80058d2:	4632      	mov	r2, r6
 80058d4:	463b      	mov	r3, r7
 80058d6:	f7fa fc47 	bl	8000168 <__aeabi_dsub>
 80058da:	4602      	mov	r2, r0
 80058dc:	460b      	mov	r3, r1
 80058de:	4606      	mov	r6, r0
 80058e0:	460f      	mov	r7, r1
 80058e2:	4650      	mov	r0, sl
 80058e4:	4659      	mov	r1, fp
 80058e6:	f7fa fc3f 	bl	8000168 <__aeabi_dsub>
 80058ea:	9a05      	ldr	r2, [sp, #20]
 80058ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b31      	cmp	r3, #49	; 0x31
 80058f4:	dc06      	bgt.n	8005904 <__ieee754_rem_pio2+0x26c>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	46d0      	mov	r8, sl
 80058fc:	46d9      	mov	r9, fp
 80058fe:	e9c4 2300 	strd	r2, r3, [r4]
 8005902:	e7a6      	b.n	8005852 <__ieee754_rem_pio2+0x1ba>
 8005904:	a326      	add	r3, pc, #152	; (adr r3, 80059a0 <__ieee754_rem_pio2+0x308>)
 8005906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800590e:	f7fa fde3 	bl	80004d8 <__aeabi_dmul>
 8005912:	4606      	mov	r6, r0
 8005914:	460f      	mov	r7, r1
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	4650      	mov	r0, sl
 800591c:	4659      	mov	r1, fp
 800591e:	f7fa fc23 	bl	8000168 <__aeabi_dsub>
 8005922:	4602      	mov	r2, r0
 8005924:	460b      	mov	r3, r1
 8005926:	4680      	mov	r8, r0
 8005928:	4689      	mov	r9, r1
 800592a:	4650      	mov	r0, sl
 800592c:	4659      	mov	r1, fp
 800592e:	f7fa fc1b 	bl	8000168 <__aeabi_dsub>
 8005932:	4632      	mov	r2, r6
 8005934:	463b      	mov	r3, r7
 8005936:	f7fa fc17 	bl	8000168 <__aeabi_dsub>
 800593a:	a31b      	add	r3, pc, #108	; (adr r3, 80059a8 <__ieee754_rem_pio2+0x310>)
 800593c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005940:	4606      	mov	r6, r0
 8005942:	460f      	mov	r7, r1
 8005944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005948:	f7fa fdc6 	bl	80004d8 <__aeabi_dmul>
 800594c:	4632      	mov	r2, r6
 800594e:	463b      	mov	r3, r7
 8005950:	f7fa fc0a 	bl	8000168 <__aeabi_dsub>
 8005954:	4606      	mov	r6, r0
 8005956:	460f      	mov	r7, r1
 8005958:	e75e      	b.n	8005818 <__ieee754_rem_pio2+0x180>
 800595a:	4a1b      	ldr	r2, [pc, #108]	; (80059c8 <__ieee754_rem_pio2+0x330>)
 800595c:	4592      	cmp	sl, r2
 800595e:	dd35      	ble.n	80059cc <__ieee754_rem_pio2+0x334>
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	f7fa fc00 	bl	8000168 <__aeabi_dsub>
 8005968:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800596c:	e9c4 0100 	strd	r0, r1, [r4]
 8005970:	e6a2      	b.n	80056b8 <__ieee754_rem_pio2+0x20>
 8005972:	bf00      	nop
 8005974:	f3af 8000 	nop.w
 8005978:	54400000 	.word	0x54400000
 800597c:	3ff921fb 	.word	0x3ff921fb
 8005980:	1a626331 	.word	0x1a626331
 8005984:	3dd0b461 	.word	0x3dd0b461
 8005988:	1a600000 	.word	0x1a600000
 800598c:	3dd0b461 	.word	0x3dd0b461
 8005990:	2e037073 	.word	0x2e037073
 8005994:	3ba3198a 	.word	0x3ba3198a
 8005998:	6dc9c883 	.word	0x6dc9c883
 800599c:	3fe45f30 	.word	0x3fe45f30
 80059a0:	2e000000 	.word	0x2e000000
 80059a4:	3ba3198a 	.word	0x3ba3198a
 80059a8:	252049c1 	.word	0x252049c1
 80059ac:	397b839a 	.word	0x397b839a
 80059b0:	3fe921fb 	.word	0x3fe921fb
 80059b4:	4002d97b 	.word	0x4002d97b
 80059b8:	3ff921fb 	.word	0x3ff921fb
 80059bc:	413921fb 	.word	0x413921fb
 80059c0:	3fe00000 	.word	0x3fe00000
 80059c4:	080072d4 	.word	0x080072d4
 80059c8:	7fefffff 	.word	0x7fefffff
 80059cc:	ea4f 552a 	mov.w	r5, sl, asr #20
 80059d0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80059d4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80059d8:	460f      	mov	r7, r1
 80059da:	4606      	mov	r6, r0
 80059dc:	f7fb f816 	bl	8000a0c <__aeabi_d2iz>
 80059e0:	f7fa fd10 	bl	8000404 <__aeabi_i2d>
 80059e4:	4602      	mov	r2, r0
 80059e6:	460b      	mov	r3, r1
 80059e8:	4630      	mov	r0, r6
 80059ea:	4639      	mov	r1, r7
 80059ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80059f0:	f7fa fbba 	bl	8000168 <__aeabi_dsub>
 80059f4:	2200      	movs	r2, #0
 80059f6:	4b1e      	ldr	r3, [pc, #120]	; (8005a70 <__ieee754_rem_pio2+0x3d8>)
 80059f8:	f7fa fd6e 	bl	80004d8 <__aeabi_dmul>
 80059fc:	460f      	mov	r7, r1
 80059fe:	4606      	mov	r6, r0
 8005a00:	f7fb f804 	bl	8000a0c <__aeabi_d2iz>
 8005a04:	f7fa fcfe 	bl	8000404 <__aeabi_i2d>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	4639      	mov	r1, r7
 8005a10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005a14:	f7fa fba8 	bl	8000168 <__aeabi_dsub>
 8005a18:	2200      	movs	r2, #0
 8005a1a:	4b15      	ldr	r3, [pc, #84]	; (8005a70 <__ieee754_rem_pio2+0x3d8>)
 8005a1c:	f7fa fd5c 	bl	80004d8 <__aeabi_dmul>
 8005a20:	f04f 0803 	mov.w	r8, #3
 8005a24:	2600      	movs	r6, #0
 8005a26:	2700      	movs	r7, #0
 8005a28:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005a2c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8005a30:	4632      	mov	r2, r6
 8005a32:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8005a36:	463b      	mov	r3, r7
 8005a38:	46c2      	mov	sl, r8
 8005a3a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a3e:	f7fa ffb3 	bl	80009a8 <__aeabi_dcmpeq>
 8005a42:	2800      	cmp	r0, #0
 8005a44:	d1f4      	bne.n	8005a30 <__ieee754_rem_pio2+0x398>
 8005a46:	4b0b      	ldr	r3, [pc, #44]	; (8005a74 <__ieee754_rem_pio2+0x3dc>)
 8005a48:	462a      	mov	r2, r5
 8005a4a:	9301      	str	r3, [sp, #4]
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	4621      	mov	r1, r4
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	a806      	add	r0, sp, #24
 8005a54:	4653      	mov	r3, sl
 8005a56:	f000 f96d 	bl	8005d34 <__kernel_rem_pio2>
 8005a5a:	9b04      	ldr	r3, [sp, #16]
 8005a5c:	4605      	mov	r5, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f6bf ae51 	bge.w	8005706 <__ieee754_rem_pio2+0x6e>
 8005a64:	6863      	ldr	r3, [r4, #4]
 8005a66:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005a6a:	6063      	str	r3, [r4, #4]
 8005a6c:	68e3      	ldr	r3, [r4, #12]
 8005a6e:	e707      	b.n	8005880 <__ieee754_rem_pio2+0x1e8>
 8005a70:	41700000 	.word	0x41700000
 8005a74:	08007354 	.word	0x08007354

08005a78 <__ieee754_rem_pio2f>:
 8005a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7c:	4aa0      	ldr	r2, [pc, #640]	; (8005d00 <__ieee754_rem_pio2f+0x288>)
 8005a7e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8005a82:	4296      	cmp	r6, r2
 8005a84:	460c      	mov	r4, r1
 8005a86:	4682      	mov	sl, r0
 8005a88:	b087      	sub	sp, #28
 8005a8a:	dc04      	bgt.n	8005a96 <__ieee754_rem_pio2f+0x1e>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	6008      	str	r0, [r1, #0]
 8005a90:	604b      	str	r3, [r1, #4]
 8005a92:	2500      	movs	r5, #0
 8005a94:	e01a      	b.n	8005acc <__ieee754_rem_pio2f+0x54>
 8005a96:	4a9b      	ldr	r2, [pc, #620]	; (8005d04 <__ieee754_rem_pio2f+0x28c>)
 8005a98:	4296      	cmp	r6, r2
 8005a9a:	dc4b      	bgt.n	8005b34 <__ieee754_rem_pio2f+0xbc>
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	499a      	ldr	r1, [pc, #616]	; (8005d08 <__ieee754_rem_pio2f+0x290>)
 8005aa0:	4f9a      	ldr	r7, [pc, #616]	; (8005d0c <__ieee754_rem_pio2f+0x294>)
 8005aa2:	f026 060f 	bic.w	r6, r6, #15
 8005aa6:	dd23      	ble.n	8005af0 <__ieee754_rem_pio2f+0x78>
 8005aa8:	f7fb f82c 	bl	8000b04 <__aeabi_fsub>
 8005aac:	42be      	cmp	r6, r7
 8005aae:	4605      	mov	r5, r0
 8005ab0:	d010      	beq.n	8005ad4 <__ieee754_rem_pio2f+0x5c>
 8005ab2:	4997      	ldr	r1, [pc, #604]	; (8005d10 <__ieee754_rem_pio2f+0x298>)
 8005ab4:	f7fb f826 	bl	8000b04 <__aeabi_fsub>
 8005ab8:	4601      	mov	r1, r0
 8005aba:	6020      	str	r0, [r4, #0]
 8005abc:	4628      	mov	r0, r5
 8005abe:	f7fb f821 	bl	8000b04 <__aeabi_fsub>
 8005ac2:	4993      	ldr	r1, [pc, #588]	; (8005d10 <__ieee754_rem_pio2f+0x298>)
 8005ac4:	f7fb f81e 	bl	8000b04 <__aeabi_fsub>
 8005ac8:	2501      	movs	r5, #1
 8005aca:	6060      	str	r0, [r4, #4]
 8005acc:	4628      	mov	r0, r5
 8005ace:	b007      	add	sp, #28
 8005ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad4:	498f      	ldr	r1, [pc, #572]	; (8005d14 <__ieee754_rem_pio2f+0x29c>)
 8005ad6:	f7fb f815 	bl	8000b04 <__aeabi_fsub>
 8005ada:	498f      	ldr	r1, [pc, #572]	; (8005d18 <__ieee754_rem_pio2f+0x2a0>)
 8005adc:	4605      	mov	r5, r0
 8005ade:	f7fb f811 	bl	8000b04 <__aeabi_fsub>
 8005ae2:	4601      	mov	r1, r0
 8005ae4:	6020      	str	r0, [r4, #0]
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	f7fb f80c 	bl	8000b04 <__aeabi_fsub>
 8005aec:	498a      	ldr	r1, [pc, #552]	; (8005d18 <__ieee754_rem_pio2f+0x2a0>)
 8005aee:	e7e9      	b.n	8005ac4 <__ieee754_rem_pio2f+0x4c>
 8005af0:	f7fb f80a 	bl	8000b08 <__addsf3>
 8005af4:	42be      	cmp	r6, r7
 8005af6:	4605      	mov	r5, r0
 8005af8:	d00e      	beq.n	8005b18 <__ieee754_rem_pio2f+0xa0>
 8005afa:	4985      	ldr	r1, [pc, #532]	; (8005d10 <__ieee754_rem_pio2f+0x298>)
 8005afc:	f7fb f804 	bl	8000b08 <__addsf3>
 8005b00:	4601      	mov	r1, r0
 8005b02:	6020      	str	r0, [r4, #0]
 8005b04:	4628      	mov	r0, r5
 8005b06:	f7fa fffd 	bl	8000b04 <__aeabi_fsub>
 8005b0a:	4981      	ldr	r1, [pc, #516]	; (8005d10 <__ieee754_rem_pio2f+0x298>)
 8005b0c:	f7fa fffc 	bl	8000b08 <__addsf3>
 8005b10:	f04f 35ff 	mov.w	r5, #4294967295
 8005b14:	6060      	str	r0, [r4, #4]
 8005b16:	e7d9      	b.n	8005acc <__ieee754_rem_pio2f+0x54>
 8005b18:	497e      	ldr	r1, [pc, #504]	; (8005d14 <__ieee754_rem_pio2f+0x29c>)
 8005b1a:	f7fa fff5 	bl	8000b08 <__addsf3>
 8005b1e:	497e      	ldr	r1, [pc, #504]	; (8005d18 <__ieee754_rem_pio2f+0x2a0>)
 8005b20:	4605      	mov	r5, r0
 8005b22:	f7fa fff1 	bl	8000b08 <__addsf3>
 8005b26:	4601      	mov	r1, r0
 8005b28:	6020      	str	r0, [r4, #0]
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	f7fa ffea 	bl	8000b04 <__aeabi_fsub>
 8005b30:	4979      	ldr	r1, [pc, #484]	; (8005d18 <__ieee754_rem_pio2f+0x2a0>)
 8005b32:	e7eb      	b.n	8005b0c <__ieee754_rem_pio2f+0x94>
 8005b34:	4a79      	ldr	r2, [pc, #484]	; (8005d1c <__ieee754_rem_pio2f+0x2a4>)
 8005b36:	4296      	cmp	r6, r2
 8005b38:	f300 8091 	bgt.w	8005c5e <__ieee754_rem_pio2f+0x1e6>
 8005b3c:	f001 fabe 	bl	80070bc <fabsf>
 8005b40:	4977      	ldr	r1, [pc, #476]	; (8005d20 <__ieee754_rem_pio2f+0x2a8>)
 8005b42:	4607      	mov	r7, r0
 8005b44:	f7fb f8e8 	bl	8000d18 <__aeabi_fmul>
 8005b48:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005b4c:	f7fa ffdc 	bl	8000b08 <__addsf3>
 8005b50:	f7fb faa8 	bl	80010a4 <__aeabi_f2iz>
 8005b54:	4605      	mov	r5, r0
 8005b56:	f7fb f88b 	bl	8000c70 <__aeabi_i2f>
 8005b5a:	496b      	ldr	r1, [pc, #428]	; (8005d08 <__ieee754_rem_pio2f+0x290>)
 8005b5c:	4681      	mov	r9, r0
 8005b5e:	f7fb f8db 	bl	8000d18 <__aeabi_fmul>
 8005b62:	4601      	mov	r1, r0
 8005b64:	4638      	mov	r0, r7
 8005b66:	f7fa ffcd 	bl	8000b04 <__aeabi_fsub>
 8005b6a:	4969      	ldr	r1, [pc, #420]	; (8005d10 <__ieee754_rem_pio2f+0x298>)
 8005b6c:	4680      	mov	r8, r0
 8005b6e:	4648      	mov	r0, r9
 8005b70:	f7fb f8d2 	bl	8000d18 <__aeabi_fmul>
 8005b74:	2d1f      	cmp	r5, #31
 8005b76:	4607      	mov	r7, r0
 8005b78:	dc0c      	bgt.n	8005b94 <__ieee754_rem_pio2f+0x11c>
 8005b7a:	4a6a      	ldr	r2, [pc, #424]	; (8005d24 <__ieee754_rem_pio2f+0x2ac>)
 8005b7c:	1e69      	subs	r1, r5, #1
 8005b7e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005b82:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d004      	beq.n	8005b94 <__ieee754_rem_pio2f+0x11c>
 8005b8a:	4639      	mov	r1, r7
 8005b8c:	4640      	mov	r0, r8
 8005b8e:	f7fa ffb9 	bl	8000b04 <__aeabi_fsub>
 8005b92:	e00b      	b.n	8005bac <__ieee754_rem_pio2f+0x134>
 8005b94:	4639      	mov	r1, r7
 8005b96:	4640      	mov	r0, r8
 8005b98:	f7fa ffb4 	bl	8000b04 <__aeabi_fsub>
 8005b9c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005ba0:	ea4f 5be6 	mov.w	fp, r6, asr #23
 8005ba4:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 8005ba8:	2e08      	cmp	r6, #8
 8005baa:	dc01      	bgt.n	8005bb0 <__ieee754_rem_pio2f+0x138>
 8005bac:	6020      	str	r0, [r4, #0]
 8005bae:	e026      	b.n	8005bfe <__ieee754_rem_pio2f+0x186>
 8005bb0:	4958      	ldr	r1, [pc, #352]	; (8005d14 <__ieee754_rem_pio2f+0x29c>)
 8005bb2:	4648      	mov	r0, r9
 8005bb4:	f7fb f8b0 	bl	8000d18 <__aeabi_fmul>
 8005bb8:	4607      	mov	r7, r0
 8005bba:	4601      	mov	r1, r0
 8005bbc:	4640      	mov	r0, r8
 8005bbe:	f7fa ffa1 	bl	8000b04 <__aeabi_fsub>
 8005bc2:	4601      	mov	r1, r0
 8005bc4:	4606      	mov	r6, r0
 8005bc6:	4640      	mov	r0, r8
 8005bc8:	f7fa ff9c 	bl	8000b04 <__aeabi_fsub>
 8005bcc:	4639      	mov	r1, r7
 8005bce:	f7fa ff99 	bl	8000b04 <__aeabi_fsub>
 8005bd2:	4607      	mov	r7, r0
 8005bd4:	4950      	ldr	r1, [pc, #320]	; (8005d18 <__ieee754_rem_pio2f+0x2a0>)
 8005bd6:	4648      	mov	r0, r9
 8005bd8:	f7fb f89e 	bl	8000d18 <__aeabi_fmul>
 8005bdc:	4639      	mov	r1, r7
 8005bde:	f7fa ff91 	bl	8000b04 <__aeabi_fsub>
 8005be2:	4601      	mov	r1, r0
 8005be4:	4607      	mov	r7, r0
 8005be6:	4630      	mov	r0, r6
 8005be8:	f7fa ff8c 	bl	8000b04 <__aeabi_fsub>
 8005bec:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005bf0:	ebab 0b03 	sub.w	fp, fp, r3
 8005bf4:	f1bb 0f19 	cmp.w	fp, #25
 8005bf8:	dc16      	bgt.n	8005c28 <__ieee754_rem_pio2f+0x1b0>
 8005bfa:	46b0      	mov	r8, r6
 8005bfc:	6020      	str	r0, [r4, #0]
 8005bfe:	6826      	ldr	r6, [r4, #0]
 8005c00:	4640      	mov	r0, r8
 8005c02:	4631      	mov	r1, r6
 8005c04:	f7fa ff7e 	bl	8000b04 <__aeabi_fsub>
 8005c08:	4639      	mov	r1, r7
 8005c0a:	f7fa ff7b 	bl	8000b04 <__aeabi_fsub>
 8005c0e:	f1ba 0f00 	cmp.w	sl, #0
 8005c12:	6060      	str	r0, [r4, #4]
 8005c14:	f6bf af5a 	bge.w	8005acc <__ieee754_rem_pio2f+0x54>
 8005c18:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8005c1c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005c20:	6026      	str	r6, [r4, #0]
 8005c22:	6060      	str	r0, [r4, #4]
 8005c24:	426d      	negs	r5, r5
 8005c26:	e751      	b.n	8005acc <__ieee754_rem_pio2f+0x54>
 8005c28:	493f      	ldr	r1, [pc, #252]	; (8005d28 <__ieee754_rem_pio2f+0x2b0>)
 8005c2a:	4648      	mov	r0, r9
 8005c2c:	f7fb f874 	bl	8000d18 <__aeabi_fmul>
 8005c30:	4607      	mov	r7, r0
 8005c32:	4601      	mov	r1, r0
 8005c34:	4630      	mov	r0, r6
 8005c36:	f7fa ff65 	bl	8000b04 <__aeabi_fsub>
 8005c3a:	4601      	mov	r1, r0
 8005c3c:	4680      	mov	r8, r0
 8005c3e:	4630      	mov	r0, r6
 8005c40:	f7fa ff60 	bl	8000b04 <__aeabi_fsub>
 8005c44:	4639      	mov	r1, r7
 8005c46:	f7fa ff5d 	bl	8000b04 <__aeabi_fsub>
 8005c4a:	4606      	mov	r6, r0
 8005c4c:	4937      	ldr	r1, [pc, #220]	; (8005d2c <__ieee754_rem_pio2f+0x2b4>)
 8005c4e:	4648      	mov	r0, r9
 8005c50:	f7fb f862 	bl	8000d18 <__aeabi_fmul>
 8005c54:	4631      	mov	r1, r6
 8005c56:	f7fa ff55 	bl	8000b04 <__aeabi_fsub>
 8005c5a:	4607      	mov	r7, r0
 8005c5c:	e795      	b.n	8005b8a <__ieee754_rem_pio2f+0x112>
 8005c5e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8005c62:	db05      	blt.n	8005c70 <__ieee754_rem_pio2f+0x1f8>
 8005c64:	4601      	mov	r1, r0
 8005c66:	f7fa ff4d 	bl	8000b04 <__aeabi_fsub>
 8005c6a:	6060      	str	r0, [r4, #4]
 8005c6c:	6020      	str	r0, [r4, #0]
 8005c6e:	e710      	b.n	8005a92 <__ieee754_rem_pio2f+0x1a>
 8005c70:	15f7      	asrs	r7, r6, #23
 8005c72:	3f86      	subs	r7, #134	; 0x86
 8005c74:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 8005c78:	4630      	mov	r0, r6
 8005c7a:	f7fb fa13 	bl	80010a4 <__aeabi_f2iz>
 8005c7e:	f7fa fff7 	bl	8000c70 <__aeabi_i2f>
 8005c82:	4601      	mov	r1, r0
 8005c84:	9003      	str	r0, [sp, #12]
 8005c86:	4630      	mov	r0, r6
 8005c88:	f7fa ff3c 	bl	8000b04 <__aeabi_fsub>
 8005c8c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8005c90:	f7fb f842 	bl	8000d18 <__aeabi_fmul>
 8005c94:	4606      	mov	r6, r0
 8005c96:	f7fb fa05 	bl	80010a4 <__aeabi_f2iz>
 8005c9a:	f7fa ffe9 	bl	8000c70 <__aeabi_i2f>
 8005c9e:	4601      	mov	r1, r0
 8005ca0:	9004      	str	r0, [sp, #16]
 8005ca2:	4605      	mov	r5, r0
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	f7fa ff2d 	bl	8000b04 <__aeabi_fsub>
 8005caa:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8005cae:	f7fb f833 	bl	8000d18 <__aeabi_fmul>
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	9005      	str	r0, [sp, #20]
 8005cb6:	f7fb f9c3 	bl	8001040 <__aeabi_fcmpeq>
 8005cba:	b1f0      	cbz	r0, 8005cfa <__ieee754_rem_pio2f+0x282>
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	f7fb f9be 	bl	8001040 <__aeabi_fcmpeq>
 8005cc4:	2800      	cmp	r0, #0
 8005cc6:	bf14      	ite	ne
 8005cc8:	2301      	movne	r3, #1
 8005cca:	2302      	moveq	r3, #2
 8005ccc:	4a18      	ldr	r2, [pc, #96]	; (8005d30 <__ieee754_rem_pio2f+0x2b8>)
 8005cce:	4621      	mov	r1, r4
 8005cd0:	9201      	str	r2, [sp, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	a803      	add	r0, sp, #12
 8005cd6:	9200      	str	r2, [sp, #0]
 8005cd8:	463a      	mov	r2, r7
 8005cda:	f000 fdb9 	bl	8006850 <__kernel_rem_pio2f>
 8005cde:	f1ba 0f00 	cmp.w	sl, #0
 8005ce2:	4605      	mov	r5, r0
 8005ce4:	f6bf aef2 	bge.w	8005acc <__ieee754_rem_pio2f+0x54>
 8005ce8:	6823      	ldr	r3, [r4, #0]
 8005cea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005cee:	6023      	str	r3, [r4, #0]
 8005cf0:	6863      	ldr	r3, [r4, #4]
 8005cf2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005cf6:	6063      	str	r3, [r4, #4]
 8005cf8:	e794      	b.n	8005c24 <__ieee754_rem_pio2f+0x1ac>
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e7e6      	b.n	8005ccc <__ieee754_rem_pio2f+0x254>
 8005cfe:	bf00      	nop
 8005d00:	3f490fd8 	.word	0x3f490fd8
 8005d04:	4016cbe3 	.word	0x4016cbe3
 8005d08:	3fc90f80 	.word	0x3fc90f80
 8005d0c:	3fc90fd0 	.word	0x3fc90fd0
 8005d10:	37354443 	.word	0x37354443
 8005d14:	37354400 	.word	0x37354400
 8005d18:	2e85a308 	.word	0x2e85a308
 8005d1c:	43490f80 	.word	0x43490f80
 8005d20:	3f22f984 	.word	0x3f22f984
 8005d24:	0800745c 	.word	0x0800745c
 8005d28:	2e85a300 	.word	0x2e85a300
 8005d2c:	248d3132 	.word	0x248d3132
 8005d30:	080074dc 	.word	0x080074dc

08005d34 <__kernel_rem_pio2>:
 8005d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d38:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005d3c:	9308      	str	r3, [sp, #32]
 8005d3e:	9101      	str	r1, [sp, #4]
 8005d40:	4bc0      	ldr	r3, [pc, #768]	; (8006044 <__kernel_rem_pio2+0x310>)
 8005d42:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8005d44:	f112 0f14 	cmn.w	r2, #20
 8005d48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005d4c:	bfa8      	it	ge
 8005d4e:	1ed4      	subge	r4, r2, #3
 8005d50:	9304      	str	r3, [sp, #16]
 8005d52:	9b08      	ldr	r3, [sp, #32]
 8005d54:	bfb8      	it	lt
 8005d56:	2400      	movlt	r4, #0
 8005d58:	f103 33ff 	add.w	r3, r3, #4294967295
 8005d5c:	9306      	str	r3, [sp, #24]
 8005d5e:	bfa4      	itt	ge
 8005d60:	2318      	movge	r3, #24
 8005d62:	fb94 f4f3 	sdivge	r4, r4, r3
 8005d66:	f06f 0317 	mvn.w	r3, #23
 8005d6a:	fb04 3303 	mla	r3, r4, r3, r3
 8005d6e:	eb03 0a02 	add.w	sl, r3, r2
 8005d72:	9a06      	ldr	r2, [sp, #24]
 8005d74:	9b04      	ldr	r3, [sp, #16]
 8005d76:	1aa7      	subs	r7, r4, r2
 8005d78:	eb03 0802 	add.w	r8, r3, r2
 8005d7c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005d7e:	2500      	movs	r5, #0
 8005d80:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005d84:	2200      	movs	r2, #0
 8005d86:	2300      	movs	r3, #0
 8005d88:	9009      	str	r0, [sp, #36]	; 0x24
 8005d8a:	ae20      	add	r6, sp, #128	; 0x80
 8005d8c:	4545      	cmp	r5, r8
 8005d8e:	dd19      	ble.n	8005dc4 <__kernel_rem_pio2+0x90>
 8005d90:	9b08      	ldr	r3, [sp, #32]
 8005d92:	aa20      	add	r2, sp, #128	; 0x80
 8005d94:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005d98:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005d9c:	f1c3 0301 	rsb	r3, r3, #1
 8005da0:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8005da4:	9307      	str	r3, [sp, #28]
 8005da6:	9b07      	ldr	r3, [sp, #28]
 8005da8:	9a04      	ldr	r2, [sp, #16]
 8005daa:	4443      	add	r3, r8
 8005dac:	429a      	cmp	r2, r3
 8005dae:	db35      	blt.n	8005e1c <__kernel_rem_pio2+0xe8>
 8005db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db2:	2200      	movs	r2, #0
 8005db4:	f1a3 0908 	sub.w	r9, r3, #8
 8005db8:	2300      	movs	r3, #0
 8005dba:	462f      	mov	r7, r5
 8005dbc:	2600      	movs	r6, #0
 8005dbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005dc2:	e01f      	b.n	8005e04 <__kernel_rem_pio2+0xd0>
 8005dc4:	42ef      	cmn	r7, r5
 8005dc6:	d40b      	bmi.n	8005de0 <__kernel_rem_pio2+0xac>
 8005dc8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005dcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005dd0:	f7fa fb18 	bl	8000404 <__aeabi_i2d>
 8005dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dd8:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005ddc:	3501      	adds	r5, #1
 8005dde:	e7d5      	b.n	8005d8c <__kernel_rem_pio2+0x58>
 8005de0:	4610      	mov	r0, r2
 8005de2:	4619      	mov	r1, r3
 8005de4:	e7f8      	b.n	8005dd8 <__kernel_rem_pio2+0xa4>
 8005de6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dea:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8005dee:	f7fa fb73 	bl	80004d8 <__aeabi_dmul>
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
 8005df6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dfa:	f7fa f9b7 	bl	800016c <__adddf3>
 8005dfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e02:	3601      	adds	r6, #1
 8005e04:	9b06      	ldr	r3, [sp, #24]
 8005e06:	3f08      	subs	r7, #8
 8005e08:	429e      	cmp	r6, r3
 8005e0a:	ddec      	ble.n	8005de6 <__kernel_rem_pio2+0xb2>
 8005e0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e10:	3508      	adds	r5, #8
 8005e12:	e8eb 2302 	strd	r2, r3, [fp], #8
 8005e16:	f108 0801 	add.w	r8, r8, #1
 8005e1a:	e7c4      	b.n	8005da6 <__kernel_rem_pio2+0x72>
 8005e1c:	9b04      	ldr	r3, [sp, #16]
 8005e1e:	aa0c      	add	r2, sp, #48	; 0x30
 8005e20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005e24:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e26:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005e28:	9f04      	ldr	r7, [sp, #16]
 8005e2a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005e2e:	930a      	str	r3, [sp, #40]	; 0x28
 8005e30:	463e      	mov	r6, r7
 8005e32:	ab98      	add	r3, sp, #608	; 0x260
 8005e34:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8005e38:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005e3c:	f8cd b008 	str.w	fp, [sp, #8]
 8005e40:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8005e44:	2e00      	cmp	r6, #0
 8005e46:	dc71      	bgt.n	8005f2c <__kernel_rem_pio2+0x1f8>
 8005e48:	4652      	mov	r2, sl
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	4629      	mov	r1, r5
 8005e4e:	f001 f8af 	bl	8006fb0 <scalbn>
 8005e52:	2200      	movs	r2, #0
 8005e54:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005e58:	4604      	mov	r4, r0
 8005e5a:	460d      	mov	r5, r1
 8005e5c:	f7fa fb3c 	bl	80004d8 <__aeabi_dmul>
 8005e60:	f001 f826 	bl	8006eb0 <floor>
 8005e64:	2200      	movs	r2, #0
 8005e66:	4b78      	ldr	r3, [pc, #480]	; (8006048 <__kernel_rem_pio2+0x314>)
 8005e68:	f7fa fb36 	bl	80004d8 <__aeabi_dmul>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	4620      	mov	r0, r4
 8005e72:	4629      	mov	r1, r5
 8005e74:	f7fa f978 	bl	8000168 <__aeabi_dsub>
 8005e78:	460d      	mov	r5, r1
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	f7fa fdc6 	bl	8000a0c <__aeabi_d2iz>
 8005e80:	9007      	str	r0, [sp, #28]
 8005e82:	f7fa fabf 	bl	8000404 <__aeabi_i2d>
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	4629      	mov	r1, r5
 8005e8e:	f7fa f96b 	bl	8000168 <__aeabi_dsub>
 8005e92:	f1ba 0f00 	cmp.w	sl, #0
 8005e96:	4680      	mov	r8, r0
 8005e98:	4689      	mov	r9, r1
 8005e9a:	dd70      	ble.n	8005f7e <__kernel_rem_pio2+0x24a>
 8005e9c:	1e7a      	subs	r2, r7, #1
 8005e9e:	ab0c      	add	r3, sp, #48	; 0x30
 8005ea0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005ea4:	9c07      	ldr	r4, [sp, #28]
 8005ea6:	f1ca 0118 	rsb	r1, sl, #24
 8005eaa:	fa40 f301 	asr.w	r3, r0, r1
 8005eae:	441c      	add	r4, r3
 8005eb0:	408b      	lsls	r3, r1
 8005eb2:	1ac0      	subs	r0, r0, r3
 8005eb4:	ab0c      	add	r3, sp, #48	; 0x30
 8005eb6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005eba:	f1ca 0317 	rsb	r3, sl, #23
 8005ebe:	9407      	str	r4, [sp, #28]
 8005ec0:	fa40 f303 	asr.w	r3, r0, r3
 8005ec4:	9302      	str	r3, [sp, #8]
 8005ec6:	9b02      	ldr	r3, [sp, #8]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	dd66      	ble.n	8005f9a <__kernel_rem_pio2+0x266>
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005ed2:	4614      	mov	r4, r2
 8005ed4:	9b07      	ldr	r3, [sp, #28]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	9307      	str	r3, [sp, #28]
 8005eda:	4297      	cmp	r7, r2
 8005edc:	f300 809f 	bgt.w	800601e <__kernel_rem_pio2+0x2ea>
 8005ee0:	f1ba 0f00 	cmp.w	sl, #0
 8005ee4:	dd07      	ble.n	8005ef6 <__kernel_rem_pio2+0x1c2>
 8005ee6:	f1ba 0f01 	cmp.w	sl, #1
 8005eea:	f000 80b9 	beq.w	8006060 <__kernel_rem_pio2+0x32c>
 8005eee:	f1ba 0f02 	cmp.w	sl, #2
 8005ef2:	f000 80bf 	beq.w	8006074 <__kernel_rem_pio2+0x340>
 8005ef6:	9b02      	ldr	r3, [sp, #8]
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d14e      	bne.n	8005f9a <__kernel_rem_pio2+0x266>
 8005efc:	4642      	mov	r2, r8
 8005efe:	464b      	mov	r3, r9
 8005f00:	2000      	movs	r0, #0
 8005f02:	4952      	ldr	r1, [pc, #328]	; (800604c <__kernel_rem_pio2+0x318>)
 8005f04:	f7fa f930 	bl	8000168 <__aeabi_dsub>
 8005f08:	4680      	mov	r8, r0
 8005f0a:	4689      	mov	r9, r1
 8005f0c:	2c00      	cmp	r4, #0
 8005f0e:	d044      	beq.n	8005f9a <__kernel_rem_pio2+0x266>
 8005f10:	4652      	mov	r2, sl
 8005f12:	2000      	movs	r0, #0
 8005f14:	494d      	ldr	r1, [pc, #308]	; (800604c <__kernel_rem_pio2+0x318>)
 8005f16:	f001 f84b 	bl	8006fb0 <scalbn>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	4640      	mov	r0, r8
 8005f20:	4649      	mov	r1, r9
 8005f22:	f7fa f921 	bl	8000168 <__aeabi_dsub>
 8005f26:	4680      	mov	r8, r0
 8005f28:	4689      	mov	r9, r1
 8005f2a:	e036      	b.n	8005f9a <__kernel_rem_pio2+0x266>
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	4b48      	ldr	r3, [pc, #288]	; (8006050 <__kernel_rem_pio2+0x31c>)
 8005f30:	4620      	mov	r0, r4
 8005f32:	4629      	mov	r1, r5
 8005f34:	f7fa fad0 	bl	80004d8 <__aeabi_dmul>
 8005f38:	f7fa fd68 	bl	8000a0c <__aeabi_d2iz>
 8005f3c:	f7fa fa62 	bl	8000404 <__aeabi_i2d>
 8005f40:	2200      	movs	r2, #0
 8005f42:	4b44      	ldr	r3, [pc, #272]	; (8006054 <__kernel_rem_pio2+0x320>)
 8005f44:	4680      	mov	r8, r0
 8005f46:	4689      	mov	r9, r1
 8005f48:	f7fa fac6 	bl	80004d8 <__aeabi_dmul>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	4620      	mov	r0, r4
 8005f52:	4629      	mov	r1, r5
 8005f54:	f7fa f908 	bl	8000168 <__aeabi_dsub>
 8005f58:	f7fa fd58 	bl	8000a0c <__aeabi_d2iz>
 8005f5c:	9b02      	ldr	r3, [sp, #8]
 8005f5e:	3e01      	subs	r6, #1
 8005f60:	f843 0b04 	str.w	r0, [r3], #4
 8005f64:	9302      	str	r3, [sp, #8]
 8005f66:	ab70      	add	r3, sp, #448	; 0x1c0
 8005f68:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005f6c:	4640      	mov	r0, r8
 8005f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f72:	4649      	mov	r1, r9
 8005f74:	f7fa f8fa 	bl	800016c <__adddf3>
 8005f78:	4604      	mov	r4, r0
 8005f7a:	460d      	mov	r5, r1
 8005f7c:	e762      	b.n	8005e44 <__kernel_rem_pio2+0x110>
 8005f7e:	d105      	bne.n	8005f8c <__kernel_rem_pio2+0x258>
 8005f80:	1e7b      	subs	r3, r7, #1
 8005f82:	aa0c      	add	r2, sp, #48	; 0x30
 8005f84:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005f88:	15c3      	asrs	r3, r0, #23
 8005f8a:	e79b      	b.n	8005ec4 <__kernel_rem_pio2+0x190>
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	4b32      	ldr	r3, [pc, #200]	; (8006058 <__kernel_rem_pio2+0x324>)
 8005f90:	f7fa fd28 	bl	80009e4 <__aeabi_dcmpge>
 8005f94:	2800      	cmp	r0, #0
 8005f96:	d13f      	bne.n	8006018 <__kernel_rem_pio2+0x2e4>
 8005f98:	9002      	str	r0, [sp, #8]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	4640      	mov	r0, r8
 8005fa0:	4649      	mov	r1, r9
 8005fa2:	f7fa fd01 	bl	80009a8 <__aeabi_dcmpeq>
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	f000 80b5 	beq.w	8006116 <__kernel_rem_pio2+0x3e2>
 8005fac:	1e7c      	subs	r4, r7, #1
 8005fae:	4623      	mov	r3, r4
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	9904      	ldr	r1, [sp, #16]
 8005fb4:	428b      	cmp	r3, r1
 8005fb6:	da64      	bge.n	8006082 <__kernel_rem_pio2+0x34e>
 8005fb8:	2a00      	cmp	r2, #0
 8005fba:	d078      	beq.n	80060ae <__kernel_rem_pio2+0x37a>
 8005fbc:	ab0c      	add	r3, sp, #48	; 0x30
 8005fbe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005fc2:	f1aa 0a18 	sub.w	sl, sl, #24
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f000 80a3 	beq.w	8006112 <__kernel_rem_pio2+0x3de>
 8005fcc:	4652      	mov	r2, sl
 8005fce:	2000      	movs	r0, #0
 8005fd0:	491e      	ldr	r1, [pc, #120]	; (800604c <__kernel_rem_pio2+0x318>)
 8005fd2:	f000 ffed 	bl	8006fb0 <scalbn>
 8005fd6:	46a2      	mov	sl, r4
 8005fd8:	4606      	mov	r6, r0
 8005fda:	460f      	mov	r7, r1
 8005fdc:	f04f 0800 	mov.w	r8, #0
 8005fe0:	00e3      	lsls	r3, r4, #3
 8005fe2:	9306      	str	r3, [sp, #24]
 8005fe4:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8006050 <__kernel_rem_pio2+0x31c>
 8005fe8:	ab70      	add	r3, sp, #448	; 0x1c0
 8005fea:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8005fee:	f1ba 0f00 	cmp.w	sl, #0
 8005ff2:	f280 80c6 	bge.w	8006182 <__kernel_rem_pio2+0x44e>
 8005ff6:	4627      	mov	r7, r4
 8005ff8:	f04f 0800 	mov.w	r8, #0
 8005ffc:	2f00      	cmp	r7, #0
 8005ffe:	f2c0 80f3 	blt.w	80061e8 <__kernel_rem_pio2+0x4b4>
 8006002:	4b16      	ldr	r3, [pc, #88]	; (800605c <__kernel_rem_pio2+0x328>)
 8006004:	f04f 0a00 	mov.w	sl, #0
 8006008:	461d      	mov	r5, r3
 800600a:	ab70      	add	r3, sp, #448	; 0x1c0
 800600c:	f04f 0b00 	mov.w	fp, #0
 8006010:	2600      	movs	r6, #0
 8006012:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8006016:	e0d9      	b.n	80061cc <__kernel_rem_pio2+0x498>
 8006018:	2302      	movs	r3, #2
 800601a:	9302      	str	r3, [sp, #8]
 800601c:	e756      	b.n	8005ecc <__kernel_rem_pio2+0x198>
 800601e:	f8db 3000 	ldr.w	r3, [fp]
 8006022:	b954      	cbnz	r4, 800603a <__kernel_rem_pio2+0x306>
 8006024:	b123      	cbz	r3, 8006030 <__kernel_rem_pio2+0x2fc>
 8006026:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800602a:	f8cb 3000 	str.w	r3, [fp]
 800602e:	2301      	movs	r3, #1
 8006030:	461c      	mov	r4, r3
 8006032:	3201      	adds	r2, #1
 8006034:	f10b 0b04 	add.w	fp, fp, #4
 8006038:	e74f      	b.n	8005eda <__kernel_rem_pio2+0x1a6>
 800603a:	1acb      	subs	r3, r1, r3
 800603c:	f8cb 3000 	str.w	r3, [fp]
 8006040:	4623      	mov	r3, r4
 8006042:	e7f5      	b.n	8006030 <__kernel_rem_pio2+0x2fc>
 8006044:	08007838 	.word	0x08007838
 8006048:	40200000 	.word	0x40200000
 800604c:	3ff00000 	.word	0x3ff00000
 8006050:	3e700000 	.word	0x3e700000
 8006054:	41700000 	.word	0x41700000
 8006058:	3fe00000 	.word	0x3fe00000
 800605c:	080077f8 	.word	0x080077f8
 8006060:	1e7a      	subs	r2, r7, #1
 8006062:	ab0c      	add	r3, sp, #48	; 0x30
 8006064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006068:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800606c:	a90c      	add	r1, sp, #48	; 0x30
 800606e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006072:	e740      	b.n	8005ef6 <__kernel_rem_pio2+0x1c2>
 8006074:	1e7a      	subs	r2, r7, #1
 8006076:	ab0c      	add	r3, sp, #48	; 0x30
 8006078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800607c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006080:	e7f4      	b.n	800606c <__kernel_rem_pio2+0x338>
 8006082:	a90c      	add	r1, sp, #48	; 0x30
 8006084:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006088:	3b01      	subs	r3, #1
 800608a:	430a      	orrs	r2, r1
 800608c:	e791      	b.n	8005fb2 <__kernel_rem_pio2+0x27e>
 800608e:	3401      	adds	r4, #1
 8006090:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006094:	2a00      	cmp	r2, #0
 8006096:	d0fa      	beq.n	800608e <__kernel_rem_pio2+0x35a>
 8006098:	9b08      	ldr	r3, [sp, #32]
 800609a:	1c7e      	adds	r6, r7, #1
 800609c:	18fd      	adds	r5, r7, r3
 800609e:	ab20      	add	r3, sp, #128	; 0x80
 80060a0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80060a4:	443c      	add	r4, r7
 80060a6:	42b4      	cmp	r4, r6
 80060a8:	da04      	bge.n	80060b4 <__kernel_rem_pio2+0x380>
 80060aa:	4627      	mov	r7, r4
 80060ac:	e6c0      	b.n	8005e30 <__kernel_rem_pio2+0xfc>
 80060ae:	2401      	movs	r4, #1
 80060b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060b2:	e7ed      	b.n	8006090 <__kernel_rem_pio2+0x35c>
 80060b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060b6:	462f      	mov	r7, r5
 80060b8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80060bc:	f7fa f9a2 	bl	8000404 <__aeabi_i2d>
 80060c0:	f04f 0b00 	mov.w	fp, #0
 80060c4:	f04f 0800 	mov.w	r8, #0
 80060c8:	f04f 0900 	mov.w	r9, #0
 80060cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ce:	e8e7 0102 	strd	r0, r1, [r7], #8
 80060d2:	3b08      	subs	r3, #8
 80060d4:	9302      	str	r3, [sp, #8]
 80060d6:	9b06      	ldr	r3, [sp, #24]
 80060d8:	459b      	cmp	fp, r3
 80060da:	dd07      	ble.n	80060ec <__kernel_rem_pio2+0x3b8>
 80060dc:	ab70      	add	r3, sp, #448	; 0x1c0
 80060de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80060e2:	463d      	mov	r5, r7
 80060e4:	e9c3 8900 	strd	r8, r9, [r3]
 80060e8:	3601      	adds	r6, #1
 80060ea:	e7dc      	b.n	80060a6 <__kernel_rem_pio2+0x372>
 80060ec:	9902      	ldr	r1, [sp, #8]
 80060ee:	f10b 0b01 	add.w	fp, fp, #1
 80060f2:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80060f6:	9102      	str	r1, [sp, #8]
 80060f8:	e875 0102 	ldrd	r0, r1, [r5], #-8
 80060fc:	f7fa f9ec 	bl	80004d8 <__aeabi_dmul>
 8006100:	4602      	mov	r2, r0
 8006102:	460b      	mov	r3, r1
 8006104:	4640      	mov	r0, r8
 8006106:	4649      	mov	r1, r9
 8006108:	f7fa f830 	bl	800016c <__adddf3>
 800610c:	4680      	mov	r8, r0
 800610e:	4689      	mov	r9, r1
 8006110:	e7e1      	b.n	80060d6 <__kernel_rem_pio2+0x3a2>
 8006112:	3c01      	subs	r4, #1
 8006114:	e752      	b.n	8005fbc <__kernel_rem_pio2+0x288>
 8006116:	f1ca 0200 	rsb	r2, sl, #0
 800611a:	4640      	mov	r0, r8
 800611c:	4649      	mov	r1, r9
 800611e:	f000 ff47 	bl	8006fb0 <scalbn>
 8006122:	2200      	movs	r2, #0
 8006124:	4ba5      	ldr	r3, [pc, #660]	; (80063bc <__kernel_rem_pio2+0x688>)
 8006126:	4604      	mov	r4, r0
 8006128:	460d      	mov	r5, r1
 800612a:	f7fa fc5b 	bl	80009e4 <__aeabi_dcmpge>
 800612e:	b1f8      	cbz	r0, 8006170 <__kernel_rem_pio2+0x43c>
 8006130:	2200      	movs	r2, #0
 8006132:	4ba3      	ldr	r3, [pc, #652]	; (80063c0 <__kernel_rem_pio2+0x68c>)
 8006134:	4620      	mov	r0, r4
 8006136:	4629      	mov	r1, r5
 8006138:	f7fa f9ce 	bl	80004d8 <__aeabi_dmul>
 800613c:	f7fa fc66 	bl	8000a0c <__aeabi_d2iz>
 8006140:	4606      	mov	r6, r0
 8006142:	f7fa f95f 	bl	8000404 <__aeabi_i2d>
 8006146:	2200      	movs	r2, #0
 8006148:	4b9c      	ldr	r3, [pc, #624]	; (80063bc <__kernel_rem_pio2+0x688>)
 800614a:	f7fa f9c5 	bl	80004d8 <__aeabi_dmul>
 800614e:	460b      	mov	r3, r1
 8006150:	4602      	mov	r2, r0
 8006152:	4629      	mov	r1, r5
 8006154:	4620      	mov	r0, r4
 8006156:	f7fa f807 	bl	8000168 <__aeabi_dsub>
 800615a:	f7fa fc57 	bl	8000a0c <__aeabi_d2iz>
 800615e:	1c7c      	adds	r4, r7, #1
 8006160:	ab0c      	add	r3, sp, #48	; 0x30
 8006162:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8006166:	f10a 0a18 	add.w	sl, sl, #24
 800616a:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800616e:	e72d      	b.n	8005fcc <__kernel_rem_pio2+0x298>
 8006170:	4620      	mov	r0, r4
 8006172:	4629      	mov	r1, r5
 8006174:	f7fa fc4a 	bl	8000a0c <__aeabi_d2iz>
 8006178:	ab0c      	add	r3, sp, #48	; 0x30
 800617a:	463c      	mov	r4, r7
 800617c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8006180:	e724      	b.n	8005fcc <__kernel_rem_pio2+0x298>
 8006182:	ab0c      	add	r3, sp, #48	; 0x30
 8006184:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006188:	f7fa f93c 	bl	8000404 <__aeabi_i2d>
 800618c:	4632      	mov	r2, r6
 800618e:	463b      	mov	r3, r7
 8006190:	f7fa f9a2 	bl	80004d8 <__aeabi_dmul>
 8006194:	4642      	mov	r2, r8
 8006196:	e86b 0102 	strd	r0, r1, [fp], #-8
 800619a:	464b      	mov	r3, r9
 800619c:	4630      	mov	r0, r6
 800619e:	4639      	mov	r1, r7
 80061a0:	f7fa f99a 	bl	80004d8 <__aeabi_dmul>
 80061a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061a8:	4606      	mov	r6, r0
 80061aa:	460f      	mov	r7, r1
 80061ac:	e71f      	b.n	8005fee <__kernel_rem_pio2+0x2ba>
 80061ae:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80061b2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80061b6:	f7fa f98f 	bl	80004d8 <__aeabi_dmul>
 80061ba:	4602      	mov	r2, r0
 80061bc:	460b      	mov	r3, r1
 80061be:	4650      	mov	r0, sl
 80061c0:	4659      	mov	r1, fp
 80061c2:	f7f9 ffd3 	bl	800016c <__adddf3>
 80061c6:	4682      	mov	sl, r0
 80061c8:	468b      	mov	fp, r1
 80061ca:	3601      	adds	r6, #1
 80061cc:	9b04      	ldr	r3, [sp, #16]
 80061ce:	429e      	cmp	r6, r3
 80061d0:	dc01      	bgt.n	80061d6 <__kernel_rem_pio2+0x4a2>
 80061d2:	45b0      	cmp	r8, r6
 80061d4:	daeb      	bge.n	80061ae <__kernel_rem_pio2+0x47a>
 80061d6:	ab48      	add	r3, sp, #288	; 0x120
 80061d8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80061dc:	e9c3 ab00 	strd	sl, fp, [r3]
 80061e0:	3f01      	subs	r7, #1
 80061e2:	f108 0801 	add.w	r8, r8, #1
 80061e6:	e709      	b.n	8005ffc <__kernel_rem_pio2+0x2c8>
 80061e8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	dc09      	bgt.n	8006202 <__kernel_rem_pio2+0x4ce>
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	dc34      	bgt.n	800625c <__kernel_rem_pio2+0x528>
 80061f2:	d05e      	beq.n	80062b2 <__kernel_rem_pio2+0x57e>
 80061f4:	9b07      	ldr	r3, [sp, #28]
 80061f6:	f003 0007 	and.w	r0, r3, #7
 80061fa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80061fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006202:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8006204:	2b03      	cmp	r3, #3
 8006206:	d1f5      	bne.n	80061f4 <__kernel_rem_pio2+0x4c0>
 8006208:	9a06      	ldr	r2, [sp, #24]
 800620a:	ab48      	add	r3, sp, #288	; 0x120
 800620c:	441a      	add	r2, r3
 800620e:	4615      	mov	r5, r2
 8006210:	4692      	mov	sl, r2
 8006212:	46a3      	mov	fp, r4
 8006214:	f1bb 0f00 	cmp.w	fp, #0
 8006218:	dc7a      	bgt.n	8006310 <__kernel_rem_pio2+0x5dc>
 800621a:	46aa      	mov	sl, r5
 800621c:	46a3      	mov	fp, r4
 800621e:	f1bb 0f01 	cmp.w	fp, #1
 8006222:	f300 8094 	bgt.w	800634e <__kernel_rem_pio2+0x61a>
 8006226:	2700      	movs	r7, #0
 8006228:	463e      	mov	r6, r7
 800622a:	2c01      	cmp	r4, #1
 800622c:	f300 80ae 	bgt.w	800638c <__kernel_rem_pio2+0x658>
 8006230:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8006234:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8006238:	9b02      	ldr	r3, [sp, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	f040 80b0 	bne.w	80063a0 <__kernel_rem_pio2+0x66c>
 8006240:	4603      	mov	r3, r0
 8006242:	462a      	mov	r2, r5
 8006244:	9801      	ldr	r0, [sp, #4]
 8006246:	e9c0 2300 	strd	r2, r3, [r0]
 800624a:	4622      	mov	r2, r4
 800624c:	460b      	mov	r3, r1
 800624e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006252:	463a      	mov	r2, r7
 8006254:	4633      	mov	r3, r6
 8006256:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800625a:	e7cb      	b.n	80061f4 <__kernel_rem_pio2+0x4c0>
 800625c:	2000      	movs	r0, #0
 800625e:	9a06      	ldr	r2, [sp, #24]
 8006260:	ab48      	add	r3, sp, #288	; 0x120
 8006262:	441a      	add	r2, r3
 8006264:	4615      	mov	r5, r2
 8006266:	46a0      	mov	r8, r4
 8006268:	4601      	mov	r1, r0
 800626a:	f1b8 0f00 	cmp.w	r8, #0
 800626e:	da3c      	bge.n	80062ea <__kernel_rem_pio2+0x5b6>
 8006270:	9b02      	ldr	r3, [sp, #8]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d040      	beq.n	80062f8 <__kernel_rem_pio2+0x5c4>
 8006276:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800627a:	4602      	mov	r2, r0
 800627c:	462b      	mov	r3, r5
 800627e:	9d01      	ldr	r5, [sp, #4]
 8006280:	2601      	movs	r6, #1
 8006282:	e9c5 2300 	strd	r2, r3, [r5]
 8006286:	460b      	mov	r3, r1
 8006288:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800628c:	f7f9 ff6c 	bl	8000168 <__aeabi_dsub>
 8006290:	4684      	mov	ip, r0
 8006292:	460f      	mov	r7, r1
 8006294:	ad48      	add	r5, sp, #288	; 0x120
 8006296:	42b4      	cmp	r4, r6
 8006298:	f105 0508 	add.w	r5, r5, #8
 800629c:	da2e      	bge.n	80062fc <__kernel_rem_pio2+0x5c8>
 800629e:	9b02      	ldr	r3, [sp, #8]
 80062a0:	b10b      	cbz	r3, 80062a6 <__kernel_rem_pio2+0x572>
 80062a2:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80062a6:	4662      	mov	r2, ip
 80062a8:	463b      	mov	r3, r7
 80062aa:	9901      	ldr	r1, [sp, #4]
 80062ac:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80062b0:	e7a0      	b.n	80061f4 <__kernel_rem_pio2+0x4c0>
 80062b2:	9a06      	ldr	r2, [sp, #24]
 80062b4:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80062b6:	ab48      	add	r3, sp, #288	; 0x120
 80062b8:	441a      	add	r2, r3
 80062ba:	4615      	mov	r5, r2
 80062bc:	4637      	mov	r7, r6
 80062be:	2c00      	cmp	r4, #0
 80062c0:	da09      	bge.n	80062d6 <__kernel_rem_pio2+0x5a2>
 80062c2:	9b02      	ldr	r3, [sp, #8]
 80062c4:	b10b      	cbz	r3, 80062ca <__kernel_rem_pio2+0x596>
 80062c6:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80062ca:	4632      	mov	r2, r6
 80062cc:	463b      	mov	r3, r7
 80062ce:	9901      	ldr	r1, [sp, #4]
 80062d0:	e9c1 2300 	strd	r2, r3, [r1]
 80062d4:	e78e      	b.n	80061f4 <__kernel_rem_pio2+0x4c0>
 80062d6:	4630      	mov	r0, r6
 80062d8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80062dc:	4639      	mov	r1, r7
 80062de:	f7f9 ff45 	bl	800016c <__adddf3>
 80062e2:	3c01      	subs	r4, #1
 80062e4:	4606      	mov	r6, r0
 80062e6:	460f      	mov	r7, r1
 80062e8:	e7e9      	b.n	80062be <__kernel_rem_pio2+0x58a>
 80062ea:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80062ee:	f7f9 ff3d 	bl	800016c <__adddf3>
 80062f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80062f6:	e7b8      	b.n	800626a <__kernel_rem_pio2+0x536>
 80062f8:	460d      	mov	r5, r1
 80062fa:	e7be      	b.n	800627a <__kernel_rem_pio2+0x546>
 80062fc:	4660      	mov	r0, ip
 80062fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006302:	4639      	mov	r1, r7
 8006304:	f7f9 ff32 	bl	800016c <__adddf3>
 8006308:	3601      	adds	r6, #1
 800630a:	4684      	mov	ip, r0
 800630c:	460f      	mov	r7, r1
 800630e:	e7c2      	b.n	8006296 <__kernel_rem_pio2+0x562>
 8006310:	e9da 6700 	ldrd	r6, r7, [sl]
 8006314:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8006318:	4632      	mov	r2, r6
 800631a:	463b      	mov	r3, r7
 800631c:	4640      	mov	r0, r8
 800631e:	4649      	mov	r1, r9
 8006320:	f7f9 ff24 	bl	800016c <__adddf3>
 8006324:	4602      	mov	r2, r0
 8006326:	460b      	mov	r3, r1
 8006328:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800632c:	4640      	mov	r0, r8
 800632e:	4649      	mov	r1, r9
 8006330:	f7f9 ff1a 	bl	8000168 <__aeabi_dsub>
 8006334:	4632      	mov	r2, r6
 8006336:	463b      	mov	r3, r7
 8006338:	f7f9 ff18 	bl	800016c <__adddf3>
 800633c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006340:	e86a 0102 	strd	r0, r1, [sl], #-8
 8006344:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006348:	e9ca 2300 	strd	r2, r3, [sl]
 800634c:	e762      	b.n	8006214 <__kernel_rem_pio2+0x4e0>
 800634e:	e9da 8900 	ldrd	r8, r9, [sl]
 8006352:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8006356:	4642      	mov	r2, r8
 8006358:	464b      	mov	r3, r9
 800635a:	4630      	mov	r0, r6
 800635c:	4639      	mov	r1, r7
 800635e:	f7f9 ff05 	bl	800016c <__adddf3>
 8006362:	4602      	mov	r2, r0
 8006364:	460b      	mov	r3, r1
 8006366:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800636a:	4630      	mov	r0, r6
 800636c:	4639      	mov	r1, r7
 800636e:	f7f9 fefb 	bl	8000168 <__aeabi_dsub>
 8006372:	4642      	mov	r2, r8
 8006374:	464b      	mov	r3, r9
 8006376:	f7f9 fef9 	bl	800016c <__adddf3>
 800637a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800637e:	e86a 0102 	strd	r0, r1, [sl], #-8
 8006382:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006386:	e9ca 2300 	strd	r2, r3, [sl]
 800638a:	e748      	b.n	800621e <__kernel_rem_pio2+0x4ea>
 800638c:	4638      	mov	r0, r7
 800638e:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8006392:	4631      	mov	r1, r6
 8006394:	f7f9 feea 	bl	800016c <__adddf3>
 8006398:	3c01      	subs	r4, #1
 800639a:	4607      	mov	r7, r0
 800639c:	460e      	mov	r6, r1
 800639e:	e744      	b.n	800622a <__kernel_rem_pio2+0x4f6>
 80063a0:	9b01      	ldr	r3, [sp, #4]
 80063a2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80063a6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80063aa:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80063ae:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80063b2:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80063b6:	601d      	str	r5, [r3, #0]
 80063b8:	615e      	str	r6, [r3, #20]
 80063ba:	e71b      	b.n	80061f4 <__kernel_rem_pio2+0x4c0>
 80063bc:	41700000 	.word	0x41700000
 80063c0:	3e700000 	.word	0x3e700000
 80063c4:	00000000 	.word	0x00000000

080063c8 <__kernel_tan>:
 80063c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063cc:	461f      	mov	r7, r3
 80063ce:	4bda      	ldr	r3, [pc, #872]	; (8006738 <__kernel_tan+0x370>)
 80063d0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80063d4:	b089      	sub	sp, #36	; 0x24
 80063d6:	429e      	cmp	r6, r3
 80063d8:	4604      	mov	r4, r0
 80063da:	460d      	mov	r5, r1
 80063dc:	4682      	mov	sl, r0
 80063de:	468b      	mov	fp, r1
 80063e0:	4690      	mov	r8, r2
 80063e2:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 80063e6:	9105      	str	r1, [sp, #20]
 80063e8:	dc21      	bgt.n	800642e <__kernel_tan+0x66>
 80063ea:	f7fa fb0f 	bl	8000a0c <__aeabi_d2iz>
 80063ee:	2800      	cmp	r0, #0
 80063f0:	d140      	bne.n	8006474 <__kernel_tan+0xac>
 80063f2:	f109 0301 	add.w	r3, r9, #1
 80063f6:	4323      	orrs	r3, r4
 80063f8:	4333      	orrs	r3, r6
 80063fa:	4622      	mov	r2, r4
 80063fc:	d110      	bne.n	8006420 <__kernel_tan+0x58>
 80063fe:	4620      	mov	r0, r4
 8006400:	4629      	mov	r1, r5
 8006402:	f000 fd51 	bl	8006ea8 <fabs>
 8006406:	4602      	mov	r2, r0
 8006408:	2000      	movs	r0, #0
 800640a:	460b      	mov	r3, r1
 800640c:	49cb      	ldr	r1, [pc, #812]	; (800673c <__kernel_tan+0x374>)
 800640e:	f7fa f98d 	bl	800072c <__aeabi_ddiv>
 8006412:	4682      	mov	sl, r0
 8006414:	468b      	mov	fp, r1
 8006416:	4650      	mov	r0, sl
 8006418:	4659      	mov	r1, fp
 800641a:	b009      	add	sp, #36	; 0x24
 800641c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006420:	f1b9 0f01 	cmp.w	r9, #1
 8006424:	d0f7      	beq.n	8006416 <__kernel_tan+0x4e>
 8006426:	462b      	mov	r3, r5
 8006428:	2000      	movs	r0, #0
 800642a:	49c5      	ldr	r1, [pc, #788]	; (8006740 <__kernel_tan+0x378>)
 800642c:	e7ef      	b.n	800640e <__kernel_tan+0x46>
 800642e:	4bc5      	ldr	r3, [pc, #788]	; (8006744 <__kernel_tan+0x37c>)
 8006430:	429e      	cmp	r6, r3
 8006432:	dd1f      	ble.n	8006474 <__kernel_tan+0xac>
 8006434:	2900      	cmp	r1, #0
 8006436:	da04      	bge.n	8006442 <__kernel_tan+0x7a>
 8006438:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800643c:	469b      	mov	fp, r3
 800643e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8006442:	4652      	mov	r2, sl
 8006444:	a19e      	add	r1, pc, #632	; (adr r1, 80066c0 <__kernel_tan+0x2f8>)
 8006446:	e9d1 0100 	ldrd	r0, r1, [r1]
 800644a:	465b      	mov	r3, fp
 800644c:	f7f9 fe8c 	bl	8000168 <__aeabi_dsub>
 8006450:	4604      	mov	r4, r0
 8006452:	460d      	mov	r5, r1
 8006454:	a19c      	add	r1, pc, #624	; (adr r1, 80066c8 <__kernel_tan+0x300>)
 8006456:	e9d1 0100 	ldrd	r0, r1, [r1]
 800645a:	4642      	mov	r2, r8
 800645c:	463b      	mov	r3, r7
 800645e:	f7f9 fe83 	bl	8000168 <__aeabi_dsub>
 8006462:	4622      	mov	r2, r4
 8006464:	462b      	mov	r3, r5
 8006466:	f7f9 fe81 	bl	800016c <__adddf3>
 800646a:	f04f 0800 	mov.w	r8, #0
 800646e:	4682      	mov	sl, r0
 8006470:	468b      	mov	fp, r1
 8006472:	4647      	mov	r7, r8
 8006474:	4652      	mov	r2, sl
 8006476:	465b      	mov	r3, fp
 8006478:	4650      	mov	r0, sl
 800647a:	4659      	mov	r1, fp
 800647c:	f7fa f82c 	bl	80004d8 <__aeabi_dmul>
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	e9cd 2300 	strd	r2, r3, [sp]
 8006488:	f7fa f826 	bl	80004d8 <__aeabi_dmul>
 800648c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006490:	4604      	mov	r4, r0
 8006492:	460d      	mov	r5, r1
 8006494:	4650      	mov	r0, sl
 8006496:	4659      	mov	r1, fp
 8006498:	f7fa f81e 	bl	80004d8 <__aeabi_dmul>
 800649c:	a38c      	add	r3, pc, #560	; (adr r3, 80066d0 <__kernel_tan+0x308>)
 800649e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064a6:	4620      	mov	r0, r4
 80064a8:	4629      	mov	r1, r5
 80064aa:	f7fa f815 	bl	80004d8 <__aeabi_dmul>
 80064ae:	a38a      	add	r3, pc, #552	; (adr r3, 80066d8 <__kernel_tan+0x310>)
 80064b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b4:	f7f9 fe5a 	bl	800016c <__adddf3>
 80064b8:	4622      	mov	r2, r4
 80064ba:	462b      	mov	r3, r5
 80064bc:	f7fa f80c 	bl	80004d8 <__aeabi_dmul>
 80064c0:	a387      	add	r3, pc, #540	; (adr r3, 80066e0 <__kernel_tan+0x318>)
 80064c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c6:	f7f9 fe51 	bl	800016c <__adddf3>
 80064ca:	4622      	mov	r2, r4
 80064cc:	462b      	mov	r3, r5
 80064ce:	f7fa f803 	bl	80004d8 <__aeabi_dmul>
 80064d2:	a385      	add	r3, pc, #532	; (adr r3, 80066e8 <__kernel_tan+0x320>)
 80064d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d8:	f7f9 fe48 	bl	800016c <__adddf3>
 80064dc:	4622      	mov	r2, r4
 80064de:	462b      	mov	r3, r5
 80064e0:	f7f9 fffa 	bl	80004d8 <__aeabi_dmul>
 80064e4:	a382      	add	r3, pc, #520	; (adr r3, 80066f0 <__kernel_tan+0x328>)
 80064e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ea:	f7f9 fe3f 	bl	800016c <__adddf3>
 80064ee:	4622      	mov	r2, r4
 80064f0:	462b      	mov	r3, r5
 80064f2:	f7f9 fff1 	bl	80004d8 <__aeabi_dmul>
 80064f6:	a380      	add	r3, pc, #512	; (adr r3, 80066f8 <__kernel_tan+0x330>)
 80064f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fc:	f7f9 fe36 	bl	800016c <__adddf3>
 8006500:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006504:	f7f9 ffe8 	bl	80004d8 <__aeabi_dmul>
 8006508:	a37d      	add	r3, pc, #500	; (adr r3, 8006700 <__kernel_tan+0x338>)
 800650a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006512:	4620      	mov	r0, r4
 8006514:	4629      	mov	r1, r5
 8006516:	f7f9 ffdf 	bl	80004d8 <__aeabi_dmul>
 800651a:	a37b      	add	r3, pc, #492	; (adr r3, 8006708 <__kernel_tan+0x340>)
 800651c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006520:	f7f9 fe24 	bl	800016c <__adddf3>
 8006524:	4622      	mov	r2, r4
 8006526:	462b      	mov	r3, r5
 8006528:	f7f9 ffd6 	bl	80004d8 <__aeabi_dmul>
 800652c:	a378      	add	r3, pc, #480	; (adr r3, 8006710 <__kernel_tan+0x348>)
 800652e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006532:	f7f9 fe1b 	bl	800016c <__adddf3>
 8006536:	4622      	mov	r2, r4
 8006538:	462b      	mov	r3, r5
 800653a:	f7f9 ffcd 	bl	80004d8 <__aeabi_dmul>
 800653e:	a376      	add	r3, pc, #472	; (adr r3, 8006718 <__kernel_tan+0x350>)
 8006540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006544:	f7f9 fe12 	bl	800016c <__adddf3>
 8006548:	4622      	mov	r2, r4
 800654a:	462b      	mov	r3, r5
 800654c:	f7f9 ffc4 	bl	80004d8 <__aeabi_dmul>
 8006550:	a373      	add	r3, pc, #460	; (adr r3, 8006720 <__kernel_tan+0x358>)
 8006552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006556:	f7f9 fe09 	bl	800016c <__adddf3>
 800655a:	4622      	mov	r2, r4
 800655c:	462b      	mov	r3, r5
 800655e:	f7f9 ffbb 	bl	80004d8 <__aeabi_dmul>
 8006562:	a371      	add	r3, pc, #452	; (adr r3, 8006728 <__kernel_tan+0x360>)
 8006564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006568:	f7f9 fe00 	bl	800016c <__adddf3>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006574:	f7f9 fdfa 	bl	800016c <__adddf3>
 8006578:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800657c:	f7f9 ffac 	bl	80004d8 <__aeabi_dmul>
 8006580:	4642      	mov	r2, r8
 8006582:	463b      	mov	r3, r7
 8006584:	f7f9 fdf2 	bl	800016c <__adddf3>
 8006588:	e9dd 2300 	ldrd	r2, r3, [sp]
 800658c:	f7f9 ffa4 	bl	80004d8 <__aeabi_dmul>
 8006590:	4642      	mov	r2, r8
 8006592:	463b      	mov	r3, r7
 8006594:	f7f9 fdea 	bl	800016c <__adddf3>
 8006598:	a365      	add	r3, pc, #404	; (adr r3, 8006730 <__kernel_tan+0x368>)
 800659a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659e:	4604      	mov	r4, r0
 80065a0:	460d      	mov	r5, r1
 80065a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065a6:	f7f9 ff97 	bl	80004d8 <__aeabi_dmul>
 80065aa:	4622      	mov	r2, r4
 80065ac:	462b      	mov	r3, r5
 80065ae:	f7f9 fddd 	bl	800016c <__adddf3>
 80065b2:	460b      	mov	r3, r1
 80065b4:	e9cd 0100 	strd	r0, r1, [sp]
 80065b8:	4602      	mov	r2, r0
 80065ba:	4659      	mov	r1, fp
 80065bc:	4650      	mov	r0, sl
 80065be:	f7f9 fdd5 	bl	800016c <__adddf3>
 80065c2:	4b60      	ldr	r3, [pc, #384]	; (8006744 <__kernel_tan+0x37c>)
 80065c4:	4604      	mov	r4, r0
 80065c6:	429e      	cmp	r6, r3
 80065c8:	460d      	mov	r5, r1
 80065ca:	dd3e      	ble.n	800664a <__kernel_tan+0x282>
 80065cc:	4648      	mov	r0, r9
 80065ce:	f7f9 ff19 	bl	8000404 <__aeabi_i2d>
 80065d2:	4622      	mov	r2, r4
 80065d4:	4680      	mov	r8, r0
 80065d6:	4689      	mov	r9, r1
 80065d8:	462b      	mov	r3, r5
 80065da:	4620      	mov	r0, r4
 80065dc:	4629      	mov	r1, r5
 80065de:	f7f9 ff7b 	bl	80004d8 <__aeabi_dmul>
 80065e2:	4642      	mov	r2, r8
 80065e4:	4606      	mov	r6, r0
 80065e6:	460f      	mov	r7, r1
 80065e8:	464b      	mov	r3, r9
 80065ea:	4620      	mov	r0, r4
 80065ec:	4629      	mov	r1, r5
 80065ee:	f7f9 fdbd 	bl	800016c <__adddf3>
 80065f2:	4602      	mov	r2, r0
 80065f4:	460b      	mov	r3, r1
 80065f6:	4630      	mov	r0, r6
 80065f8:	4639      	mov	r1, r7
 80065fa:	f7fa f897 	bl	800072c <__aeabi_ddiv>
 80065fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006602:	f7f9 fdb1 	bl	8000168 <__aeabi_dsub>
 8006606:	4602      	mov	r2, r0
 8006608:	460b      	mov	r3, r1
 800660a:	4650      	mov	r0, sl
 800660c:	4659      	mov	r1, fp
 800660e:	f7f9 fdab 	bl	8000168 <__aeabi_dsub>
 8006612:	4602      	mov	r2, r0
 8006614:	460b      	mov	r3, r1
 8006616:	f7f9 fda9 	bl	800016c <__adddf3>
 800661a:	4602      	mov	r2, r0
 800661c:	460b      	mov	r3, r1
 800661e:	4640      	mov	r0, r8
 8006620:	4649      	mov	r1, r9
 8006622:	f7f9 fda1 	bl	8000168 <__aeabi_dsub>
 8006626:	9b05      	ldr	r3, [sp, #20]
 8006628:	4604      	mov	r4, r0
 800662a:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800662e:	f00a 0a02 	and.w	sl, sl, #2
 8006632:	f1ca 0001 	rsb	r0, sl, #1
 8006636:	460d      	mov	r5, r1
 8006638:	f7f9 fee4 	bl	8000404 <__aeabi_i2d>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	4620      	mov	r0, r4
 8006642:	4629      	mov	r1, r5
 8006644:	f7f9 ff48 	bl	80004d8 <__aeabi_dmul>
 8006648:	e6e3      	b.n	8006412 <__kernel_tan+0x4a>
 800664a:	f1b9 0f01 	cmp.w	r9, #1
 800664e:	d07b      	beq.n	8006748 <__kernel_tan+0x380>
 8006650:	460f      	mov	r7, r1
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	2000      	movs	r0, #0
 8006658:	4939      	ldr	r1, [pc, #228]	; (8006740 <__kernel_tan+0x378>)
 800665a:	f7fa f867 	bl	800072c <__aeabi_ddiv>
 800665e:	2600      	movs	r6, #0
 8006660:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006664:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006668:	4652      	mov	r2, sl
 800666a:	465b      	mov	r3, fp
 800666c:	4630      	mov	r0, r6
 800666e:	4639      	mov	r1, r7
 8006670:	f7f9 fd7a 	bl	8000168 <__aeabi_dsub>
 8006674:	4602      	mov	r2, r0
 8006676:	460b      	mov	r3, r1
 8006678:	e9dd 0100 	ldrd	r0, r1, [sp]
 800667c:	f7f9 fd74 	bl	8000168 <__aeabi_dsub>
 8006680:	4632      	mov	r2, r6
 8006682:	462b      	mov	r3, r5
 8006684:	f7f9 ff28 	bl	80004d8 <__aeabi_dmul>
 8006688:	4632      	mov	r2, r6
 800668a:	4682      	mov	sl, r0
 800668c:	468b      	mov	fp, r1
 800668e:	462b      	mov	r3, r5
 8006690:	4630      	mov	r0, r6
 8006692:	4639      	mov	r1, r7
 8006694:	f7f9 ff20 	bl	80004d8 <__aeabi_dmul>
 8006698:	2200      	movs	r2, #0
 800669a:	4b28      	ldr	r3, [pc, #160]	; (800673c <__kernel_tan+0x374>)
 800669c:	f7f9 fd66 	bl	800016c <__adddf3>
 80066a0:	4602      	mov	r2, r0
 80066a2:	460b      	mov	r3, r1
 80066a4:	4650      	mov	r0, sl
 80066a6:	4659      	mov	r1, fp
 80066a8:	f7f9 fd60 	bl	800016c <__adddf3>
 80066ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066b0:	f7f9 ff12 	bl	80004d8 <__aeabi_dmul>
 80066b4:	4632      	mov	r2, r6
 80066b6:	462b      	mov	r3, r5
 80066b8:	f7f9 fd58 	bl	800016c <__adddf3>
 80066bc:	e6a9      	b.n	8006412 <__kernel_tan+0x4a>
 80066be:	bf00      	nop
 80066c0:	54442d18 	.word	0x54442d18
 80066c4:	3fe921fb 	.word	0x3fe921fb
 80066c8:	33145c07 	.word	0x33145c07
 80066cc:	3c81a626 	.word	0x3c81a626
 80066d0:	74bf7ad4 	.word	0x74bf7ad4
 80066d4:	3efb2a70 	.word	0x3efb2a70
 80066d8:	32f0a7e9 	.word	0x32f0a7e9
 80066dc:	3f12b80f 	.word	0x3f12b80f
 80066e0:	1a8d1068 	.word	0x1a8d1068
 80066e4:	3f3026f7 	.word	0x3f3026f7
 80066e8:	fee08315 	.word	0xfee08315
 80066ec:	3f57dbc8 	.word	0x3f57dbc8
 80066f0:	e96e8493 	.word	0xe96e8493
 80066f4:	3f8226e3 	.word	0x3f8226e3
 80066f8:	1bb341fe 	.word	0x1bb341fe
 80066fc:	3faba1ba 	.word	0x3faba1ba
 8006700:	db605373 	.word	0xdb605373
 8006704:	bef375cb 	.word	0xbef375cb
 8006708:	a03792a6 	.word	0xa03792a6
 800670c:	3f147e88 	.word	0x3f147e88
 8006710:	f2f26501 	.word	0xf2f26501
 8006714:	3f4344d8 	.word	0x3f4344d8
 8006718:	c9560328 	.word	0xc9560328
 800671c:	3f6d6d22 	.word	0x3f6d6d22
 8006720:	8406d637 	.word	0x8406d637
 8006724:	3f9664f4 	.word	0x3f9664f4
 8006728:	1110fe7a 	.word	0x1110fe7a
 800672c:	3fc11111 	.word	0x3fc11111
 8006730:	55555563 	.word	0x55555563
 8006734:	3fd55555 	.word	0x3fd55555
 8006738:	3e2fffff 	.word	0x3e2fffff
 800673c:	3ff00000 	.word	0x3ff00000
 8006740:	bff00000 	.word	0xbff00000
 8006744:	3fe59427 	.word	0x3fe59427
 8006748:	4682      	mov	sl, r0
 800674a:	468b      	mov	fp, r1
 800674c:	e663      	b.n	8006416 <__kernel_tan+0x4e>
 800674e:	bf00      	nop

08006750 <__kernel_cosf>:
 8006750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006754:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8006758:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800675c:	4606      	mov	r6, r0
 800675e:	4688      	mov	r8, r1
 8006760:	da03      	bge.n	800676a <__kernel_cosf+0x1a>
 8006762:	f7fa fc9f 	bl	80010a4 <__aeabi_f2iz>
 8006766:	2800      	cmp	r0, #0
 8006768:	d05c      	beq.n	8006824 <__kernel_cosf+0xd4>
 800676a:	4631      	mov	r1, r6
 800676c:	4630      	mov	r0, r6
 800676e:	f7fa fad3 	bl	8000d18 <__aeabi_fmul>
 8006772:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006776:	4605      	mov	r5, r0
 8006778:	f7fa face 	bl	8000d18 <__aeabi_fmul>
 800677c:	492b      	ldr	r1, [pc, #172]	; (800682c <__kernel_cosf+0xdc>)
 800677e:	4607      	mov	r7, r0
 8006780:	4628      	mov	r0, r5
 8006782:	f7fa fac9 	bl	8000d18 <__aeabi_fmul>
 8006786:	492a      	ldr	r1, [pc, #168]	; (8006830 <__kernel_cosf+0xe0>)
 8006788:	f7fa f9be 	bl	8000b08 <__addsf3>
 800678c:	4629      	mov	r1, r5
 800678e:	f7fa fac3 	bl	8000d18 <__aeabi_fmul>
 8006792:	4928      	ldr	r1, [pc, #160]	; (8006834 <__kernel_cosf+0xe4>)
 8006794:	f7fa f9b6 	bl	8000b04 <__aeabi_fsub>
 8006798:	4629      	mov	r1, r5
 800679a:	f7fa fabd 	bl	8000d18 <__aeabi_fmul>
 800679e:	4926      	ldr	r1, [pc, #152]	; (8006838 <__kernel_cosf+0xe8>)
 80067a0:	f7fa f9b2 	bl	8000b08 <__addsf3>
 80067a4:	4629      	mov	r1, r5
 80067a6:	f7fa fab7 	bl	8000d18 <__aeabi_fmul>
 80067aa:	4924      	ldr	r1, [pc, #144]	; (800683c <__kernel_cosf+0xec>)
 80067ac:	f7fa f9aa 	bl	8000b04 <__aeabi_fsub>
 80067b0:	4629      	mov	r1, r5
 80067b2:	f7fa fab1 	bl	8000d18 <__aeabi_fmul>
 80067b6:	4922      	ldr	r1, [pc, #136]	; (8006840 <__kernel_cosf+0xf0>)
 80067b8:	f7fa f9a6 	bl	8000b08 <__addsf3>
 80067bc:	4629      	mov	r1, r5
 80067be:	f7fa faab 	bl	8000d18 <__aeabi_fmul>
 80067c2:	4629      	mov	r1, r5
 80067c4:	f7fa faa8 	bl	8000d18 <__aeabi_fmul>
 80067c8:	4641      	mov	r1, r8
 80067ca:	4605      	mov	r5, r0
 80067cc:	4630      	mov	r0, r6
 80067ce:	f7fa faa3 	bl	8000d18 <__aeabi_fmul>
 80067d2:	4601      	mov	r1, r0
 80067d4:	4628      	mov	r0, r5
 80067d6:	f7fa f995 	bl	8000b04 <__aeabi_fsub>
 80067da:	4b1a      	ldr	r3, [pc, #104]	; (8006844 <__kernel_cosf+0xf4>)
 80067dc:	4605      	mov	r5, r0
 80067de:	429c      	cmp	r4, r3
 80067e0:	dc0a      	bgt.n	80067f8 <__kernel_cosf+0xa8>
 80067e2:	4601      	mov	r1, r0
 80067e4:	4638      	mov	r0, r7
 80067e6:	f7fa f98d 	bl	8000b04 <__aeabi_fsub>
 80067ea:	4601      	mov	r1, r0
 80067ec:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80067f0:	f7fa f988 	bl	8000b04 <__aeabi_fsub>
 80067f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067f8:	4b13      	ldr	r3, [pc, #76]	; (8006848 <__kernel_cosf+0xf8>)
 80067fa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80067fe:	429c      	cmp	r4, r3
 8006800:	bfcc      	ite	gt
 8006802:	4c12      	ldrgt	r4, [pc, #72]	; (800684c <__kernel_cosf+0xfc>)
 8006804:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8006808:	4621      	mov	r1, r4
 800680a:	f7fa f97b 	bl	8000b04 <__aeabi_fsub>
 800680e:	4621      	mov	r1, r4
 8006810:	4606      	mov	r6, r0
 8006812:	4638      	mov	r0, r7
 8006814:	f7fa f976 	bl	8000b04 <__aeabi_fsub>
 8006818:	4629      	mov	r1, r5
 800681a:	f7fa f973 	bl	8000b04 <__aeabi_fsub>
 800681e:	4601      	mov	r1, r0
 8006820:	4630      	mov	r0, r6
 8006822:	e7e5      	b.n	80067f0 <__kernel_cosf+0xa0>
 8006824:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006828:	e7e4      	b.n	80067f4 <__kernel_cosf+0xa4>
 800682a:	bf00      	nop
 800682c:	ad47d74e 	.word	0xad47d74e
 8006830:	310f74f6 	.word	0x310f74f6
 8006834:	3493f27c 	.word	0x3493f27c
 8006838:	37d00d01 	.word	0x37d00d01
 800683c:	3ab60b61 	.word	0x3ab60b61
 8006840:	3d2aaaab 	.word	0x3d2aaaab
 8006844:	3e999999 	.word	0x3e999999
 8006848:	3f480000 	.word	0x3f480000
 800684c:	3e900000 	.word	0x3e900000

08006850 <__kernel_rem_pio2f>:
 8006850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006854:	b0db      	sub	sp, #364	; 0x16c
 8006856:	9202      	str	r2, [sp, #8]
 8006858:	9304      	str	r3, [sp, #16]
 800685a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800685c:	4bc5      	ldr	r3, [pc, #788]	; (8006b74 <__kernel_rem_pio2f+0x324>)
 800685e:	9005      	str	r0, [sp, #20]
 8006860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006864:	9100      	str	r1, [sp, #0]
 8006866:	9301      	str	r3, [sp, #4]
 8006868:	9b04      	ldr	r3, [sp, #16]
 800686a:	3b01      	subs	r3, #1
 800686c:	9303      	str	r3, [sp, #12]
 800686e:	9b02      	ldr	r3, [sp, #8]
 8006870:	1d1a      	adds	r2, r3, #4
 8006872:	f2c0 809b 	blt.w	80069ac <__kernel_rem_pio2f+0x15c>
 8006876:	1edc      	subs	r4, r3, #3
 8006878:	bf48      	it	mi
 800687a:	1d1c      	addmi	r4, r3, #4
 800687c:	10e4      	asrs	r4, r4, #3
 800687e:	2500      	movs	r5, #0
 8006880:	f04f 0a00 	mov.w	sl, #0
 8006884:	1c67      	adds	r7, r4, #1
 8006886:	00fb      	lsls	r3, r7, #3
 8006888:	9306      	str	r3, [sp, #24]
 800688a:	9b02      	ldr	r3, [sp, #8]
 800688c:	9a03      	ldr	r2, [sp, #12]
 800688e:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8006892:	9b01      	ldr	r3, [sp, #4]
 8006894:	1aa6      	subs	r6, r4, r2
 8006896:	eb03 0802 	add.w	r8, r3, r2
 800689a:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800689c:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 80068a0:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 80068a4:	4545      	cmp	r5, r8
 80068a6:	f340 8083 	ble.w	80069b0 <__kernel_rem_pio2f+0x160>
 80068aa:	f04f 0800 	mov.w	r8, #0
 80068ae:	f04f 0b00 	mov.w	fp, #0
 80068b2:	9b04      	ldr	r3, [sp, #16]
 80068b4:	aa1e      	add	r2, sp, #120	; 0x78
 80068b6:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80068ba:	ab46      	add	r3, sp, #280	; 0x118
 80068bc:	9a01      	ldr	r2, [sp, #4]
 80068be:	4590      	cmp	r8, r2
 80068c0:	f340 809c 	ble.w	80069fc <__kernel_rem_pio2f+0x1ac>
 80068c4:	4613      	mov	r3, r2
 80068c6:	aa0a      	add	r2, sp, #40	; 0x28
 80068c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80068cc:	9308      	str	r3, [sp, #32]
 80068ce:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80068d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80068d4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80068d8:	9307      	str	r3, [sp, #28]
 80068da:	ad0a      	add	r5, sp, #40	; 0x28
 80068dc:	462e      	mov	r6, r5
 80068de:	46c3      	mov	fp, r8
 80068e0:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 80068e4:	ab5a      	add	r3, sp, #360	; 0x168
 80068e6:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80068ea:	f853 4c50 	ldr.w	r4, [r3, #-80]
 80068ee:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 80068f2:	f1bb 0f00 	cmp.w	fp, #0
 80068f6:	f300 8086 	bgt.w	8006a06 <__kernel_rem_pio2f+0x1b6>
 80068fa:	4639      	mov	r1, r7
 80068fc:	4620      	mov	r0, r4
 80068fe:	f000 fc23 	bl	8007148 <scalbnf>
 8006902:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8006906:	4604      	mov	r4, r0
 8006908:	f7fa fa06 	bl	8000d18 <__aeabi_fmul>
 800690c:	f000 fbda 	bl	80070c4 <floorf>
 8006910:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8006914:	f7fa fa00 	bl	8000d18 <__aeabi_fmul>
 8006918:	4601      	mov	r1, r0
 800691a:	4620      	mov	r0, r4
 800691c:	f7fa f8f2 	bl	8000b04 <__aeabi_fsub>
 8006920:	4604      	mov	r4, r0
 8006922:	f7fa fbbf 	bl	80010a4 <__aeabi_f2iz>
 8006926:	4606      	mov	r6, r0
 8006928:	f7fa f9a2 	bl	8000c70 <__aeabi_i2f>
 800692c:	4601      	mov	r1, r0
 800692e:	4620      	mov	r0, r4
 8006930:	f7fa f8e8 	bl	8000b04 <__aeabi_fsub>
 8006934:	2f00      	cmp	r7, #0
 8006936:	4681      	mov	r9, r0
 8006938:	f340 8084 	ble.w	8006a44 <__kernel_rem_pio2f+0x1f4>
 800693c:	f108 32ff 	add.w	r2, r8, #4294967295
 8006940:	ab0a      	add	r3, sp, #40	; 0x28
 8006942:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8006946:	f1c7 0108 	rsb	r1, r7, #8
 800694a:	fa44 f301 	asr.w	r3, r4, r1
 800694e:	441e      	add	r6, r3
 8006950:	408b      	lsls	r3, r1
 8006952:	1ae4      	subs	r4, r4, r3
 8006954:	f1c7 0007 	rsb	r0, r7, #7
 8006958:	ab0a      	add	r3, sp, #40	; 0x28
 800695a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800695e:	4104      	asrs	r4, r0
 8006960:	2c00      	cmp	r4, #0
 8006962:	dd7e      	ble.n	8006a62 <__kernel_rem_pio2f+0x212>
 8006964:	2200      	movs	r2, #0
 8006966:	4692      	mov	sl, r2
 8006968:	3601      	adds	r6, #1
 800696a:	4590      	cmp	r8, r2
 800696c:	f300 80b0 	bgt.w	8006ad0 <__kernel_rem_pio2f+0x280>
 8006970:	2f00      	cmp	r7, #0
 8006972:	dd05      	ble.n	8006980 <__kernel_rem_pio2f+0x130>
 8006974:	2f01      	cmp	r7, #1
 8006976:	f000 80bd 	beq.w	8006af4 <__kernel_rem_pio2f+0x2a4>
 800697a:	2f02      	cmp	r7, #2
 800697c:	f000 80c5 	beq.w	8006b0a <__kernel_rem_pio2f+0x2ba>
 8006980:	2c02      	cmp	r4, #2
 8006982:	d16e      	bne.n	8006a62 <__kernel_rem_pio2f+0x212>
 8006984:	4649      	mov	r1, r9
 8006986:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800698a:	f7fa f8bb 	bl	8000b04 <__aeabi_fsub>
 800698e:	4681      	mov	r9, r0
 8006990:	f1ba 0f00 	cmp.w	sl, #0
 8006994:	d065      	beq.n	8006a62 <__kernel_rem_pio2f+0x212>
 8006996:	4639      	mov	r1, r7
 8006998:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800699c:	f000 fbd4 	bl	8007148 <scalbnf>
 80069a0:	4601      	mov	r1, r0
 80069a2:	4648      	mov	r0, r9
 80069a4:	f7fa f8ae 	bl	8000b04 <__aeabi_fsub>
 80069a8:	4681      	mov	r9, r0
 80069aa:	e05a      	b.n	8006a62 <__kernel_rem_pio2f+0x212>
 80069ac:	2400      	movs	r4, #0
 80069ae:	e766      	b.n	800687e <__kernel_rem_pio2f+0x2e>
 80069b0:	42ee      	cmn	r6, r5
 80069b2:	d407      	bmi.n	80069c4 <__kernel_rem_pio2f+0x174>
 80069b4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80069b8:	f7fa f95a 	bl	8000c70 <__aeabi_i2f>
 80069bc:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 80069c0:	3501      	adds	r5, #1
 80069c2:	e76f      	b.n	80068a4 <__kernel_rem_pio2f+0x54>
 80069c4:	4650      	mov	r0, sl
 80069c6:	e7f9      	b.n	80069bc <__kernel_rem_pio2f+0x16c>
 80069c8:	9b05      	ldr	r3, [sp, #20]
 80069ca:	f8da 1000 	ldr.w	r1, [sl]
 80069ce:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 80069d2:	f7fa f9a1 	bl	8000d18 <__aeabi_fmul>
 80069d6:	4601      	mov	r1, r0
 80069d8:	4630      	mov	r0, r6
 80069da:	f7fa f895 	bl	8000b08 <__addsf3>
 80069de:	4606      	mov	r6, r0
 80069e0:	f109 0901 	add.w	r9, r9, #1
 80069e4:	ab46      	add	r3, sp, #280	; 0x118
 80069e6:	9a03      	ldr	r2, [sp, #12]
 80069e8:	f1aa 0a04 	sub.w	sl, sl, #4
 80069ec:	4591      	cmp	r9, r2
 80069ee:	ddeb      	ble.n	80069c8 <__kernel_rem_pio2f+0x178>
 80069f0:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80069f4:	3504      	adds	r5, #4
 80069f6:	f108 0801 	add.w	r8, r8, #1
 80069fa:	e75f      	b.n	80068bc <__kernel_rem_pio2f+0x6c>
 80069fc:	46aa      	mov	sl, r5
 80069fe:	465e      	mov	r6, fp
 8006a00:	f04f 0900 	mov.w	r9, #0
 8006a04:	e7ef      	b.n	80069e6 <__kernel_rem_pio2f+0x196>
 8006a06:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f7fa f984 	bl	8000d18 <__aeabi_fmul>
 8006a10:	f7fa fb48 	bl	80010a4 <__aeabi_f2iz>
 8006a14:	f7fa f92c 	bl	8000c70 <__aeabi_i2f>
 8006a18:	4649      	mov	r1, r9
 8006a1a:	9009      	str	r0, [sp, #36]	; 0x24
 8006a1c:	f7fa f97c 	bl	8000d18 <__aeabi_fmul>
 8006a20:	4601      	mov	r1, r0
 8006a22:	4620      	mov	r0, r4
 8006a24:	f7fa f86e 	bl	8000b04 <__aeabi_fsub>
 8006a28:	f7fa fb3c 	bl	80010a4 <__aeabi_f2iz>
 8006a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a2e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006a32:	f846 0b04 	str.w	r0, [r6], #4
 8006a36:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fa f864 	bl	8000b08 <__addsf3>
 8006a40:	4604      	mov	r4, r0
 8006a42:	e756      	b.n	80068f2 <__kernel_rem_pio2f+0xa2>
 8006a44:	d106      	bne.n	8006a54 <__kernel_rem_pio2f+0x204>
 8006a46:	f108 33ff 	add.w	r3, r8, #4294967295
 8006a4a:	aa0a      	add	r2, sp, #40	; 0x28
 8006a4c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006a50:	1224      	asrs	r4, r4, #8
 8006a52:	e785      	b.n	8006960 <__kernel_rem_pio2f+0x110>
 8006a54:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006a58:	f7fa fb10 	bl	800107c <__aeabi_fcmpge>
 8006a5c:	4604      	mov	r4, r0
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	d134      	bne.n	8006acc <__kernel_rem_pio2f+0x27c>
 8006a62:	2100      	movs	r1, #0
 8006a64:	4648      	mov	r0, r9
 8006a66:	f7fa faeb 	bl	8001040 <__aeabi_fcmpeq>
 8006a6a:	2800      	cmp	r0, #0
 8006a6c:	f000 809a 	beq.w	8006ba4 <__kernel_rem_pio2f+0x354>
 8006a70:	f108 35ff 	add.w	r5, r8, #4294967295
 8006a74:	462b      	mov	r3, r5
 8006a76:	2200      	movs	r2, #0
 8006a78:	9901      	ldr	r1, [sp, #4]
 8006a7a:	428b      	cmp	r3, r1
 8006a7c:	da4d      	bge.n	8006b1a <__kernel_rem_pio2f+0x2ca>
 8006a7e:	2a00      	cmp	r2, #0
 8006a80:	d07c      	beq.n	8006b7c <__kernel_rem_pio2f+0x32c>
 8006a82:	ab0a      	add	r3, sp, #40	; 0x28
 8006a84:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006a88:	3f08      	subs	r7, #8
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f000 8088 	beq.w	8006ba0 <__kernel_rem_pio2f+0x350>
 8006a90:	4639      	mov	r1, r7
 8006a92:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006a96:	f000 fb57 	bl	8007148 <scalbnf>
 8006a9a:	46aa      	mov	sl, r5
 8006a9c:	4681      	mov	r9, r0
 8006a9e:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 8006aa2:	af46      	add	r7, sp, #280	; 0x118
 8006aa4:	f1ba 0f00 	cmp.w	sl, #0
 8006aa8:	f280 80b1 	bge.w	8006c0e <__kernel_rem_pio2f+0x3be>
 8006aac:	46a9      	mov	r9, r5
 8006aae:	f04f 0a00 	mov.w	sl, #0
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f1b9 0f00 	cmp.w	r9, #0
 8006ab8:	f2c0 80db 	blt.w	8006c72 <__kernel_rem_pio2f+0x422>
 8006abc:	a946      	add	r1, sp, #280	; 0x118
 8006abe:	4617      	mov	r7, r2
 8006ac0:	f04f 0800 	mov.w	r8, #0
 8006ac4:	4b2c      	ldr	r3, [pc, #176]	; (8006b78 <__kernel_rem_pio2f+0x328>)
 8006ac6:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 8006aca:	e0c3      	b.n	8006c54 <__kernel_rem_pio2f+0x404>
 8006acc:	2402      	movs	r4, #2
 8006ace:	e749      	b.n	8006964 <__kernel_rem_pio2f+0x114>
 8006ad0:	682b      	ldr	r3, [r5, #0]
 8006ad2:	f1ba 0f00 	cmp.w	sl, #0
 8006ad6:	d108      	bne.n	8006aea <__kernel_rem_pio2f+0x29a>
 8006ad8:	b11b      	cbz	r3, 8006ae2 <__kernel_rem_pio2f+0x292>
 8006ada:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006ade:	602b      	str	r3, [r5, #0]
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	469a      	mov	sl, r3
 8006ae4:	3201      	adds	r2, #1
 8006ae6:	3504      	adds	r5, #4
 8006ae8:	e73f      	b.n	800696a <__kernel_rem_pio2f+0x11a>
 8006aea:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8006aee:	602b      	str	r3, [r5, #0]
 8006af0:	4653      	mov	r3, sl
 8006af2:	e7f6      	b.n	8006ae2 <__kernel_rem_pio2f+0x292>
 8006af4:	f108 32ff 	add.w	r2, r8, #4294967295
 8006af8:	ab0a      	add	r3, sp, #40	; 0x28
 8006afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b02:	a90a      	add	r1, sp, #40	; 0x28
 8006b04:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006b08:	e73a      	b.n	8006980 <__kernel_rem_pio2f+0x130>
 8006b0a:	f108 32ff 	add.w	r2, r8, #4294967295
 8006b0e:	ab0a      	add	r3, sp, #40	; 0x28
 8006b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b18:	e7f3      	b.n	8006b02 <__kernel_rem_pio2f+0x2b2>
 8006b1a:	a90a      	add	r1, sp, #40	; 0x28
 8006b1c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006b20:	3b01      	subs	r3, #1
 8006b22:	430a      	orrs	r2, r1
 8006b24:	e7a8      	b.n	8006a78 <__kernel_rem_pio2f+0x228>
 8006b26:	3301      	adds	r3, #1
 8006b28:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006b2c:	2900      	cmp	r1, #0
 8006b2e:	d0fa      	beq.n	8006b26 <__kernel_rem_pio2f+0x2d6>
 8006b30:	9a04      	ldr	r2, [sp, #16]
 8006b32:	f108 0501 	add.w	r5, r8, #1
 8006b36:	eb08 0402 	add.w	r4, r8, r2
 8006b3a:	aa1e      	add	r2, sp, #120	; 0x78
 8006b3c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8006b40:	4498      	add	r8, r3
 8006b42:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 8006b46:	45a8      	cmp	r8, r5
 8006b48:	f6ff aec7 	blt.w	80068da <__kernel_rem_pio2f+0x8a>
 8006b4c:	9b07      	ldr	r3, [sp, #28]
 8006b4e:	46a3      	mov	fp, r4
 8006b50:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b54:	f7fa f88c 	bl	8000c70 <__aeabi_i2f>
 8006b58:	f04f 0a00 	mov.w	sl, #0
 8006b5c:	2600      	movs	r6, #0
 8006b5e:	f84b 0b04 	str.w	r0, [fp], #4
 8006b62:	9b03      	ldr	r3, [sp, #12]
 8006b64:	459a      	cmp	sl, r3
 8006b66:	dd0c      	ble.n	8006b82 <__kernel_rem_pio2f+0x332>
 8006b68:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 8006b6c:	465c      	mov	r4, fp
 8006b6e:	3501      	adds	r5, #1
 8006b70:	e7e9      	b.n	8006b46 <__kernel_rem_pio2f+0x2f6>
 8006b72:	bf00      	nop
 8006b74:	08007874 	.word	0x08007874
 8006b78:	08007848 	.word	0x08007848
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	9a08      	ldr	r2, [sp, #32]
 8006b80:	e7d2      	b.n	8006b28 <__kernel_rem_pio2f+0x2d8>
 8006b82:	9b05      	ldr	r3, [sp, #20]
 8006b84:	f854 0904 	ldr.w	r0, [r4], #-4
 8006b88:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8006b8c:	f7fa f8c4 	bl	8000d18 <__aeabi_fmul>
 8006b90:	4601      	mov	r1, r0
 8006b92:	4630      	mov	r0, r6
 8006b94:	f7f9 ffb8 	bl	8000b08 <__addsf3>
 8006b98:	f10a 0a01 	add.w	sl, sl, #1
 8006b9c:	4606      	mov	r6, r0
 8006b9e:	e7e0      	b.n	8006b62 <__kernel_rem_pio2f+0x312>
 8006ba0:	3d01      	subs	r5, #1
 8006ba2:	e76e      	b.n	8006a82 <__kernel_rem_pio2f+0x232>
 8006ba4:	9b06      	ldr	r3, [sp, #24]
 8006ba6:	9a02      	ldr	r2, [sp, #8]
 8006ba8:	4648      	mov	r0, r9
 8006baa:	1a99      	subs	r1, r3, r2
 8006bac:	f000 facc 	bl	8007148 <scalbnf>
 8006bb0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8006bb4:	4605      	mov	r5, r0
 8006bb6:	f7fa fa61 	bl	800107c <__aeabi_fcmpge>
 8006bba:	b300      	cbz	r0, 8006bfe <__kernel_rem_pio2f+0x3ae>
 8006bbc:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	f7fa f8a9 	bl	8000d18 <__aeabi_fmul>
 8006bc6:	f7fa fa6d 	bl	80010a4 <__aeabi_f2iz>
 8006bca:	f7fa f851 	bl	8000c70 <__aeabi_i2f>
 8006bce:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8006bd2:	4681      	mov	r9, r0
 8006bd4:	f7fa f8a0 	bl	8000d18 <__aeabi_fmul>
 8006bd8:	4601      	mov	r1, r0
 8006bda:	4628      	mov	r0, r5
 8006bdc:	f7f9 ff92 	bl	8000b04 <__aeabi_fsub>
 8006be0:	f7fa fa60 	bl	80010a4 <__aeabi_f2iz>
 8006be4:	ab0a      	add	r3, sp, #40	; 0x28
 8006be6:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006bea:	4648      	mov	r0, r9
 8006bec:	f7fa fa5a 	bl	80010a4 <__aeabi_f2iz>
 8006bf0:	f108 0501 	add.w	r5, r8, #1
 8006bf4:	ab0a      	add	r3, sp, #40	; 0x28
 8006bf6:	3708      	adds	r7, #8
 8006bf8:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8006bfc:	e748      	b.n	8006a90 <__kernel_rem_pio2f+0x240>
 8006bfe:	4628      	mov	r0, r5
 8006c00:	f7fa fa50 	bl	80010a4 <__aeabi_f2iz>
 8006c04:	ab0a      	add	r3, sp, #40	; 0x28
 8006c06:	4645      	mov	r5, r8
 8006c08:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006c0c:	e740      	b.n	8006a90 <__kernel_rem_pio2f+0x240>
 8006c0e:	ab0a      	add	r3, sp, #40	; 0x28
 8006c10:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006c14:	f7fa f82c 	bl	8000c70 <__aeabi_i2f>
 8006c18:	4649      	mov	r1, r9
 8006c1a:	f7fa f87d 	bl	8000d18 <__aeabi_fmul>
 8006c1e:	4641      	mov	r1, r8
 8006c20:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 8006c24:	4648      	mov	r0, r9
 8006c26:	f7fa f877 	bl	8000d18 <__aeabi_fmul>
 8006c2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c2e:	4681      	mov	r9, r0
 8006c30:	e738      	b.n	8006aa4 <__kernel_rem_pio2f+0x254>
 8006c32:	f853 0b04 	ldr.w	r0, [r3], #4
 8006c36:	f85b 1b04 	ldr.w	r1, [fp], #4
 8006c3a:	9203      	str	r2, [sp, #12]
 8006c3c:	9302      	str	r3, [sp, #8]
 8006c3e:	f7fa f86b 	bl	8000d18 <__aeabi_fmul>
 8006c42:	4601      	mov	r1, r0
 8006c44:	4638      	mov	r0, r7
 8006c46:	f7f9 ff5f 	bl	8000b08 <__addsf3>
 8006c4a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006c4e:	4607      	mov	r7, r0
 8006c50:	f108 0801 	add.w	r8, r8, #1
 8006c54:	9901      	ldr	r1, [sp, #4]
 8006c56:	4588      	cmp	r8, r1
 8006c58:	dc01      	bgt.n	8006c5e <__kernel_rem_pio2f+0x40e>
 8006c5a:	45c2      	cmp	sl, r8
 8006c5c:	dae9      	bge.n	8006c32 <__kernel_rem_pio2f+0x3e2>
 8006c5e:	ab5a      	add	r3, sp, #360	; 0x168
 8006c60:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8006c64:	f843 7ca0 	str.w	r7, [r3, #-160]
 8006c68:	f109 39ff 	add.w	r9, r9, #4294967295
 8006c6c:	f10a 0a01 	add.w	sl, sl, #1
 8006c70:	e720      	b.n	8006ab4 <__kernel_rem_pio2f+0x264>
 8006c72:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	dc07      	bgt.n	8006c88 <__kernel_rem_pio2f+0x438>
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	dc4d      	bgt.n	8006d18 <__kernel_rem_pio2f+0x4c8>
 8006c7c:	d02e      	beq.n	8006cdc <__kernel_rem_pio2f+0x48c>
 8006c7e:	f006 0007 	and.w	r0, r6, #7
 8006c82:	b05b      	add	sp, #364	; 0x16c
 8006c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c88:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8006c8a:	2b03      	cmp	r3, #3
 8006c8c:	d1f7      	bne.n	8006c7e <__kernel_rem_pio2f+0x42e>
 8006c8e:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 8006c92:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 8006c96:	46b8      	mov	r8, r7
 8006c98:	46aa      	mov	sl, r5
 8006c9a:	f1ba 0f00 	cmp.w	sl, #0
 8006c9e:	dc48      	bgt.n	8006d32 <__kernel_rem_pio2f+0x4e2>
 8006ca0:	46a9      	mov	r9, r5
 8006ca2:	f1b9 0f01 	cmp.w	r9, #1
 8006ca6:	dc5f      	bgt.n	8006d68 <__kernel_rem_pio2f+0x518>
 8006ca8:	2000      	movs	r0, #0
 8006caa:	2d01      	cmp	r5, #1
 8006cac:	dc75      	bgt.n	8006d9a <__kernel_rem_pio2f+0x54a>
 8006cae:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8006cb0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8006cb2:	2c00      	cmp	r4, #0
 8006cb4:	d177      	bne.n	8006da6 <__kernel_rem_pio2f+0x556>
 8006cb6:	9900      	ldr	r1, [sp, #0]
 8006cb8:	600a      	str	r2, [r1, #0]
 8006cba:	460a      	mov	r2, r1
 8006cbc:	604b      	str	r3, [r1, #4]
 8006cbe:	6090      	str	r0, [r2, #8]
 8006cc0:	e7dd      	b.n	8006c7e <__kernel_rem_pio2f+0x42e>
 8006cc2:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 8006cc6:	f7f9 ff1f 	bl	8000b08 <__addsf3>
 8006cca:	3d01      	subs	r5, #1
 8006ccc:	2d00      	cmp	r5, #0
 8006cce:	daf8      	bge.n	8006cc2 <__kernel_rem_pio2f+0x472>
 8006cd0:	b10c      	cbz	r4, 8006cd6 <__kernel_rem_pio2f+0x486>
 8006cd2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8006cd6:	9b00      	ldr	r3, [sp, #0]
 8006cd8:	6018      	str	r0, [r3, #0]
 8006cda:	e7d0      	b.n	8006c7e <__kernel_rem_pio2f+0x42e>
 8006cdc:	2000      	movs	r0, #0
 8006cde:	af32      	add	r7, sp, #200	; 0xc8
 8006ce0:	e7f4      	b.n	8006ccc <__kernel_rem_pio2f+0x47c>
 8006ce2:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8006ce6:	f7f9 ff0f 	bl	8000b08 <__addsf3>
 8006cea:	3f01      	subs	r7, #1
 8006cec:	2f00      	cmp	r7, #0
 8006cee:	daf8      	bge.n	8006ce2 <__kernel_rem_pio2f+0x492>
 8006cf0:	b1bc      	cbz	r4, 8006d22 <__kernel_rem_pio2f+0x4d2>
 8006cf2:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8006cf6:	9a00      	ldr	r2, [sp, #0]
 8006cf8:	4601      	mov	r1, r0
 8006cfa:	6013      	str	r3, [r2, #0]
 8006cfc:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8006cfe:	f7f9 ff01 	bl	8000b04 <__aeabi_fsub>
 8006d02:	2701      	movs	r7, #1
 8006d04:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8006d08:	42bd      	cmp	r5, r7
 8006d0a:	da0c      	bge.n	8006d26 <__kernel_rem_pio2f+0x4d6>
 8006d0c:	b10c      	cbz	r4, 8006d12 <__kernel_rem_pio2f+0x4c2>
 8006d0e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8006d12:	9b00      	ldr	r3, [sp, #0]
 8006d14:	6058      	str	r0, [r3, #4]
 8006d16:	e7b2      	b.n	8006c7e <__kernel_rem_pio2f+0x42e>
 8006d18:	462f      	mov	r7, r5
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8006d20:	e7e4      	b.n	8006cec <__kernel_rem_pio2f+0x49c>
 8006d22:	4603      	mov	r3, r0
 8006d24:	e7e7      	b.n	8006cf6 <__kernel_rem_pio2f+0x4a6>
 8006d26:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8006d2a:	f7f9 feed 	bl	8000b08 <__addsf3>
 8006d2e:	3701      	adds	r7, #1
 8006d30:	e7ea      	b.n	8006d08 <__kernel_rem_pio2f+0x4b8>
 8006d32:	f8d8 3000 	ldr.w	r3, [r8]
 8006d36:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	9302      	str	r3, [sp, #8]
 8006d40:	9201      	str	r2, [sp, #4]
 8006d42:	f7f9 fee1 	bl	8000b08 <__addsf3>
 8006d46:	9a01      	ldr	r2, [sp, #4]
 8006d48:	4601      	mov	r1, r0
 8006d4a:	4681      	mov	r9, r0
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	f7f9 fed9 	bl	8000b04 <__aeabi_fsub>
 8006d52:	9b02      	ldr	r3, [sp, #8]
 8006d54:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d58:	4619      	mov	r1, r3
 8006d5a:	f7f9 fed5 	bl	8000b08 <__addsf3>
 8006d5e:	f848 0904 	str.w	r0, [r8], #-4
 8006d62:	f8c8 9000 	str.w	r9, [r8]
 8006d66:	e798      	b.n	8006c9a <__kernel_rem_pio2f+0x44a>
 8006d68:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8006d6c:	f8d7 a000 	ldr.w	sl, [r7]
 8006d70:	4618      	mov	r0, r3
 8006d72:	4651      	mov	r1, sl
 8006d74:	9301      	str	r3, [sp, #4]
 8006d76:	f7f9 fec7 	bl	8000b08 <__addsf3>
 8006d7a:	9b01      	ldr	r3, [sp, #4]
 8006d7c:	4601      	mov	r1, r0
 8006d7e:	4680      	mov	r8, r0
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7f9 febf 	bl	8000b04 <__aeabi_fsub>
 8006d86:	4651      	mov	r1, sl
 8006d88:	f7f9 febe 	bl	8000b08 <__addsf3>
 8006d8c:	f847 0904 	str.w	r0, [r7], #-4
 8006d90:	f109 39ff 	add.w	r9, r9, #4294967295
 8006d94:	f8c7 8000 	str.w	r8, [r7]
 8006d98:	e783      	b.n	8006ca2 <__kernel_rem_pio2f+0x452>
 8006d9a:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 8006d9e:	f7f9 feb3 	bl	8000b08 <__addsf3>
 8006da2:	3d01      	subs	r5, #1
 8006da4:	e781      	b.n	8006caa <__kernel_rem_pio2f+0x45a>
 8006da6:	9900      	ldr	r1, [sp, #0]
 8006da8:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8006dac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006db0:	600a      	str	r2, [r1, #0]
 8006db2:	604b      	str	r3, [r1, #4]
 8006db4:	460a      	mov	r2, r1
 8006db6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8006dba:	e780      	b.n	8006cbe <__kernel_rem_pio2f+0x46e>

08006dbc <__kernel_sinf>:
 8006dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dc0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8006dc4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8006dc8:	4604      	mov	r4, r0
 8006dca:	460f      	mov	r7, r1
 8006dcc:	4691      	mov	r9, r2
 8006dce:	da03      	bge.n	8006dd8 <__kernel_sinf+0x1c>
 8006dd0:	f7fa f968 	bl	80010a4 <__aeabi_f2iz>
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	d035      	beq.n	8006e44 <__kernel_sinf+0x88>
 8006dd8:	4621      	mov	r1, r4
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f7f9 ff9c 	bl	8000d18 <__aeabi_fmul>
 8006de0:	4605      	mov	r5, r0
 8006de2:	4601      	mov	r1, r0
 8006de4:	4620      	mov	r0, r4
 8006de6:	f7f9 ff97 	bl	8000d18 <__aeabi_fmul>
 8006dea:	4929      	ldr	r1, [pc, #164]	; (8006e90 <__kernel_sinf+0xd4>)
 8006dec:	4606      	mov	r6, r0
 8006dee:	4628      	mov	r0, r5
 8006df0:	f7f9 ff92 	bl	8000d18 <__aeabi_fmul>
 8006df4:	4927      	ldr	r1, [pc, #156]	; (8006e94 <__kernel_sinf+0xd8>)
 8006df6:	f7f9 fe85 	bl	8000b04 <__aeabi_fsub>
 8006dfa:	4629      	mov	r1, r5
 8006dfc:	f7f9 ff8c 	bl	8000d18 <__aeabi_fmul>
 8006e00:	4925      	ldr	r1, [pc, #148]	; (8006e98 <__kernel_sinf+0xdc>)
 8006e02:	f7f9 fe81 	bl	8000b08 <__addsf3>
 8006e06:	4629      	mov	r1, r5
 8006e08:	f7f9 ff86 	bl	8000d18 <__aeabi_fmul>
 8006e0c:	4923      	ldr	r1, [pc, #140]	; (8006e9c <__kernel_sinf+0xe0>)
 8006e0e:	f7f9 fe79 	bl	8000b04 <__aeabi_fsub>
 8006e12:	4629      	mov	r1, r5
 8006e14:	f7f9 ff80 	bl	8000d18 <__aeabi_fmul>
 8006e18:	4921      	ldr	r1, [pc, #132]	; (8006ea0 <__kernel_sinf+0xe4>)
 8006e1a:	f7f9 fe75 	bl	8000b08 <__addsf3>
 8006e1e:	4680      	mov	r8, r0
 8006e20:	f1b9 0f00 	cmp.w	r9, #0
 8006e24:	d111      	bne.n	8006e4a <__kernel_sinf+0x8e>
 8006e26:	4601      	mov	r1, r0
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f7f9 ff75 	bl	8000d18 <__aeabi_fmul>
 8006e2e:	491d      	ldr	r1, [pc, #116]	; (8006ea4 <__kernel_sinf+0xe8>)
 8006e30:	f7f9 fe68 	bl	8000b04 <__aeabi_fsub>
 8006e34:	4631      	mov	r1, r6
 8006e36:	f7f9 ff6f 	bl	8000d18 <__aeabi_fmul>
 8006e3a:	4601      	mov	r1, r0
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	f7f9 fe63 	bl	8000b08 <__addsf3>
 8006e42:	4604      	mov	r4, r0
 8006e44:	4620      	mov	r0, r4
 8006e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e4a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006e4e:	4638      	mov	r0, r7
 8006e50:	f7f9 ff62 	bl	8000d18 <__aeabi_fmul>
 8006e54:	4641      	mov	r1, r8
 8006e56:	4681      	mov	r9, r0
 8006e58:	4630      	mov	r0, r6
 8006e5a:	f7f9 ff5d 	bl	8000d18 <__aeabi_fmul>
 8006e5e:	4601      	mov	r1, r0
 8006e60:	4648      	mov	r0, r9
 8006e62:	f7f9 fe4f 	bl	8000b04 <__aeabi_fsub>
 8006e66:	4629      	mov	r1, r5
 8006e68:	f7f9 ff56 	bl	8000d18 <__aeabi_fmul>
 8006e6c:	4639      	mov	r1, r7
 8006e6e:	f7f9 fe49 	bl	8000b04 <__aeabi_fsub>
 8006e72:	490c      	ldr	r1, [pc, #48]	; (8006ea4 <__kernel_sinf+0xe8>)
 8006e74:	4605      	mov	r5, r0
 8006e76:	4630      	mov	r0, r6
 8006e78:	f7f9 ff4e 	bl	8000d18 <__aeabi_fmul>
 8006e7c:	4601      	mov	r1, r0
 8006e7e:	4628      	mov	r0, r5
 8006e80:	f7f9 fe42 	bl	8000b08 <__addsf3>
 8006e84:	4601      	mov	r1, r0
 8006e86:	4620      	mov	r0, r4
 8006e88:	f7f9 fe3c 	bl	8000b04 <__aeabi_fsub>
 8006e8c:	e7d9      	b.n	8006e42 <__kernel_sinf+0x86>
 8006e8e:	bf00      	nop
 8006e90:	2f2ec9d3 	.word	0x2f2ec9d3
 8006e94:	32d72f34 	.word	0x32d72f34
 8006e98:	3638ef1b 	.word	0x3638ef1b
 8006e9c:	39500d01 	.word	0x39500d01
 8006ea0:	3c088889 	.word	0x3c088889
 8006ea4:	3e2aaaab 	.word	0x3e2aaaab

08006ea8 <fabs>:
 8006ea8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006eac:	4770      	bx	lr
	...

08006eb0 <floor>:
 8006eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eb4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8006eb8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8006ebc:	2e13      	cmp	r6, #19
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	4607      	mov	r7, r0
 8006ec4:	460c      	mov	r4, r1
 8006ec6:	4605      	mov	r5, r0
 8006ec8:	dc34      	bgt.n	8006f34 <floor+0x84>
 8006eca:	2e00      	cmp	r6, #0
 8006ecc:	da15      	bge.n	8006efa <floor+0x4a>
 8006ece:	a334      	add	r3, pc, #208	; (adr r3, 8006fa0 <floor+0xf0>)
 8006ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed4:	f7f9 f94a 	bl	800016c <__adddf3>
 8006ed8:	2200      	movs	r2, #0
 8006eda:	2300      	movs	r3, #0
 8006edc:	f7f9 fd8c 	bl	80009f8 <__aeabi_dcmpgt>
 8006ee0:	b140      	cbz	r0, 8006ef4 <floor+0x44>
 8006ee2:	2c00      	cmp	r4, #0
 8006ee4:	da59      	bge.n	8006f9a <floor+0xea>
 8006ee6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006eea:	ea57 0503 	orrs.w	r5, r7, r3
 8006eee:	d001      	beq.n	8006ef4 <floor+0x44>
 8006ef0:	2500      	movs	r5, #0
 8006ef2:	4c2d      	ldr	r4, [pc, #180]	; (8006fa8 <floor+0xf8>)
 8006ef4:	4623      	mov	r3, r4
 8006ef6:	462f      	mov	r7, r5
 8006ef8:	e025      	b.n	8006f46 <floor+0x96>
 8006efa:	4a2c      	ldr	r2, [pc, #176]	; (8006fac <floor+0xfc>)
 8006efc:	fa42 f806 	asr.w	r8, r2, r6
 8006f00:	ea01 0208 	and.w	r2, r1, r8
 8006f04:	4302      	orrs	r2, r0
 8006f06:	d01e      	beq.n	8006f46 <floor+0x96>
 8006f08:	a325      	add	r3, pc, #148	; (adr r3, 8006fa0 <floor+0xf0>)
 8006f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0e:	f7f9 f92d 	bl	800016c <__adddf3>
 8006f12:	2200      	movs	r2, #0
 8006f14:	2300      	movs	r3, #0
 8006f16:	f7f9 fd6f 	bl	80009f8 <__aeabi_dcmpgt>
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	d0ea      	beq.n	8006ef4 <floor+0x44>
 8006f1e:	2c00      	cmp	r4, #0
 8006f20:	bfbe      	ittt	lt
 8006f22:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006f26:	fa43 f606 	asrlt.w	r6, r3, r6
 8006f2a:	19a4      	addlt	r4, r4, r6
 8006f2c:	2500      	movs	r5, #0
 8006f2e:	ea24 0408 	bic.w	r4, r4, r8
 8006f32:	e7df      	b.n	8006ef4 <floor+0x44>
 8006f34:	2e33      	cmp	r6, #51	; 0x33
 8006f36:	dd0a      	ble.n	8006f4e <floor+0x9e>
 8006f38:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006f3c:	d103      	bne.n	8006f46 <floor+0x96>
 8006f3e:	f7f9 f915 	bl	800016c <__adddf3>
 8006f42:	4607      	mov	r7, r0
 8006f44:	460b      	mov	r3, r1
 8006f46:	4638      	mov	r0, r7
 8006f48:	4619      	mov	r1, r3
 8006f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f52:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8006f56:	fa22 f808 	lsr.w	r8, r2, r8
 8006f5a:	ea18 0f00 	tst.w	r8, r0
 8006f5e:	d0f2      	beq.n	8006f46 <floor+0x96>
 8006f60:	a30f      	add	r3, pc, #60	; (adr r3, 8006fa0 <floor+0xf0>)
 8006f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f66:	f7f9 f901 	bl	800016c <__adddf3>
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	f7f9 fd43 	bl	80009f8 <__aeabi_dcmpgt>
 8006f72:	2800      	cmp	r0, #0
 8006f74:	d0be      	beq.n	8006ef4 <floor+0x44>
 8006f76:	2c00      	cmp	r4, #0
 8006f78:	da02      	bge.n	8006f80 <floor+0xd0>
 8006f7a:	2e14      	cmp	r6, #20
 8006f7c:	d103      	bne.n	8006f86 <floor+0xd6>
 8006f7e:	3401      	adds	r4, #1
 8006f80:	ea25 0508 	bic.w	r5, r5, r8
 8006f84:	e7b6      	b.n	8006ef4 <floor+0x44>
 8006f86:	2301      	movs	r3, #1
 8006f88:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006f8c:	fa03 f606 	lsl.w	r6, r3, r6
 8006f90:	4435      	add	r5, r6
 8006f92:	42bd      	cmp	r5, r7
 8006f94:	bf38      	it	cc
 8006f96:	18e4      	addcc	r4, r4, r3
 8006f98:	e7f2      	b.n	8006f80 <floor+0xd0>
 8006f9a:	2500      	movs	r5, #0
 8006f9c:	462c      	mov	r4, r5
 8006f9e:	e7a9      	b.n	8006ef4 <floor+0x44>
 8006fa0:	8800759c 	.word	0x8800759c
 8006fa4:	7e37e43c 	.word	0x7e37e43c
 8006fa8:	bff00000 	.word	0xbff00000
 8006fac:	000fffff 	.word	0x000fffff

08006fb0 <scalbn>:
 8006fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	460d      	mov	r5, r1
 8006fba:	4617      	mov	r7, r2
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	b996      	cbnz	r6, 8006fe6 <scalbn+0x36>
 8006fc0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006fc4:	4303      	orrs	r3, r0
 8006fc6:	d039      	beq.n	800703c <scalbn+0x8c>
 8006fc8:	4b35      	ldr	r3, [pc, #212]	; (80070a0 <scalbn+0xf0>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f7f9 fa84 	bl	80004d8 <__aeabi_dmul>
 8006fd0:	4b34      	ldr	r3, [pc, #208]	; (80070a4 <scalbn+0xf4>)
 8006fd2:	4604      	mov	r4, r0
 8006fd4:	429f      	cmp	r7, r3
 8006fd6:	460d      	mov	r5, r1
 8006fd8:	da0f      	bge.n	8006ffa <scalbn+0x4a>
 8006fda:	a32d      	add	r3, pc, #180	; (adr r3, 8007090 <scalbn+0xe0>)
 8006fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe0:	f7f9 fa7a 	bl	80004d8 <__aeabi_dmul>
 8006fe4:	e006      	b.n	8006ff4 <scalbn+0x44>
 8006fe6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006fea:	4296      	cmp	r6, r2
 8006fec:	d10a      	bne.n	8007004 <scalbn+0x54>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	f7f9 f8bc 	bl	800016c <__adddf3>
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	460d      	mov	r5, r1
 8006ff8:	e020      	b.n	800703c <scalbn+0x8c>
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007000:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8007004:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8007008:	19b9      	adds	r1, r7, r6
 800700a:	4291      	cmp	r1, r2
 800700c:	dd0e      	ble.n	800702c <scalbn+0x7c>
 800700e:	a322      	add	r3, pc, #136	; (adr r3, 8007098 <scalbn+0xe8>)
 8007010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007014:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8007018:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800701c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8007020:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8007024:	4820      	ldr	r0, [pc, #128]	; (80070a8 <scalbn+0xf8>)
 8007026:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800702a:	e7d9      	b.n	8006fe0 <scalbn+0x30>
 800702c:	2900      	cmp	r1, #0
 800702e:	dd08      	ble.n	8007042 <scalbn+0x92>
 8007030:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007034:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007038:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800703c:	4620      	mov	r0, r4
 800703e:	4629      	mov	r1, r5
 8007040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007042:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8007046:	da16      	bge.n	8007076 <scalbn+0xc6>
 8007048:	f24c 3350 	movw	r3, #50000	; 0xc350
 800704c:	429f      	cmp	r7, r3
 800704e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8007052:	dd08      	ble.n	8007066 <scalbn+0xb6>
 8007054:	4c15      	ldr	r4, [pc, #84]	; (80070ac <scalbn+0xfc>)
 8007056:	4814      	ldr	r0, [pc, #80]	; (80070a8 <scalbn+0xf8>)
 8007058:	f363 74df 	bfi	r4, r3, #31, #1
 800705c:	a30e      	add	r3, pc, #56	; (adr r3, 8007098 <scalbn+0xe8>)
 800705e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007062:	4621      	mov	r1, r4
 8007064:	e7bc      	b.n	8006fe0 <scalbn+0x30>
 8007066:	4c12      	ldr	r4, [pc, #72]	; (80070b0 <scalbn+0x100>)
 8007068:	4812      	ldr	r0, [pc, #72]	; (80070b4 <scalbn+0x104>)
 800706a:	f363 74df 	bfi	r4, r3, #31, #1
 800706e:	a308      	add	r3, pc, #32	; (adr r3, 8007090 <scalbn+0xe0>)
 8007070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007074:	e7f5      	b.n	8007062 <scalbn+0xb2>
 8007076:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800707a:	3136      	adds	r1, #54	; 0x36
 800707c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007080:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8007084:	4620      	mov	r0, r4
 8007086:	4629      	mov	r1, r5
 8007088:	2200      	movs	r2, #0
 800708a:	4b0b      	ldr	r3, [pc, #44]	; (80070b8 <scalbn+0x108>)
 800708c:	e7a8      	b.n	8006fe0 <scalbn+0x30>
 800708e:	bf00      	nop
 8007090:	c2f8f359 	.word	0xc2f8f359
 8007094:	01a56e1f 	.word	0x01a56e1f
 8007098:	8800759c 	.word	0x8800759c
 800709c:	7e37e43c 	.word	0x7e37e43c
 80070a0:	43500000 	.word	0x43500000
 80070a4:	ffff3cb0 	.word	0xffff3cb0
 80070a8:	8800759c 	.word	0x8800759c
 80070ac:	7e37e43c 	.word	0x7e37e43c
 80070b0:	01a56e1f 	.word	0x01a56e1f
 80070b4:	c2f8f359 	.word	0xc2f8f359
 80070b8:	3c900000 	.word	0x3c900000

080070bc <fabsf>:
 80070bc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80070c0:	4770      	bx	lr
	...

080070c4 <floorf>:
 80070c4:	b570      	push	{r4, r5, r6, lr}
 80070c6:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 80070ca:	3d7f      	subs	r5, #127	; 0x7f
 80070cc:	2d16      	cmp	r5, #22
 80070ce:	4601      	mov	r1, r0
 80070d0:	4604      	mov	r4, r0
 80070d2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80070d6:	dc26      	bgt.n	8007126 <floorf+0x62>
 80070d8:	2d00      	cmp	r5, #0
 80070da:	da0e      	bge.n	80070fa <floorf+0x36>
 80070dc:	4917      	ldr	r1, [pc, #92]	; (800713c <floorf+0x78>)
 80070de:	f7f9 fd13 	bl	8000b08 <__addsf3>
 80070e2:	2100      	movs	r1, #0
 80070e4:	f7f9 ffd4 	bl	8001090 <__aeabi_fcmpgt>
 80070e8:	b128      	cbz	r0, 80070f6 <floorf+0x32>
 80070ea:	2c00      	cmp	r4, #0
 80070ec:	da23      	bge.n	8007136 <floorf+0x72>
 80070ee:	4b14      	ldr	r3, [pc, #80]	; (8007140 <floorf+0x7c>)
 80070f0:	2e00      	cmp	r6, #0
 80070f2:	bf18      	it	ne
 80070f4:	461c      	movne	r4, r3
 80070f6:	4621      	mov	r1, r4
 80070f8:	e01b      	b.n	8007132 <floorf+0x6e>
 80070fa:	4e12      	ldr	r6, [pc, #72]	; (8007144 <floorf+0x80>)
 80070fc:	412e      	asrs	r6, r5
 80070fe:	4230      	tst	r0, r6
 8007100:	d017      	beq.n	8007132 <floorf+0x6e>
 8007102:	490e      	ldr	r1, [pc, #56]	; (800713c <floorf+0x78>)
 8007104:	f7f9 fd00 	bl	8000b08 <__addsf3>
 8007108:	2100      	movs	r1, #0
 800710a:	f7f9 ffc1 	bl	8001090 <__aeabi_fcmpgt>
 800710e:	2800      	cmp	r0, #0
 8007110:	d0f1      	beq.n	80070f6 <floorf+0x32>
 8007112:	2c00      	cmp	r4, #0
 8007114:	bfbe      	ittt	lt
 8007116:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800711a:	fa43 f505 	asrlt.w	r5, r3, r5
 800711e:	1964      	addlt	r4, r4, r5
 8007120:	ea24 0406 	bic.w	r4, r4, r6
 8007124:	e7e7      	b.n	80070f6 <floorf+0x32>
 8007126:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800712a:	d302      	bcc.n	8007132 <floorf+0x6e>
 800712c:	f7f9 fcec 	bl	8000b08 <__addsf3>
 8007130:	4601      	mov	r1, r0
 8007132:	4608      	mov	r0, r1
 8007134:	bd70      	pop	{r4, r5, r6, pc}
 8007136:	2400      	movs	r4, #0
 8007138:	e7dd      	b.n	80070f6 <floorf+0x32>
 800713a:	bf00      	nop
 800713c:	7149f2ca 	.word	0x7149f2ca
 8007140:	bf800000 	.word	0xbf800000
 8007144:	007fffff 	.word	0x007fffff

08007148 <scalbnf>:
 8007148:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800714c:	b538      	push	{r3, r4, r5, lr}
 800714e:	4603      	mov	r3, r0
 8007150:	460d      	mov	r5, r1
 8007152:	4604      	mov	r4, r0
 8007154:	d02a      	beq.n	80071ac <scalbnf+0x64>
 8007156:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800715a:	d304      	bcc.n	8007166 <scalbnf+0x1e>
 800715c:	4601      	mov	r1, r0
 800715e:	f7f9 fcd3 	bl	8000b08 <__addsf3>
 8007162:	4603      	mov	r3, r0
 8007164:	e022      	b.n	80071ac <scalbnf+0x64>
 8007166:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800716a:	d117      	bne.n	800719c <scalbnf+0x54>
 800716c:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8007170:	f7f9 fdd2 	bl	8000d18 <__aeabi_fmul>
 8007174:	4a17      	ldr	r2, [pc, #92]	; (80071d4 <scalbnf+0x8c>)
 8007176:	4603      	mov	r3, r0
 8007178:	4295      	cmp	r5, r2
 800717a:	db0b      	blt.n	8007194 <scalbnf+0x4c>
 800717c:	4604      	mov	r4, r0
 800717e:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8007182:	3a19      	subs	r2, #25
 8007184:	442a      	add	r2, r5
 8007186:	2afe      	cmp	r2, #254	; 0xfe
 8007188:	dd0a      	ble.n	80071a0 <scalbnf+0x58>
 800718a:	4913      	ldr	r1, [pc, #76]	; (80071d8 <scalbnf+0x90>)
 800718c:	4618      	mov	r0, r3
 800718e:	f361 001e 	bfi	r0, r1, #0, #31
 8007192:	e000      	b.n	8007196 <scalbnf+0x4e>
 8007194:	4911      	ldr	r1, [pc, #68]	; (80071dc <scalbnf+0x94>)
 8007196:	f7f9 fdbf 	bl	8000d18 <__aeabi_fmul>
 800719a:	e7e2      	b.n	8007162 <scalbnf+0x1a>
 800719c:	0dd2      	lsrs	r2, r2, #23
 800719e:	e7f1      	b.n	8007184 <scalbnf+0x3c>
 80071a0:	2a00      	cmp	r2, #0
 80071a2:	dd05      	ble.n	80071b0 <scalbnf+0x68>
 80071a4:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 80071a8:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 80071ac:	4618      	mov	r0, r3
 80071ae:	bd38      	pop	{r3, r4, r5, pc}
 80071b0:	f112 0f16 	cmn.w	r2, #22
 80071b4:	da05      	bge.n	80071c2 <scalbnf+0x7a>
 80071b6:	f24c 3250 	movw	r2, #50000	; 0xc350
 80071ba:	4295      	cmp	r5, r2
 80071bc:	dce5      	bgt.n	800718a <scalbnf+0x42>
 80071be:	4907      	ldr	r1, [pc, #28]	; (80071dc <scalbnf+0x94>)
 80071c0:	e7e4      	b.n	800718c <scalbnf+0x44>
 80071c2:	3219      	adds	r2, #25
 80071c4:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 80071c8:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 80071cc:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 80071d0:	e7e1      	b.n	8007196 <scalbnf+0x4e>
 80071d2:	bf00      	nop
 80071d4:	ffff3cb0 	.word	0xffff3cb0
 80071d8:	7149f2ca 	.word	0x7149f2ca
 80071dc:	0da24260 	.word	0x0da24260

080071e0 <_init>:
 80071e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e2:	bf00      	nop
 80071e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071e6:	bc08      	pop	{r3}
 80071e8:	469e      	mov	lr, r3
 80071ea:	4770      	bx	lr

080071ec <_fini>:
 80071ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ee:	bf00      	nop
 80071f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071f2:	bc08      	pop	{r3}
 80071f4:	469e      	mov	lr, r3
 80071f6:	4770      	bx	lr
